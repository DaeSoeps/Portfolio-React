{"ast":null,"code":"var __jsx = React.createElement;\n// root , 모든 페이지의 레이아웃 역할\nimport React from \"react\";\nimport Head from \"next/head\";\nimport AppLayout from \"../components/AppLayout\";\nimport PropTypes from \"prop-types\";\nimport reducer from \"../reducers\";\nimport { Provider } from 'react-redux'; // 리덕스 스테이트를 제공해줌(컴포넌트)\n\nimport createSagaMiddleware from 'redux-saga';\nimport withReduxSaga from 'next-redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootSaga from \"../sagas\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\";\n\nconst Portfolio = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return (// Provider 가 최상위 컴포넌트이기 때문에 자식 컴포넌트들이 스토어에 접근할 수 있음\n    // 스토어는 state, action, reducer 가 합쳐진 것\n    __jsx(Provider, {\n      store: store\n    }, __jsx(Head, null, __jsx(\"title\", null, \"PortFolio\"), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.css\"\n    }), __jsx(\"script\", {\n      src: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.js\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      type: \"text/css\",\n      charSet: \"UTF-8\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      type: \"text/css\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n    })), __jsx(AppLayout, null, __jsx(Component, pageProps)))\n  );\n};\n\nPortfolio.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  // JSX 에 들어가는 모든것(문자열,컴포넌트,태그,숫자 등)\n  store: PropTypes.object.isRequired,\n  // isRequired : 필수값( 반드시 props가 존재, 없으면 경고 )\n  pageProps: PropTypes.object.isRequired\n};\n\nPortfolio.getInitialProps = async context => {\n  console.log(context);\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n  const state = ctx.store.getState(); // AppLayout 부분 SSR구조변경 \n  // 리덕스 사가 호출순서 대로 코딩할 것.\n\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // 클라이언트>서버 구조일땐 브라우저가 쿠키를 같이 넣어줬었는데(withCridentials:true),\n\n  if (ctx.isServer && cookie) {\n    // 서버일때(SSR)와 아닐때가 있기때문에 분기처리 해줌\n    axios.defaults.headers.Cookie = cookie; // SSR은 직접 쿠키를 넣어줘야함\n  }\n\n  if (!state.user.me) {\n    // AppLayout 에서 !me 일때 디스패치 해줬던 것 - 스토어에서 me 정보를 가져오기\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx); // 라이프사이클: 1. server에서 라우팅, 2. page에서 getInit, 3. 여기로 전달(ctx)\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware]; // 보안상 아래 부분은 실 배포용인지 개발용인지 구분\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && false && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer); // 여기에 store 커스터마이징\n\n  store.sagaTask = sagaMiddleware.run(rootSaga); //SSR 추가\n\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Portfolio)); // 컴포넌트를 감싸줌(고차 컴포넌트- 기존컴포넌트 확장)","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/_app.js"],"names":["React","Head","AppLayout","PropTypes","reducer","Provider","createSagaMiddleware","withReduxSaga","withRedux","createStore","applyMiddleware","compose","rootSaga","LOAD_USER_REQUEST","axios","Portfolio","Component","store","pageProps","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["// root , 모든 페이지의 레이아웃 역할\r\nimport React from \"react\";\r\nimport Head from \"next/head\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PropTypes from \"prop-types\";\r\nimport reducer from \"../reducers\"; \r\nimport { Provider } from 'react-redux'; // 리덕스 스테이트를 제공해줌(컴포넌트)\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport withReduxSaga from 'next-redux-saga';\r\nimport withRedux from 'next-redux-wrapper'\r\nimport { createStore, applyMiddleware, compose} from 'redux';\r\nimport rootSaga from \"../sagas\";\r\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\r\nimport axios from \"axios\";\r\n\r\nconst Portfolio = ({ Component, store, pageProps }) => {\r\n  return (\r\n    // Provider 가 최상위 컴포넌트이기 때문에 자식 컴포넌트들이 스토어에 접근할 수 있음\r\n    // 스토어는 state, action, reducer 가 합쳐진 것\r\n   <Provider store={store}>\r\n      <Head>\r\n        <title>PortFolio</title>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.css\"\r\n        ></link>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.js\"></script>\r\n        <link rel=\"stylesheet\" type=\"text/css\" charSet=\"UTF-8\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\" />\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\" />\r\n      </Head>\r\n      <AppLayout>\r\n        <Component {...pageProps}></Component>\r\n      </AppLayout>\r\n   </Provider>\r\n  );\r\n};\r\n\r\nPortfolio.propTypes = {\r\n  Component: PropTypes.elementType.isRequired, // JSX 에 들어가는 모든것(문자열,컴포넌트,태그,숫자 등)\r\n  store: PropTypes.object.isRequired, // isRequired : 필수값( 반드시 props가 존재, 없으면 경고 )\r\n  pageProps : PropTypes.object.isRequired,\r\n};\r\n\r\nPortfolio.getInitialProps = async (context) =>{\r\n  console.log(context);\r\n  const { ctx, Component } = context;\r\n  let pageProps = {};\r\n  const state = ctx.store.getState();// AppLayout 부분 SSR구조변경 \r\n  // 리덕스 사가 호출순서 대로 코딩할 것.\r\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';// 클라이언트>서버 구조일땐 브라우저가 쿠키를 같이 넣어줬었는데(withCridentials:true),\r\n  if(ctx.isServer && cookie){ // 서버일때(SSR)와 아닐때가 있기때문에 분기처리 해줌\r\n    axios.defaults.headers.Cookie = cookie; // SSR은 직접 쿠키를 넣어줘야함\r\n  }\r\n  if(!state.user.me){ // AppLayout 에서 !me 일때 디스패치 해줬던 것 - 스토어에서 me 정보를 가져오기\r\n    ctx.store.dispatch({\r\n      type: LOAD_USER_REQUEST,\r\n    })\r\n  }\r\n  if(Component.getInitialProps){\r\n    pageProps = await Component.getInitialProps(ctx);  // 라이프사이클: 1. server에서 라우팅, 2. page에서 getInit, 3. 여기로 전달(ctx)\r\n  }\r\n  return { pageProps };\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  // 보안상 아래 부분은 실 배포용인지 개발용인지 구분\r\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares),) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f, ) \r\n  const store = createStore(reducer, initialState, enhancer);\r\n  // 여기에 store 커스터마이징\r\n  store.sagaTask = sagaMiddleware.run(rootSaga); //SSR 추가\r\n  return store;\r\n}\r\n\r\nexport default withRedux(configureStore)(withReduxSaga(Portfolio));// 컴포넌트를 감싸줌(고차 컴포넌트- 기존컴포넌트 확장)\r\n"]},"metadata":{},"sourceType":"module"}