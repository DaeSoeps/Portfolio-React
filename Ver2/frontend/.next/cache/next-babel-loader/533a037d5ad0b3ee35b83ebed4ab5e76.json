{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchloadMainPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\nimport axios from 'axios';\nimport { Result } from 'antd';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\n\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {\n  return axios.get('/posts');\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts'); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\n}\n\nfunction loadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchloadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchloadMainPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchloadMainPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","loadMainPosts","watchloadMainPosts","postSaga","all","fork","takeLatest","put","delay","call","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","axios","Result","addPostAPI","postData","post","withCredentials","action","data","result","type","error","addCommentAPI","get","postId","loadMainPostsAPI"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n         ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS,\r\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE} from '../reducers/post';\r\nimport axios from 'axios';\r\nimport { Result } from 'antd';\r\n\r\nfunction addPostAPI(postData){\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true, //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\r\n    });\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n\r\n\r\nfunction addCommentAPI(){\r\n    return axios.get('/posts')\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId: action.data.postId,\r\n            },\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, addComment);\r\n}\r\n\r\n\r\nfunction loadMainPostsAPI(){\r\n    return axios.get('/posts'); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\r\n}\r\nfunction* loadMainPosts(){\r\n    try{\r\n        const result = yield call(loadMainPostsAPI);\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchloadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchloadMainPosts),\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}