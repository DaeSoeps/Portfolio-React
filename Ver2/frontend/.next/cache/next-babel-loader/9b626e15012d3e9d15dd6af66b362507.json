{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport post, { LOAD_POST_REQUEST } from '../reducers/post';\nimport Helmet from 'react-helmet';\n\nconst Post = ({\n  id\n}) => {\n  const {\n    singlePost\n  } = useSelector(state => state.post);\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    title: `${singlePost.User.nickname}님의 글`,\n    description: singlePost.content,\n    meta: [{\n      name: 'description',\n      content: singlePost.content\n    }, {\n      property: 'og:title',\n      content: `${singlePost.User.nickname}님의 게시글`\n    }, {\n      property: 'og:description',\n      content: `${singlePost.User.nickname}님의 게시글`\n    }, {\n      property: 'og:image',\n      content: singlePost.Images[0] && `http://localhost:3065/${post.Images[0].src}`\n    }, {\n      property: 'og:url',\n      content: `http://localhost:3060/post/${id}`\n    }]\n  }, __jsx(\"div\", null, singlePost.content), __jsx(\"div\", null, singlePost.User.nickname), __jsx(\"div\", null, singlePost.Images[0] && __jsx(\"img\", {\n    src: `http://localhost:3065/${singlePost.Images[0].src}`\n  }))));\n};\n\nPost.getInitialProps = async context => {\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: context.query.id\n  });\n  return {\n    id: parseInt(context.query.id, 10)\n  };\n};\n\nPost.propTypes = {\n  id: PropTypes.number.isRequired\n};\nexport default Post;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/post.js"],"names":["React","useSelector","PropTypes","post","LOAD_POST_REQUEST","Helmet","Post","id","singlePost","state","User","nickname","content","name","property","Images","src","getInitialProps","context","store","dispatch","type","data","query","parseInt","propTypes","number","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,IAAeC,iBAAf,QAAwC,kBAAxC;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAW;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAiBP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACN,IAAhB,CAAlC;AACA,SACI,4BACI,MAAC,MAAD;AACI,IAAA,KAAK,EAAG,GAAEK,UAAU,CAACE,IAAX,CAAgBC,QAAS,MADvC;AAEI,IAAA,WAAW,EAAEH,UAAU,CAACI,OAF5B;AAGI,IAAA,IAAI,EAAE,CAAC;AACHC,MAAAA,IAAI,EAAC,aADF;AACiBD,MAAAA,OAAO,EAAEJ,UAAU,CAACI;AADrC,KAAD,EAEJ;AACEE,MAAAA,QAAQ,EAAC,UADX;AACuBF,MAAAA,OAAO,EAAG,GAAEJ,UAAU,CAACE,IAAX,CAAgBC,QAAS;AAD5D,KAFI,EAIJ;AACEG,MAAAA,QAAQ,EAAC,gBADX;AAC6BF,MAAAA,OAAO,EAAG,GAAEJ,UAAU,CAACE,IAAX,CAAgBC,QAAS;AADlE,KAJI,EAMJ;AACEG,MAAAA,QAAQ,EAAC,UADX;AACuBF,MAAAA,OAAO,EAAEJ,UAAU,CAACO,MAAX,CAAkB,CAAlB,KAAyB,yBAAwBZ,IAAI,CAACY,MAAL,CAAY,CAAZ,EAAeC,GAAI;AADpG,KANI,EAQJ;AACEF,MAAAA,QAAQ,EAAC,QADX;AACqBF,MAAAA,OAAO,EAAG,8BAA6BL,EAAG;AAD/D,KARI;AAHV,KAgBI,mBAAOC,UAAU,CAACI,OAAlB,CAhBJ,EAiBI,mBAAOJ,UAAU,CAACE,IAAX,CAAgBC,QAAvB,CAjBJ,EAkBI,mBACMH,UAAU,CAACO,MAAX,CAAkB,CAAlB,KAAwB;AAAK,IAAA,GAAG,EAAG,yBAAwBP,UAAU,CAACO,MAAX,CAAkB,CAAlB,EAAqBC,GAAI;AAA5D,IAD9B,CAlBJ,CADJ,CADJ;AA0BH,CA5BD;;AA6BAV,IAAI,CAACW,eAAL,GAAuB,MAAOC,OAAP,IAAiB;AACpCA,EAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAEjB,iBADa;AAEnBkB,IAAAA,IAAI,EAAEJ,OAAO,CAACK,KAAR,CAAchB;AAFD,GAAvB;AAIA,SAAO;AAAEA,IAAAA,EAAE,EAAEiB,QAAQ,CAACN,OAAO,CAACK,KAAR,CAAchB,EAAf,EAAmB,EAAnB;AAAd,GAAP;AACH,CAND;;AAOAD,IAAI,CAACmB,SAAL,GAAiB;AACblB,EAAAA,EAAE,EAAEL,SAAS,CAACwB,MAAV,CAAiBC;AADR,CAAjB;AAGA,eAAerB,IAAf","sourcesContent":["import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport post, { LOAD_POST_REQUEST } from '../reducers/post';\r\nimport Helmet from 'react-helmet';\r\nconst Post = ({ id }) =>{\r\n    const { singlePost } = useSelector(state => state.post);\r\n    return (\r\n        <>\r\n            <Helmet\r\n                title={`${singlePost.User.nickname}님의 글`}\r\n                description={singlePost.content}\r\n                meta={[{\r\n                    name:'description', content: singlePost.content,\r\n                },{\r\n                    property:'og:title', content: `${singlePost.User.nickname}님의 게시글`,\r\n                },{\r\n                    property:'og:description', content: `${singlePost.User.nickname}님의 게시글`,\r\n                },{\r\n                    property:'og:image', content: singlePost.Images[0] && `http://localhost:3065/${post.Images[0].src}`,\r\n                },{\r\n                    property:'og:url', content: `http://localhost:3060/post/${id}`,\r\n                }\r\n                ]}\r\n            >\r\n                <div>{ singlePost.content}</div>\r\n                <div>{ singlePost.User.nickname}</div>\r\n                <div>\r\n                    { singlePost.Images[0] && <img src={`http://localhost:3065/${singlePost.Images[0].src}`} />}\r\n                </div>\r\n            </Helmet>\r\n        </>\r\n    )\r\n}\r\nPost.getInitialProps = async (context)=>{\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.query.id,\r\n    });\r\n    return { id: parseInt(context.query.id, 10)};\r\n}\r\nPost.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n};\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}