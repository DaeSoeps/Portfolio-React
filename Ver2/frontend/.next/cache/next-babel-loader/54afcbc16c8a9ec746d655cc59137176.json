{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: false,\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중 \n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false\n}; //메인 포스트를 로딩\n\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE'; //해시태그 검색했을때 결과 로딩\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE'; //사용자가 어떤 게시글을 썼는지 로딩\n\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'; //이미지 업로드\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; //이미지 업로드 취소(동기)\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'; //포스트 추가\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; //포스트에 LIKE 누르는 액션\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE'; //포스트에 LIKE 취소하는 액션\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE'; //게시글에 댓글 남기기\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //게시글 댓글 불러오기\n\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENT_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENT_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENT_FAILURE'; //리트윗 하는 액션\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE'; //포스트 제거하는 액션\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nconst ADD_DUMMY = 'ADD_DUMMY'; // ????\n\nconst addPost = {\n  type: ADD_POST_REQUEST\n};\nconst addDummy = {\n  type: ADD_DUMMY,\n  data: {\n    content: 'Hello',\n    UserId: 1,\n    User: {\n      nickname: '제로초'\n    }\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPLOAD_IMAGES_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: [...state.imagePaths, ...action.data] // 이미지 미리보기 할 수 있는 경로들\n\n        });\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    // 이미지 제거는 동기적으로 처리해도 되서 3분류안함\n\n    case REMOVE_IMAGE:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: state.imagePaths.filter((v, i) => i !== action.index)\n        });\n      }\n    // 게시글 작성\n\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [action.data, ...state.mainPosts],\n          postAdded: true,\n          imagePaths: []\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n    // 댓글 달기\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        // 어떤게시글에 댓글을 추가할지\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Comments = [...post.Comments, action.data.comment];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    case LOAD_COMMENTS_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Comments = action.data.comments;\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments\n        });\n        return _objectSpread({}, state, {\n          mainPosts\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: []\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: action.data\n        });\n      }\n\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_SUCCESS:\n      {\n        // 불변성때문에, 바뀔 객체만 새로 만들어줘야함\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Likers = [{\n          id: action.data.UserId\n        }, ...post.Likers];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Likers\n        }); //불변성 유지 후 다시 구성하는 부분\n\n        return _objectSpread({}, state, {\n          mainPosts\n        });\n      }\n\n    case LIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Likers = post.Likers.filter(v => v.id !== action.data.userId); // 좋아요 목록중 내 아이디 제거 \n\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts\n        });\n      }\n\n    case UNLIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/reducers/post.js"],"names":["initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_DUMMY","addPost","type","addDummy","data","content","UserId","User","nickname","reducer","state","action","filter","v","i","index","error","postIndex","findIndex","id","postId","post","Comments","comment","comments","Likers","userId"],"mappings":"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","sourcesContent":["export const initialState = {\r\n    mainPosts: [], // 화면에 보일 포스트들\r\n    imagePaths : [], // 미리보기 이미지 경로\r\n    addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n    isAddingPost : false, // 포스트 업로드 중 \r\n    postAdded: false, // 포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n};\r\n\r\n\r\n\r\n//메인 포스트를 로딩\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n//해시태그 검색했을때 결과 로딩\r\nexport const LOAD_HASHTAG_POSTS_REQUEST ='LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS ='LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE ='LOAD_HASHTAG_POSTS_FAILURE';\r\n //사용자가 어떤 게시글을 썼는지 로딩\r\nexport const LOAD_USER_POSTS_REQUEST ='LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS ='LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE ='LOAD_USER_POSTS_FAILURE';\r\n//이미지 업로드\r\nexport const UPLOAD_IMAGES_REQUEST ='UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS ='UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE ='UPLOAD_IMAGES_FAILURE';\r\n//이미지 업로드 취소(동기)\r\nexport const REMOVE_IMAGE ='REMOVE_IMAGE';\r\n\r\n//포스트 추가\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n//포스트에 LIKE 누르는 액션\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n//포스트에 LIKE 취소하는 액션\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n//게시글에 댓글 남기기\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n//게시글 댓글 불러오기\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n//리트윗 하는 액션\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n//포스트 제거하는 액션\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nconst ADD_DUMMY = 'ADD_DUMMY' // ????\r\nconst addPost = {\r\n    type : ADD_POST_REQUEST,\r\n};\r\nconst addDummy = {\r\n    type: ADD_DUMMY,\r\n    data: {\r\n        content: 'Hello',\r\n        UserId:1,\r\n        User:{\r\n            nickname:'제로초',\r\n        },\r\n    },\r\n};\r\n\r\nconst reducer = ( state = initialState, action) => {\r\n    switch (action.type){\r\n        case UPLOAD_IMAGES_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                imagePaths:[...state.imagePaths, ...action.data], // 이미지 미리보기 할 수 있는 경로들\r\n            }\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        // 이미지 제거는 동기적으로 처리해도 되서 3분류안함\r\n        case REMOVE_IMAGE:{\r\n            return{\r\n                ...state,\r\n                imagePaths: state.imagePaths.filter((v,i) => i !== action.index),\r\n            }\r\n        }\r\n        // 게시글 작성\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: true,\r\n                addPostErrorReason: '',\r\n                postAdded: false,\r\n            }\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                mainPosts: [action.data, ...state.mainPosts],\r\n                postAdded: true,\r\n                imagePaths: [],\r\n            }\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostErrorReason: action.error,\r\n            }\r\n        }\r\n        // 댓글 달기\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: true,\r\n                addCommentErrorReason: '',\r\n                commentAdded: false,\r\n            }\r\n        }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            // 어떤게시글에 댓글을 추가할지\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = [...post.Comments, action.data.comment];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n              ...state,\r\n              isAddingComment: false,\r\n              mainPosts,\r\n              commentAdded: true,\r\n            };\r\n        }\r\n        case ADD_COMMENT_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                addCommentErrorReason: action.error,\r\n            }\r\n        }\r\n        case LOAD_COMMENTS_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = action.data.comments;\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n              ...state,\r\n              mainPosts,\r\n            };\r\n        }\r\n        case LOAD_MAIN_POSTS_REQUEST: \r\n        case LOAD_HASHTAG_POSTS_REQUEST: \r\n        case LOAD_USER_POSTS_REQUEST: {    \r\n            return {\r\n                ...state,\r\n                mainPosts: [],\r\n            }\r\n        }\r\n        case LOAD_MAIN_POSTS_SUCCESS: \r\n        case LOAD_HASHTAG_POSTS_SUCCESS: \r\n        case LOAD_USER_POSTS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                mainPosts: action.data,\r\n            }\r\n        }\r\n        case LOAD_MAIN_POSTS_FAILURE: \r\n        case LOAD_HASHTAG_POSTS_FAILURE: \r\n        case LOAD_USER_POSTS_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case LIKE_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case LIKE_POST_SUCCESS: {\r\n            // 불변성때문에, 바뀔 객체만 새로 만들어줘야함\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n            const post = state.mainPosts[postIndex];\r\n            const Likers = [{ id : action.data.UserId }, ...post.Likers];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = {...post, Likers}; //불변성 유지 후 다시 구성하는 부분\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n            }\r\n        }\r\n        case LIKE_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case UNLIKE_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case UNLIKE_POST_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n            const post = state.mainPosts[postIndex];\r\n            const Likers = post.Likers.filter(v=> v.id !== action.data.userId); // 좋아요 목록중 내 아이디 제거 \r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = {...post, Likers};\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n            }\r\n        }\r\n        case UNLIKE_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        default:{\r\n            return{\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}