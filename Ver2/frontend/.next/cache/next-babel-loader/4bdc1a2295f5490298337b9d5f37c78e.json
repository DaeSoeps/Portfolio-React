{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE, FOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS, UNFOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_FAILURE } from '../reducers/user'; // 로그인 부분 -------------------------------------\n\nfunction logInAPI(loginData) {\n  // (3) 서버에 요청을 보냄\n  // loginData: userid, password\n  return axios.post('/user/login', loginData, {\n    withCredentials: true // (프론트)쿠키를 주고받을 수 있음, 서버쪽은 cors 로 설정\n\n  });\n}\n\nfunction* logIn(action) {\n  // 사가 패턴 3. 어떤 동작할지 결정\n  try {\n    const result = yield call(logInAPI, action.data); // (2)loginAPI 로 요청을 보냄\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // 사가 패턴 2. takeEvery, Latest 여부 결정\n  //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\n  //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\n  // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n} // 로그인 부분 -------------------------------------\n// 회원 가입 부분 -------------------------------------\n\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n} // 회원 가입 부분 -------------------------------------\n// 로그 아웃 부분 -------------------------------------\n\n\nfunction logOutAPI() {\n  // 로그아웃은 쿠키가 있으므로 데이터 받을게 없음, 대신 쿠키를 도메인이 다른 서버로 보내주려면 크리덴셜스 추가\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n} // 로그 아웃 부분 -------------------------------------\n// 사용자정보 불러오기 부분 -------------------------------------\n\n\nfunction loadUserAPI() {\n  // 세션쿠키 서버로 보냄 > 유효한 쿠키면 데이터 전달함\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n} // 사용자정보 불러오기 부분 끝-------------------------------------\n\n\nfunction followAPI(userId) {\n  return axios.post(`/user/${userId}/follow`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data);\n    yield put({\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n} //\n\n\nfunction unfollowAPI(userId) {\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n} //\n\n\nfunction loadFollowersAPI(userId) {\n  return axios.get(`/user/${userId}/followwers`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowers(action) {\n  try {\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n} //\n\n\nfunction loadFollowingsAPI(userId) {\n  return axios.get(`/user/${userId}/followwers`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowings(action) {\n  try {\n    const result = yield call(loadFollowingsAPI, action.data);\n    yield put({\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowings() {\n  yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n} //\n\n\nexport default function* userSaga() {\n  // 사가 패턴 1. 함수 등록\n  // fork, call : 함수 호출, fork는 비동기 호출\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow), fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchRemoveFollower)]);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","FOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_FAILURE","logInAPI","loginData","post","withCredentials","logIn","action","result","data","type","e","console","error","watchLogIn","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","get","loadUser","watchLoadUser","followAPI","userId","follow","watchFollow","unfollowAPI","delete","unfollow","watchUnfollow","loadFollowersAPI","loadFollowers","watchLoadFollowers","loadFollowingsAPI","loadFollowings","watchLoadFollowings","userSaga","watchRemoveFollower"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n         SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, \r\n         LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n         LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE,\r\n          FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE, FOLLOW_USER_REQUEST,\r\n           UNFOLLOW_USER_SUCCESS, UNFOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST,\r\n           LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_FAILURE,\r\n           LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_FAILURE } from '../reducers/user';\r\n\r\n// 로그인 부분 -------------------------------------\r\nfunction logInAPI(loginData){\r\n// (3) 서버에 요청을 보냄\r\n    // loginData: userid, password\r\n    return axios.post('/user/login', loginData , {\r\n        withCredentials: true, // (프론트)쿠키를 주고받을 수 있음, 서버쪽은 cors 로 설정\r\n    });\r\n}\r\nfunction* logIn(action){ \r\n    // 사가 패턴 3. 어떤 동작할지 결정\r\n    try{\r\n        const result =  yield call(logInAPI, action.data); // (2)loginAPI 로 요청을 보냄\r\n        yield put({ \r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogIn(){\r\n    // 사가 패턴 2. takeEvery, Latest 여부 결정\r\n    //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\r\n    //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\r\n    // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\r\n    yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n// 로그인 부분 -------------------------------------\r\n// 회원 가입 부분 -------------------------------------\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/user/', signUpData);\r\n}\r\nfunction* signUp(action){ \r\n    try{\r\n        yield call(signUpAPI , action.data); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:SIGN_UP_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n// 회원 가입 부분 -------------------------------------\r\n// 로그 아웃 부분 -------------------------------------\r\nfunction logOutAPI(){\r\n    // 로그아웃은 쿠키가 있으므로 데이터 받을게 없음, 대신 쿠키를 도메인이 다른 서버로 보내주려면 크리덴셜스 추가\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\nfunction* logOut(){ \r\n    try{\r\n        yield call(logOutAPI); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:LOG_OUT_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_OUT_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut)\r\n}\r\n// 로그 아웃 부분 -------------------------------------\r\n// 사용자정보 불러오기 부분 -------------------------------------\r\nfunction loadUserAPI(){\r\n    // 세션쿠키 서버로 보냄 > 유효한 쿠키면 데이터 전달함\r\n    return axios.get('/user/', {\r\n        withCredentials : true,\r\n    });\r\n}\r\nfunction* loadUser(){ \r\n    try{\r\n        const result = yield call(loadUserAPI); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:LOAD_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser)\r\n}\r\n// 사용자정보 불러오기 부분 끝-------------------------------------\r\nfunction followAPI(userId){\r\n    return axios.post(`/user/${userId}/follow`, {} , {\r\n        withCredentials : true,\r\n    });\r\n}\r\nfunction* follow(action){ \r\n    try{\r\n        const result = yield call(followAPI, action.data); \r\n        yield put({ \r\n            type:FOLLOW_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:FOLLOW_USER_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchFollow(){\r\n    yield takeEvery(FOLLOW_USER_REQUEST, follow)\r\n}\r\n//\r\nfunction unfollowAPI(userId){\r\n    return axios.delete(`/user/${userId}/follow`, {\r\n        withCredentials : true,\r\n    });\r\n}\r\nfunction* unfollow(action){ \r\n    try{\r\n        const result = yield call(unfollowAPI, action.data); \r\n        yield put({ \r\n            type:UNFOLLOW_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:UNFOLLOW_USER_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchUnfollow(){\r\n    yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow)\r\n}\r\n//\r\nfunction loadFollowersAPI(userId){\r\n    return axios.get(`/user/${userId}/followwers`, {\r\n        withCredentials : true,\r\n    });\r\n}\r\nfunction*loadFollowers(action){ \r\n    try{\r\n        const result = yield call(loadFollowersAPI, action.data); \r\n        yield put({ \r\n            type:LOAD_FOLLOWERS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOAD_FOLLOWERS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadFollowers(){\r\n    yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers)\r\n}\r\n//\r\nfunction loadFollowingsAPI(userId){\r\n    return axios.get(`/user/${userId}/followwers`, {\r\n        withCredentials : true,\r\n    });\r\n}\r\nfunction*loadFollowings(action){ \r\n    try{\r\n        const result = yield call(loadFollowingsAPI, action.data); \r\n        yield put({ \r\n            type:LOAD_FOLLOWINGS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOAD_FOLLOWINGS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadFollowings(){\r\n    yield takeEvery(LOAD_FOLLOWINGS_REQUEST, loadFollowings)\r\n}\r\n//\r\nexport default function* userSaga() {\r\n    // 사가 패턴 1. 함수 등록\r\n    // fork, call : 함수 호출, fork는 비동기 호출\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLoadFollowers),\r\n        fork(watchLoadFollowings),\r\n        fork(watchRemoveFollower),\r\n    ])\r\n};\r\n"]},"metadata":{},"sourceType":"module"}