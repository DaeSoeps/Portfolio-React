{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Input, List, Form, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\nimport Link from 'next/link';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispath = useDispatch();\n  var onToggleComment = useCallback(function () {\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      // 댓글창이 닫혀있는 경우\n      dispath({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispath({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\n\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (post.Likers && post.Likers.find(function (v) {\n      return v.id === me.id;\n    })) {\n      // Likers : 좋아요 누른 사람들 배열로 들어있음\n      dispath({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispath({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id]);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))) // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\n    ,\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: \"/hashtag/\".concat(v.slice),\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    })) // 게시물의 해쉬태그에 링크 걸어줘야함 (a tag로 하면 리액트 오류남, next의 Link tag 사용)\n\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Input","List","Form","Comment","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","PostImages","Link","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispath","onToggleComment","prev","type","data","id","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","Likers","find","v","createdAt","Images","pathname","query","User","nickname","split","map","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img","isRequired"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\r\nimport { Card , Icon, Button, Avatar, Input, List, Form, Comment} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST } from '../reducers/post';\r\nimport PostImages from './PostImages';\r\nimport Link from 'next/link';\r\nconst PostCard = ( { post}) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me }= useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment }= useSelector(state => state.post);\r\n  const dispath = useDispatch();\r\n  const onToggleComment = useCallback(() => {\r\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\r\n    setCommentFormOpened(prev =>!prev);\r\n    if(!commentFormOpened){ // 댓글창이 닫혀있는 경우\r\n      dispath({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, []);\r\n  const onSubmitComment = useCallback((e) =>{\r\n    e.preventDefault();\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    dispath({\r\n      type:ADD_COMMENT_REQUEST,\r\n      data:{\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\r\n  const onChangeCommentText = useCallback((e) =>{\r\n    setCommentText(e.target.value);\r\n  },[]);\r\n  useEffect(()=>{\r\n    setCommentText('');\r\n  },[commentAdded ===true]);\r\n\r\n  const onToggleLike = useCallback( () =>{\r\n    if(!me){\r\n      return alert('로그인이 필요합니다!');\r\n    }\r\n    if(post.Likers && post.Likers.find(v => v.id === me.id)){  // Likers : 좋아요 누른 사람들 배열로 들어있음\r\n      dispath({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }else{ // 좋아요 안 누른 상태\r\n      dispath({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, [me && me.id, post && post.id])\r\n  return (\r\n    <div>\r\n    <Card\r\n    key={+post.createdAt}\r\n    cover={post.Images[0] && <PostImages images={post.Images}></PostImages>}\r\n    actions={[\r\n      <Icon type=\"retweet\" key=\"retweet\"></Icon>,\r\n      <Icon type=\"heart\" key=\"heart\" onClick={onToggleLike}></Icon>,\r\n      <Icon type=\"message\" key=\"message\" onClick={onToggleComment}></Icon>,\r\n      <Icon type=\"ellipsis\" key=\"ellipsis\"></Icon>\r\n    ]}\r\n    extra={<Button>팔로우</Button>}\r\n  >\r\n    <Card.Meta\r\n      avatar={<Link href={{ \r\n        pathname: '/user', \r\n        query: { id: post.User.id } }} as={`/user/${post.User.id}`}> \r\n        <a><Avatar>{post.User.nickname[0]}</Avatar></a> \r\n        </Link>\r\n      } // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\r\n      title={post.User.nickname}\r\n      description={(\r\n      <div>\r\n        {post.content.split(/(#[^\\s]+)/g).map((v)=>{\r\n          if(v.match(/#[^\\s]+/)){\r\n            return (\r\n              <Link\r\n              href={{ pathname: '/hashtag', query: { tag: v.slice(1) }}} as={`/hashtag/${v.slice}`}\r\n              key={v}\r\n            >\r\n              <a>{v}</a>\r\n            </Link>\r\n            );\r\n          }\r\n          return v;\r\n      })}\r\n      </div>\r\n      )} // 게시물의 해쉬태그에 링크 걸어줘야함 (a tag로 하면 리액트 오류남, next의 Link tag 사용)\r\n    ></Card.Meta>\r\n  </Card>\r\n  {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(<Link href={{ \r\n                    pathname: '/user', \r\n                    query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                  )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPostCard.propTypes = {\r\n  post : PropTypes.shape({\r\n   User : PropTypes.object,\r\n   content : PropTypes.string,\r\n   img : PropTypes.string,\r\n   createdAt : PropTypes.object,\r\n  }).isRequired,\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}