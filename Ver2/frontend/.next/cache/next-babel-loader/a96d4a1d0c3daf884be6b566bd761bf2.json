{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from 'immer';\nexport const initialState = {\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실패 사유\n  isSignedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  singUpErrorReason: '',\n  // 회원가입 실패 사유 \n  me: null,\n  // 내정보\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null,\n  // 남의 정보\n  isEditingNickname: false,\n  // 이름 변경 중\n  editNicknameErrorReason: '',\n  // 이름 변경 실패 사유\n  hasMoreFollower: false,\n  // 프로필 - 팔로워 불러오다 더이상 없을 시 더보기 버튼 제거\n  hasMoreFollowing: false\n}; // 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\n//회원가입\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; //로그인\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; //사용자 정보 불러오기\n\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE'; //로그아웃\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; //팔로워들 목록\n\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE'; //팔로잉 목록\n\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE'; //다른 사람을 팔로우\n\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE'; //다른 사람을 언팔로우\n\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE'; //팔로우한 사람을 제거\n\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE'; //닉네임 수정\n\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE'; //리듀서의 단점때문에 만들어야 됨 - 다른 리듀서의 정보를 수정할 수 없음\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'; //\n\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOG_IN_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isLoggingIn: true,\n            logInErrorReason: ''\n          });\n        }\n\n      case LOG_IN_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isLoggingIn: false,\n            me: action.data,\n            isLoading: false\n          });\n        }\n\n      case LOG_IN_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isLoggingIn: false,\n            logInErrorReason: action.reason,\n            me: null\n          });\n        }\n\n      case LOG_OUT_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isLoggingOut: true // 로그아웃버튼 로딩\n\n          });\n        }\n\n      case LOG_OUT_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isLoggingOut: false,\n            me: null\n          });\n        }\n\n      case SIGN_UP_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isSigningUp: true,\n            isSignedUp: false,\n            singUpErrorReason: ''\n          });\n        }\n\n      case SIGN_UP_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            signUpData: action.data,\n            isSigningUp: false,\n            isSignedUp: true\n          });\n        }\n\n      case SIGN_UP_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            signUpData: action.data,\n            isSigningUp: false,\n            singUpErrorReason: action.error\n          });\n        }\n\n      case LOAD_USER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LOAD_USER_SUCCESS:\n        {\n          if (action.me) {\n            return _objectSpread({}, state, {\n              me: action.data\n            });\n          }\n        }\n\n      case LOAD_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case FOLLOW_USER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case FOLLOW_USER_SUCCESS:\n        {\n          draft.me.Followings.unshift({\n            id: action.data\n          });\n          break; // return{\n          //     ...state,\n          //     me: {\n          //         ...state.me,\n          //         Followings:[{ id: action.data }, ...state.me.Followings],//아이디 목록에 팔로윙한 사람 추가(나)\n          //     }\n          // };\n        }\n\n      case FOLLOW_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNFOLLOW_USER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNFOLLOW_USER_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Followings: state.me.Followings.filter(v => v.id !== action.data) //아이디 목록에 팔로윙한 사람 추가(나)\n\n            }),\n            followingList: state.followingList.filter(v => v.id !== action.data)\n          });\n        }\n\n      case UNFOLLOW_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_POST_OF_ME:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Posts: state.me.Posts.filter(v => v.id !== action.data)\n            })\n          });\n        }\n\n      case LOAD_FOLLOWERS_REQUEST:\n        {\n          // action.offset 은 더보기 버튼 처음 클릭 시 생김(더보기 버튼 보여줌)\n          draft.followerList = !action.offset ? [] : draft.followerList;\n          draft.hasMoreFollower = action.offset ? draft.hasMoreFollower : true;\n          break;\n        }\n\n      case LOAD_FOLLOWERS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            followerList: state.followerList.concat(action.data),\n            // 기존데이터에 계속 리스트를 추가시킴(더보기 기능)\n            hasMoreFollower: action.data.length === 3 // 가져온 데이터가 3개면 더보기 버튼을 계속 보여줌(1,2개면 없어짐)\n\n          });\n        }\n\n      case LOAD_FOLLOWERS_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LOAD_FOLLOWINGS_REQUEST:\n        {\n          draft.followingList = !action.offset ? [] : draft.followingList;\n          draft.hasMoreFollowing = action.offset ? draft.hasMoreFollowing : true;\n          break;\n        }\n\n      case LOAD_FOLLOWINGS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            followingList: state.followingList.concat(action.data),\n            hasMoreFollowing: action.data.length === 3\n          });\n        }\n\n      case LOAD_FOLLOWINGS_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_FOLLOWER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_FOLLOWER_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Followers: state.me.Followers.filter(v => v.id !== action.data) //아이디 목록에 팔로윙한 사람 추가(나)\n\n            }),\n            followerList: state.followerList.filter(v => v.id !== action.data)\n          });\n        }\n\n      case REMOVE_FOLLOWER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case EDIT_NICKNAME_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: true,\n            editNicknameErrorReason: ''\n          });\n        }\n\n      case EDIT_NICKNAME_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: false,\n            me: _objectSpread({}, state.me, {\n              nickname: action.data\n            })\n          });\n        }\n\n      case EDIT_NICKNAME_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: false,\n            editNicknameErrorReason: action.error\n          });\n        }\n\n      case ADD_POST_TO_ME:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Posts: [{\n                id: action.data\n              }, ...state.me.Posts]\n            })\n          });\n        }\n\n      default:\n        {\n          return _objectSpread({}, state);\n        }\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}