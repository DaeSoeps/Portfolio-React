{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Helmet 으로 html 검색엔진의 규격을 맞췄지만, 제대로 사용하려면 SSR 적용해줘야함\n// 1. 처음 _documnet 랜더링 > _app 랜더링 + 그안의 컴포넌트 랜더링\nimport React from 'react';\nimport Document, { Main, NextScript } from 'next/document';\nimport { Helmet } from 'react-helmet';\n\nclass MyDocument extends Document {\n  static getInitialProps(context) {\n    const page = context.renderPage(App => props => __jsx(App, props)); // 이걸 해줘야 검색엔진에서 다큐맨터리는 랜더링 되는데 안에있는 _app.js 가 랜더링 됨\n\n    return _objectSpread({}, page, {\n      helmet: Helmet.renderStatic()\n    }); // SSR\n  }\n\n  render() {\n    const _this$props$helmet = this.props.helmet,\n          {\n      htmlAttributes,\n      bodyAttributes\n    } = _this$props$helmet,\n          helmet = _objectWithoutProperties(_this$props$helmet, [\"htmlAttributes\", \"bodyAttributes\"]); // ...helmet 안에 태그들이 들어있는데, 반복문으로 리엑트 컴포넌트로 만들어서 head 안에 붙여줌\n\n\n    const htmlAttrs = htmlAttributes.toComponent();\n    const bodyAttrs = bodyAttributes.toComponent();\n    return __jsx(\"html\", htmlAttrs, __jsx(\"head\", null, Object.values(helmet).map(el => el.toComponent())), __jsx(\"body\", bodyAttrs, __jsx(Main, null), __jsx(NextScript, null)));\n  }\n\n}\n\nMyDocument.propTypes = {\n  helmet: PropTypes.object.isRequired\n};\nexport default MyDocument;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/_document.js"],"names":["React","Document","Main","NextScript","Helmet","MyDocument","getInitialProps","context","page","renderPage","App","props","helmet","renderStatic","render","htmlAttributes","bodyAttributes","htmlAttrs","toComponent","bodyAttrs","Object","values","map","el","propTypes","PropTypes","object","isRequired"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAkBC,IAAlB,EAAwBC,UAAxB,QAAyC,eAAzC;AACA,SAASC,MAAT,QAAuB,cAAvB;;AAEA,MAAMC,UAAN,SAAyBJ,QAAzB,CAAkC;AAC9B,SAAOK,eAAP,CAAuBC,OAAvB,EAA+B;AAC3B,UAAMC,IAAI,GAAGD,OAAO,CAACE,UAAR,CAAoBC,GAAD,IAASC,KAAD,IAAU,MAAC,GAAD,EAASA,KAAT,CAArC,CAAb,CAD2B,CAC+C;;AAC1E,6BAAWH,IAAX;AAAiBI,MAAAA,MAAM,EAAER,MAAM,CAACS,YAAP;AAAzB,OAF2B,CAEsB;AACpD;;AACDC,EAAAA,MAAM,GAAE;AACJ,+BAAsD,KAAKH,KAAL,CAAWC,MAAjE;AAAA,UAAM;AAAEG,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,KAAN;AAAA,UAA2CJ,MAA3C,sFADI,CACqE;;;AACzE,UAAMK,SAAS,GAAGF,cAAc,CAACG,WAAf,EAAlB;AACA,UAAMC,SAAS,GAAGH,cAAc,CAACE,WAAf,EAAlB;AACA,WACI,cAAUD,SAAV,EACI,oBACKG,MAAM,CAACC,MAAP,CAAcT,MAAd,EAAsBU,GAAtB,CAA0BC,EAAE,IAAIA,EAAE,CAACL,WAAH,EAAhC,CADL,CADJ,EAII,cAAUC,SAAV,EACI,MAAC,IAAD,OADJ,EAEI,MAAC,UAAD,OAFJ,CAJJ,CADJ;AAWH;;AApB6B;;AAsBlCd,UAAU,CAACmB,SAAX,GAAsB;AAClBZ,EAAAA,MAAM,EAAEa,SAAS,CAACC,MAAV,CAAiBC;AADP,CAAtB;AAIA,eAAetB,UAAf","sourcesContent":["// Helmet 으로 html 검색엔진의 규격을 맞췄지만, 제대로 사용하려면 SSR 적용해줘야함\r\n// 1. 처음 _documnet 랜더링 > _app 랜더링 + 그안의 컴포넌트 랜더링\r\nimport React from 'react';\r\nimport Document, {Main, NextScript} from 'next/document';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nclass MyDocument extends Document {\r\n    static getInitialProps(context){\r\n        const page = context.renderPage((App)=> (props)=> <App {...props}></App>) // 이걸 해줘야 검색엔진에서 다큐맨터리는 랜더링 되는데 안에있는 _app.js 가 랜더링 됨\r\n        return{ ...page, helmet: Helmet.renderStatic() } // SSR\r\n    }\r\n    render(){\r\n        const { htmlAttributes, bodyAttributes, ...helmet } = this.props.helmet; // ...helmet 안에 태그들이 들어있는데, 반복문으로 리엑트 컴포넌트로 만들어서 head 안에 붙여줌\r\n        const htmlAttrs = htmlAttributes.toComponent();\r\n        const bodyAttrs = bodyAttributes.toComponent();\r\n        return(\r\n            <html {...htmlAttrs}>\r\n                <head>\r\n                    {Object.values(helmet).map(el => el.toComponent())} \r\n                </head>\r\n                <body {...bodyAttrs}>\r\n                    <Main></Main>\r\n                    <NextScript></NextScript>\r\n                </body>\r\n            </html>\r\n        )\r\n    }\r\n}\r\nMyDocument.propTypes= {\r\n    helmet: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default MyDocument;"]},"metadata":{},"sourceType":"module"}