{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../components/PostCard';\n\nconst Hashtag = ({\n  tag\n}) => {\n  console.log(\"해쉬태그 페이지 tag:\", tag);\n  const dispatch = useDispatch();\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  const onScroll = useCallback(() => {\n    //window.scrollY:현재위치, clientHeight: 스크롤바의 높이(현재화면), scrollHeight: 맨위에서 맨아래까지의 높이\n    // console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        // 더 불러올 게시글이 있을때 요청(스크롤 할때마다 요청하는 것을 방지)\n        dispatch({\n          type: LOAD_HASHTAG_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length - 1].id,\n          // 마지막게시글 기준으로 다음게시글 불러옴(게시글 보고있는데 새 게시글이 추가되면, 밀려서 불러오게되서 마지막 게시글을 기준으로 계산해서 불러오기) \n          data: tag\n        });\n      }\n    }\n  }, [mainPosts.length, hasMorePost]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      // 이벤트 사용하고 나서 꼭 정리해주자\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, mainPosts ? mainPosts.map(c => __jsx(PostCard, {\n    key: +c.createdAt,\n    post: c\n  })) : null) // 강의에서는(6.3 18:49) ? 처리 안해줘도 됨, 나는 map undefined 에러, 왜 ?\n  ;\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired\n};\n\nHashtag.getInitialProps = async context => {\n  const tag = context.query.tag;\n  console.log('hashtag props on hastag.js', context.query.tag, context); // 서버에서 라우팅받은 정보가 넘어오는지 확인, _app.js에서 또 추가해줌\n\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: tag\n  });\n  return {\n    tag\n  };\n};\n\nexport default Hashtag;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/hashtag.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","LOAD_HASHTAG_POSTS_REQUEST","PostCard","Hashtag","tag","console","log","dispatch","mainPosts","hasMorePost","state","post","onScroll","useCallback","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","id","data","addEventListener","removeEventListener","map","c","createdAt","propTypes","string","isRequired","getInitialProps","context","query","store"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,0BAAT,QAA2C,kBAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AACA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,GAA7B;AACA,QAAMG,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA9C;AACA,QAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAK;AAC9B;AACA;AACA,QAAGC,MAAM,CAACC,OAAP,GAAkBC,QAAQ,CAACC,eAAT,CAAyBC,YAA3C,GAA0DF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAuC,GAApG,EAAwG;AACtG,UAAGV,WAAH,EAAe;AAAE;AACfF,QAAAA,QAAQ,CAAC;AACPa,UAAAA,IAAI,EAAEnB,0BADC;AAEPoB,UAAAA,MAAM,EAAEb,SAAS,CAACA,SAAS,CAACc,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAFhC;AAEoC;AAC3CC,UAAAA,IAAI,EAAEpB;AAHC,SAAD,CAAR;AAKD;AACF;AACJ,GAZ2B,EAYzB,CAACI,SAAS,CAACc,MAAX,EAAmBb,WAAnB,CAZyB,CAA5B;AAaAZ,EAAAA,SAAS,CAAE,MAAI;AACXiB,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCb,QAAlC;AACA,WAAO,MAAK;AAAE;AACZE,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCd,QAArC;AACD,KAFD;AAGH,GALQ,EAKN,CAACJ,SAAS,CAACc,MAAX,CALM,CAAT;AAMA,SACI,mBACKd,SAAS,GAAGA,SAAS,CAACmB,GAAV,CAAcC,CAAC,IACxB,MAAC,QAAD;AAAU,IAAA,GAAG,EAAE,CAACA,CAAC,CAACC,SAAlB;AAA6B,IAAA,IAAI,EAAED;AAAnC,IADS,CAAH,GAEN,IAHR,CADJ,CAKU;AALV;AAOH,CA9BD;;AA+BAzB,OAAO,CAAC2B,SAAR,GAAoB;AAChB1B,EAAAA,GAAG,EAAEN,SAAS,CAACiC,MAAV,CAAiBC;AADN,CAApB;;AAIA7B,OAAO,CAAC8B,eAAR,GAA0B,MAAOC,OAAP,IAAmB;AACzC,QAAM9B,GAAG,GAAG8B,OAAO,CAACC,KAAR,CAAc/B,GAA1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA2C4B,OAAO,CAACC,KAAR,CAAc/B,GAAzD,EAA8D8B,OAA9D,EAFyC,CAE+B;;AACxEA,EAAAA,OAAO,CAACE,KAAR,CAAc7B,QAAd,CAAuB;AACnBa,IAAAA,IAAI,EAAEnB,0BADa;AAEnBuB,IAAAA,IAAI,EAAEpB;AAFa,GAAvB;AAIA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH,CARD;;AASA,eAAeD,OAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\nimport PostCard from '../components/PostCard';\r\nconst Hashtag = ({tag}) => {\r\n    console.log(\"해쉬태그 페이지 tag:\", tag);\r\n    const dispatch = useDispatch();\r\n    const { mainPosts, hasMorePost } = useSelector(state => state.post);\r\n    const onScroll = useCallback(() =>{\r\n        //window.scrollY:현재위치, clientHeight: 스크롤바의 높이(현재화면), scrollHeight: 맨위에서 맨아래까지의 높이\r\n        // console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\r\n        if(window.scrollY +  document.documentElement.clientHeight > document.documentElement.scrollHeight -300){\r\n          if(hasMorePost){ // 더 불러올 게시글이 있을때 요청(스크롤 할때마다 요청하는 것을 방지)\r\n            dispatch({\r\n              type: LOAD_HASHTAG_POSTS_REQUEST,\r\n              lastId: mainPosts[mainPosts.length -1].id, // 마지막게시글 기준으로 다음게시글 불러옴(게시글 보고있는데 새 게시글이 추가되면, 밀려서 불러오게되서 마지막 게시글을 기준으로 계산해서 불러오기) \r\n              data: tag,\r\n            })\r\n          }\r\n        }\r\n    }, [mainPosts.length, hasMorePost]);\r\n    useEffect( ()=>{\r\n        window.addEventListener('scroll', onScroll);\r\n        return () =>{ // 이벤트 사용하고 나서 꼭 정리해주자\r\n          window.removeEventListener('scroll', onScroll);\r\n        }\r\n    }, [mainPosts.length]);\r\n    return(\r\n        <div>\r\n            {mainPosts ? mainPosts.map(c => (\r\n                <PostCard key={+c.createdAt} post={c}></PostCard> \r\n            )): null} \r\n        </div>// 강의에서는(6.3 18:49) ? 처리 안해줘도 됨, 나는 map undefined 에러, 왜 ?\r\n    );\r\n};\r\nHashtag.propTypes = {\r\n    tag: PropTypes.string.isRequired, \r\n}\r\n\r\nHashtag.getInitialProps = async (context) => {\r\n    const tag = context.query.tag;\r\n    console.log('hashtag props on hastag.js' , context.query.tag, context); // 서버에서 라우팅받은 정보가 넘어오는지 확인, _app.js에서 또 추가해줌\r\n    context.store.dispatch({\r\n        type: LOAD_HASHTAG_POSTS_REQUEST,\r\n        data: tag,\r\n    })\r\n    return { tag };\r\n};\r\nexport default Hashtag;"]},"metadata":{},"sourceType":"module"}