{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useCallback, useRef } from \"react\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { LOAD_MAIN_POSTS_REQUEST } from \"../reducers/post\";\n\nvar Home = function Home() {\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost;\n\n  var dispatch = useDispatch();\n  var countRef = useRef([]); //요청보냈던 id 기록(프론트 쓰로틀링 구현 - 반복요청 방지)\n\n  var onScroll = useCallback(function () {\n    //window.scrollY:현재위치, clientHeight: 스크롤바의 높이(현재화면), scrollHeight: 맨위에서 맨아래까지의 높이\n    // console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        // 더 불러올 게시글이 있을때 요청(스크롤 할때마다 요청하는 것을 방지)\n        var lastId = mainPosts[mainPosts.length - 1].id; // 마지막게시글 기준으로 다음게시글 불러옴(게시글 보고있는데 새 게시글이 추가되면, 밀려서 불러오게되서 마지막 게시글을 기준으로 계산해서 불러오기) \n\n        if (!countRef.current.includes(lastId)) {\n          dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST,\n            lastId: lastId\n          });\n          countRef.current.push(lastId); // 요청보낼때마다 countRef 에 lastId가 담겨진다\n        }\n      }\n    }\n  }, [mainPosts.length, hasMorePost]);\n  useEffect(function () {\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      // 이벤트 사용하고 나서 꼭 정리해주자\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, me && __jsx(PostForm, null), mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: c,\n      post: c\n    });\n  }));\n}; // context 는 _app.js 에서 pageProps = await Component.getInitialProps(ctx); 의 ctx 임, context안에는 store 있고,\n// store안에 리덕스 함수들이 있음\n\n\nHome.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // console.log(Object.keys(context));\n          // 1. SSR: 이렇게 디스패치를 여기서 해줌, 2. _app.js 에 withReduxSaga 추가(next 용 리덕스 사가)\n          context.store.dispatch({\n            type: LOAD_MAIN_POSTS_REQUEST\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/index.js"],"names":["React","useEffect","useCallback","useRef","PostForm","PostCard","useSelector","useDispatch","LOAD_MAIN_POSTS_REQUEST","Home","state","user","me","post","mainPosts","hasMorePost","dispatch","countRef","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","current","includes","type","push","addEventListener","removeEventListener","map","c","getInitialProps","context","store"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,MAAxC,QAAqD,OAArD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,uBAAT,QAAwC,kBAAxC;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA,qBACFH,WAAW,CAAC,UAAAI,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CADT;AAAA,MACTC,EADS,gBACTA,EADS;;AAAA,sBAEkBN,WAAW,CAAC,UAAAI,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAF7B;AAAA,MAETC,SAFS,iBAETA,SAFS;AAAA,MAEEC,WAFF,iBAEEA,WAFF;;AAGjB,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,MAAMU,QAAQ,GAAGd,MAAM,CAAC,EAAD,CAAvB,CAJiB,CAIW;;AAC5B,MAAMe,QAAQ,GAAGhB,WAAW,CAAC,YAAK;AAChC;AACA;AACA,QAAGiB,MAAM,CAACC,OAAP,GAAkBC,QAAQ,CAACC,eAAT,CAAyBC,YAA3C,GAA0DF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAuC,GAApG,EAAwG;AACtG,UAAGT,WAAH,EAAe;AAAE;AACf,YAAMU,MAAM,GAAGX,SAAS,CAACA,SAAS,CAACY,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAA9C,CADa,CACoC;;AACjD,YAAG,CAACV,QAAQ,CAACW,OAAT,CAAiBC,QAAjB,CAA0BJ,MAA1B,CAAJ,EAAsC;AACpCT,UAAAA,QAAQ,CAAC;AACPc,YAAAA,IAAI,EAAEtB,uBADC;AAEPiB,YAAAA,MAAM,EAANA;AAFO,WAAD,CAAR;AAIAR,UAAAA,QAAQ,CAACW,OAAT,CAAiBG,IAAjB,CAAsBN,MAAtB,EALoC,CAKL;AAChC;AAEF;AACF;AACF,GAhB2B,EAgBzB,CAACX,SAAS,CAACY,MAAX,EAAmBX,WAAnB,CAhByB,CAA5B;AAiBAd,EAAAA,SAAS,CAAE,YAAI;AACbkB,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCd,QAAlC;AACA,WAAO,YAAK;AAAE;AACZC,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCf,QAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACJ,SAAS,CAACY,MAAX,CALM,CAAT;AAOA,SACI,mBACEd,EAAE,IAAI,MAAC,QAAD,OADR,EAEEE,SAAS,CAACoB,GAAV,CAAc,UAAAC,CAAC,EAAI;AAClB,WACE,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAkB,MAAA,IAAI,EAAEA;AAAxB,MADF;AAGD,GAJA,CAFF,CADJ;AAWD,CAxCD,C,CAyCA;AACA;;;AACA1B,IAAI,CAAC2B,eAAL,GAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACrB;AACA;AACAA,UAAAA,OAAO,CAACC,KAAR,CAActB,QAAd,CAAuB;AACrBc,YAAAA,IAAI,EAAEtB;AADe,WAAvB;;AAHqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAOA,eAAeC,IAAf","sourcesContent":["import React , {useEffect, useCallback, useRef} from \"react\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { LOAD_MAIN_POSTS_REQUEST } from \"../reducers/post\";\r\n\r\n\r\nconst Home = () => {\r\n  const { me } = useSelector(state => state.user);\r\n  const { mainPosts, hasMorePost } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n  const countRef = useRef([]);//요청보냈던 id 기록(프론트 쓰로틀링 구현 - 반복요청 방지)\r\n  const onScroll = useCallback(() =>{\r\n    //window.scrollY:현재위치, clientHeight: 스크롤바의 높이(현재화면), scrollHeight: 맨위에서 맨아래까지의 높이\r\n    // console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\r\n    if(window.scrollY +  document.documentElement.clientHeight > document.documentElement.scrollHeight -300){\r\n      if(hasMorePost){ // 더 불러올 게시글이 있을때 요청(스크롤 할때마다 요청하는 것을 방지)\r\n        const lastId = mainPosts[mainPosts.length -1].id // 마지막게시글 기준으로 다음게시글 불러옴(게시글 보고있는데 새 게시글이 추가되면, 밀려서 불러오게되서 마지막 게시글을 기준으로 계산해서 불러오기) \r\n        if(!countRef.current.includes(lastId)){\r\n          dispatch({\r\n            type: LOAD_MAIN_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n          countRef.current.push(lastId); // 요청보낼때마다 countRef 에 lastId가 담겨진다\r\n        }\r\n        \r\n      }\r\n    }\r\n  }, [mainPosts.length, hasMorePost]);\r\n  useEffect( ()=>{\r\n    window.addEventListener('scroll', onScroll);\r\n    return () =>{ // 이벤트 사용하고 나서 꼭 정리해주자\r\n      window.removeEventListener('scroll', onScroll);\r\n    }\r\n  }, [mainPosts.length]);\r\n\r\n  return (\r\n      <div>\r\n       {me && <PostForm></PostForm> }\r\n       {mainPosts.map(c => {\r\n         return (\r\n           <PostCard key={c} post={c}></PostCard>\r\n         );\r\n       })}\r\n      </div>\r\n\r\n  );\r\n};\r\n// context 는 _app.js 에서 pageProps = await Component.getInitialProps(ctx); 의 ctx 임, context안에는 store 있고,\r\n// store안에 리덕스 함수들이 있음\r\nHome.getInitialProps = async (context) => {\r\n  // console.log(Object.keys(context));\r\n  // 1. SSR: 이렇게 디스패치를 여기서 해줌, 2. _app.js 에 withReduxSaga 추가(next 용 리덕스 사가)\r\n  context.store.dispatch({\r\n    type: LOAD_MAIN_POSTS_REQUEST\r\n  })\r\n}\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}