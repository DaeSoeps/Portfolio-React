{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport produce from 'immer';\nexport var initialState = {\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실패 사유\n  isSignedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  singUpErrorReason: '',\n  // 회원가입 실패 사유 \n  me: null,\n  // 내정보\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null,\n  // 남의 정보\n  isEditingNickname: false,\n  // 이름 변경 중\n  editNicknameErrorReason: '',\n  // 이름 변경 실패 사유\n  hasMoreFollower: false,\n  // 프로필 - 팔로워 불러오다 더이상 없을 시 더보기 버튼 제거\n  hasMoreFollowing: false\n}; // 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\n//회원가입\n\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SING_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; //로그인\n\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE'; //사용자 정보 불러오기\n\nexport var LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport var LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport var LOAD_USER_FAILURE = 'LOAD_USER_FAILURE'; //로그아웃\n\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; //팔로워들 목록\n\nexport var LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport var LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport var LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE'; //팔로잉 목록\n\nexport var LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport var LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport var LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE'; //다른 사람을 팔로우\n\nexport var FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport var FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport var FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE'; //다른 사람을 언팔로우\n\nexport var UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport var UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport var UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE'; //팔로우한 사람을 제거\n\nexport var REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport var REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport var REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE'; //닉네임 수정\n\nexport var EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\nexport var EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\nexport var EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE'; //리듀서의 단점때문에 만들어야 됨 - 다른 리듀서의 정보를 수정할 수 없음\n\nexport var ADD_POST_TO_ME = 'ADD_POST_TO_ME'; //\n\nexport var REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOG_IN_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isLoggingIn: true,\n            logInErrorReason: ''\n          });\n        }\n\n      case LOG_IN_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isLoggingIn: false,\n            me: action.data,\n            isLoading: false\n          });\n        }\n\n      case LOG_IN_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isLoggingIn: false,\n            logInErrorReason: action.error,\n            me: null\n          });\n        }\n\n      case LOG_OUT_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isLoggingOut: true // 로그아웃버튼 로딩\n\n          });\n        }\n\n      case LOG_OUT_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isLoggingOut: false,\n            me: null\n          });\n        }\n\n      case SIGN_UP_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isSigningUp: true,\n            isSignedUp: false,\n            singUpErrorReason: ''\n          });\n        }\n\n      case SIGN_UP_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            signUpData: action.data,\n            isSigningUp: false,\n            isSignedUp: true\n          });\n        }\n\n      case SIGN_UP_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            signUpData: action.data,\n            isSigningUp: false,\n            singUpErrorReason: action.error\n          });\n        }\n\n      case LOAD_USER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LOAD_USER_SUCCESS:\n        {\n          if (action.me) {\n            return _objectSpread({}, state, {\n              me: action.data\n            });\n          }\n        }\n\n      case LOAD_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case FOLLOW_USER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case FOLLOW_USER_SUCCESS:\n        {\n          draft.me.Followers.unshift({\n            id: action.data\n          }); // return{\n          //     ...state,\n          //     me: {\n          //         ...state.me,\n          //         Followings:[{ id: action.data }, ...state.me.Followings],//아이디 목록에 팔로윙한 사람 추가(나)\n          //     }\n          // };\n        }\n\n      case FOLLOW_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNFOLLOW_USER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNFOLLOW_USER_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Followings: state.me.Followings.filter(function (v) {\n                return v.id !== action.data;\n              }) //아이디 목록에 팔로윙한 사람 추가(나)\n\n            }),\n            followingList: state.followingList.filter(function (v) {\n              return v.id !== action.data;\n            })\n          });\n        }\n\n      case UNFOLLOW_USER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_POST_OF_ME:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Posts: state.me.Posts.filter(function (v) {\n                return v.id !== action.data;\n              })\n            })\n          });\n        }\n\n      case LOAD_FOLLOWERS_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            hasMoreFollower: action.offset ? state.hasMoreFollower : true // action.offset 은 더보기 버튼 처음 클릭 시 생김(더보기 버튼 보여줌)\n\n          });\n        }\n\n      case LOAD_FOLLOWERS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            followerList: state.followerList.concat(action.data),\n            // 기존데이터에 계속 리스트를 추가시킴(더보기 기능)\n            hasMoreFollower: action.data.length === 3 // 가져온 데이터가 3개면 더보기 버튼을 계속 보여줌(1,2개면 없어짐)\n\n          });\n        }\n\n      case LOAD_FOLLOWERS_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LOAD_FOLLOWINGS_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            hasMoreFollowing: action.offset ? state.hasMoreFollowing : true\n          });\n        }\n\n      case LOAD_FOLLOWINGS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            followingList: state.followingList.concat(action.data),\n            hasMoreFollowing: action.data.length === 3\n          });\n        }\n\n      case LOAD_FOLLOWINGS_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_FOLLOWER_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_FOLLOWER_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Followers: state.me.Followers.filter(function (v) {\n                return v.id !== action.data;\n              }) //아이디 목록에 팔로윙한 사람 추가(나)\n\n            }),\n            followerList: state.followerList.filter(function (v) {\n              return v.id !== action.data;\n            })\n          });\n        }\n\n      case REMOVE_FOLLOWER_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case EDIT_NICKNAME_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: true,\n            editNicknameErrorReason: ''\n          });\n        }\n\n      case EDIT_NICKNAME_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: false,\n            me: _objectSpread({}, state.me, {\n              nickname: action.data\n            })\n          });\n        }\n\n      case EDIT_NICKNAME_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isEditingNickname: false,\n            editNicknameErrorReason: action.error\n          });\n        }\n\n      case ADD_POST_TO_ME:\n        {\n          return _objectSpread({}, state, {\n            me: _objectSpread({}, state.me, {\n              Posts: [{\n                id: action.data\n              }].concat(_toConsumableArray(state.me.Posts))\n            })\n          });\n        }\n\n      default:\n        {\n          return _objectSpread({}, state);\n        }\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/reducers/user.js"],"names":["produce","initialState","isLoggingOut","isLoggingIn","logInErrorReason","isSignedUp","isSigningUp","singUpErrorReason","me","followingList","followerList","userInfo","isEditingNickname","editNicknameErrorReason","hasMoreFollower","hasMoreFollowing","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","EDIT_NICKNAME_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","state","action","draft","type","data","isLoading","error","signUpData","Followers","unshift","id","Followings","filter","v","Posts","offset","concat","length","nickname"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nexport const initialState = {\r\n    isLoggingOut: false, // 로그아웃 시도중\r\n    isLoggingIn: false, // 로그인 시도중\r\n    logInErrorReason: '', // 로그인 실패 사유\r\n    isSignedUp: false, // 회원가입 성공\r\n    isSigningUp: false, // 회원가입 시도중\r\n    singUpErrorReason: '', // 회원가입 실패 사유 \r\n    me: null, // 내정보\r\n    followingList: [], // 팔로잉 리스트\r\n    followerList: [],  // 팔로워 리스트\r\n    userInfo: null, // 남의 정보\r\n    isEditingNickname: false, // 이름 변경 중\r\n    editNicknameErrorReason: '', // 이름 변경 실패 사유\r\n    hasMoreFollower : false, // 프로필 - 팔로워 불러오다 더이상 없을 시 더보기 버튼 제거\r\n    hasMoreFollowing : false,\r\n};\r\n// 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\r\n//회원가입\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST'; \r\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS'; \r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; \r\n//로그인\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; \r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n//사용자 정보 불러오기\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST'; \r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n//로그아웃\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n//팔로워들 목록\r\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\r\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\r\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\r\n//팔로잉 목록\r\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\r\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\r\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\r\n//다른 사람을 팔로우\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n//다른 사람을 언팔로우\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n//팔로우한 사람을 제거\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n//닉네임 수정\r\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\r\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\r\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\r\n//리듀서의 단점때문에 만들어야 됨 - 다른 리듀서의 정보를 수정할 수 없음\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\n//\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\nexport default ( state = initialState, action) => {\r\n    return produce(state, (draft)=>{\r\n        switch (action.type){\r\n            case LOG_IN_REQUEST : {\r\n                return {\r\n                    ...state,\r\n                    isLoggingIn: true,\r\n                    logInErrorReason :'',               \r\n                };\r\n            }\r\n            case LOG_IN_SUCCESS :{\r\n                return{\r\n                    ...state,\r\n                    isLoggingIn: false,\r\n                    me : action.data,\r\n                    isLoading: false,\r\n                };\r\n            }\r\n            case LOG_IN_FAILURE :{\r\n                return {\r\n                    ...state,\r\n                    isLoggingIn: false,\r\n                    logInErrorReason : action.error,\r\n                    me : null,\r\n                }\r\n            }\r\n            case LOG_OUT_REQUEST : {\r\n                return {\r\n                    ...state,\r\n                    isLoggingOut : true, // 로그아웃버튼 로딩\r\n                };\r\n            }\r\n            case LOG_OUT_REQUEST : {\r\n                return {\r\n                    ...state,\r\n                    isLoggingOut: false,\r\n                    me : null\r\n                };\r\n            }\r\n            case SIGN_UP_REQUEST: {\r\n                return{\r\n                    ...state,\r\n                    isSigningUp : true,\r\n                    isSignedUp : false,\r\n                    singUpErrorReason : '',\r\n                };\r\n            }\r\n            case SIGN_UP_SUCCESS: {\r\n                return{\r\n                    ...state,\r\n                    signUpData: action.data,\r\n                    isSigningUp : false,\r\n                    isSignedUp : true,\r\n                };\r\n            }\r\n            case SIGN_UP_FAILURE: {\r\n                return{\r\n                    ...state,\r\n                    signUpData: action.data,\r\n                    isSigningUp : false,\r\n                    singUpErrorReason : action.error,\r\n                };\r\n            }\r\n            case LOAD_USER_REQUEST: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case LOAD_USER_SUCCESS: {\r\n                if(action.me){\r\n                    return{\r\n                        ...state,\r\n                        me: action.data,\r\n                    };\r\n                }\r\n            }\r\n            case LOAD_USER_FAILURE: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case FOLLOW_USER_REQUEST: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case FOLLOW_USER_SUCCESS: {\r\n                draft.me.Followers.unshift({id:action.data});\r\n                // return{\r\n                //     ...state,\r\n                //     me: {\r\n                //         ...state.me,\r\n                //         Followings:[{ id: action.data }, ...state.me.Followings],//아이디 목록에 팔로윙한 사람 추가(나)\r\n                //     }\r\n                // };\r\n            }\r\n            case FOLLOW_USER_FAILURE: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case UNFOLLOW_USER_REQUEST: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case UNFOLLOW_USER_SUCCESS: {\r\n                return{\r\n                    ...state,\r\n                    me: {\r\n                        ...state.me,\r\n                        Followings: state.me.Followings.filter(v => v.id !== action.data),//아이디 목록에 팔로윙한 사람 추가(나)\r\n                    },\r\n                    followingList: state.followingList.filter(v => v.id !== action.data),\r\n                };\r\n            }\r\n            case UNFOLLOW_USER_FAILURE: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case REMOVE_POST_OF_ME:{\r\n                return{\r\n                    ...state,\r\n                    me: {\r\n                        ...state.me,\r\n                        Posts: state.me.Posts.filter(v=>v.id !== action.data),\r\n                    },\r\n                }\r\n            }\r\n            case LOAD_FOLLOWERS_REQUEST: {\r\n                return{\r\n                    ...state,\r\n                    hasMoreFollower: action.offset ? state.hasMoreFollower : true, // action.offset 은 더보기 버튼 처음 클릭 시 생김(더보기 버튼 보여줌)\r\n                };\r\n            }\r\n            case LOAD_FOLLOWERS_SUCCESS: {\r\n                return{\r\n                    ...state,\r\n                    followerList : state.followerList.concat(action.data), // 기존데이터에 계속 리스트를 추가시킴(더보기 기능)\r\n                    hasMoreFollower: action.data.length ===3, // 가져온 데이터가 3개면 더보기 버튼을 계속 보여줌(1,2개면 없어짐)\r\n                };\r\n            }\r\n            case LOAD_FOLLOWERS_FAILURE: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case LOAD_FOLLOWINGS_REQUEST: {\r\n                return{\r\n                    ...state,\r\n                    hasMoreFollowing: action.offset ? state.hasMoreFollowing : true,\r\n                };\r\n            }\r\n            case LOAD_FOLLOWINGS_SUCCESS: {\r\n                return{\r\n                    ...state,\r\n                    followingList : state.followingList.concat(action.data),\r\n                    hasMoreFollowing: action.data.length ===3,\r\n                };\r\n            }\r\n            case LOAD_FOLLOWINGS_FAILURE: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case REMOVE_FOLLOWER_REQUEST: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case REMOVE_FOLLOWER_SUCCESS: {\r\n                return{\r\n                    ...state,\r\n                    me: {\r\n                        ...state.me,\r\n                        Followers: state.me.Followers.filter(v => v.id !== action.data),//아이디 목록에 팔로윙한 사람 추가(나)\r\n                    },\r\n                    followerList: state.followerList.filter(v => v.id !== action.data),\r\n                };\r\n            }\r\n            case REMOVE_FOLLOWER_FAILURE: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n            case EDIT_NICKNAME_REQUEST: {\r\n                return{\r\n                    ...state,\r\n                    isEditingNickname: true,\r\n                    editNicknameErrorReason: '',\r\n                };\r\n            }\r\n            case EDIT_NICKNAME_SUCCESS: {\r\n                return{\r\n                    ...state,\r\n                    isEditingNickname: false,\r\n                    me: {\r\n                        ...state.me,\r\n                        nickname: action.data,\r\n                    }\r\n                };\r\n            }\r\n            case EDIT_NICKNAME_FAILURE: {\r\n                return{\r\n                    ...state,\r\n                    isEditingNickname: false,\r\n                    editNicknameErrorReason: action.error,\r\n                };\r\n            }\r\n            case ADD_POST_TO_ME:{\r\n                return {\r\n                    ...state,\r\n                    me: {\r\n                        ...state.me,\r\n                        Posts: [{ id: action.data}, ...state.me.Posts],\r\n                    }\r\n                }\r\n            }\r\n            default: {\r\n                return{\r\n                    ...state,\r\n                };\r\n            }\r\n        }\r\n    });\r\n     \r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}