{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { LOAD_MAIN_POSTS_REQUEST } from \"../reducers/post\";\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n\n  const onScroll = () => {\n    //window.scrollY:현재위치, clientHeight: 스크롤바의 높이(현재화면), scrollHeight: 맨위에서 맨아래까지의 높이\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      dispatch({\n        type: LOAD_MAIN_POSTS_REQUEST,\n        lastId: mainPosts[mainPosts.length - 1].id // 마지막게시글 기준으로 다음게시글 불러옴(게시글 보고있는데 새 게시글이 추가되면, 밀려서 불러오게되서 마지막 게시글을 기준으로 계산해서 불러오기) \n\n      });\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      // 이벤트 사용하고 나서 꼭 정리해주자\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, me && __jsx(PostForm, null), mainPosts.map(c => {\n    return __jsx(PostCard, {\n      key: c,\n      post: c\n    });\n  }));\n}; // context 는 _app.js 에서 pageProps = await Component.getInitialProps(ctx); 의 ctx 임, context안에는 store 있고,\n// store안에 리덕스 함수들이 있음\n\n\nHome.getInitialProps = async context => {\n  // console.log(Object.keys(context));\n  // 1. SSR: 이렇게 디스패치를 여기서 해줌, 2. _app.js 에 withReduxSaga 추가(next 용 리덕스 사가)\n  context.store.dispatch({\n    type: LOAD_MAIN_POSTS_REQUEST\n  });\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/index.js"],"names":["React","useEffect","PostForm","PostCard","useSelector","useDispatch","LOAD_MAIN_POSTS_REQUEST","Home","me","state","user","mainPosts","post","dispatch","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","id","addEventListener","removeEventListener","map","c","getInitialProps","context","store"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,uBAAT,QAAwC,kBAAxC;;AAGA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAASJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBP,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAjC;AACA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AACA,QAAMS,QAAQ,GAAG,MAAK;AACpB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AACA,QAAGL,MAAM,CAACC,OAAP,GAAkBC,QAAQ,CAACC,eAAT,CAAyBC,YAA3C,GAA0DF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAuC,GAApG,EAAwG;AACtGT,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAEjB,uBADC;AAEPkB,QAAAA,MAAM,EAAEb,SAAS,CAACA,SAAS,CAACc,MAAV,GAAkB,CAAnB,CAAT,CAA+BC,EAFhC,CAEmC;;AAFnC,OAAD,CAAR;AAID;AACF,GATD;;AAUAzB,EAAAA,SAAS,CAAE,MAAI;AACbgB,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCb,QAAlC;AACA,WAAO,MAAK;AAAE;AACZG,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCd,QAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACH,SAAS,CAACc,MAAX,CALM,CAAT;AAOA,SACI,mBACEjB,EAAE,IAAI,MAAC,QAAD,OADR,EAEEG,SAAS,CAACkB,GAAV,CAAcC,CAAC,IAAI;AAClB,WACE,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAkB,MAAA,IAAI,EAAEA;AAAxB,MADF;AAGD,GAJA,CAFF,CADJ;AAWD,CAhCD,C,CAiCA;AACA;;;AACAvB,IAAI,CAACwB,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACxC;AACA;AACAA,EAAAA,OAAO,CAACC,KAAR,CAAcpB,QAAd,CAAuB;AACrBU,IAAAA,IAAI,EAAEjB;AADe,GAAvB;AAGD,CAND;;AAOA,eAAeC,IAAf","sourcesContent":["import React , {useEffect} from \"react\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { LOAD_MAIN_POSTS_REQUEST } from \"../reducers/post\";\r\n\r\n\r\nconst Home = () => {\r\n  const { me } = useSelector(state => state.user);\r\n  const { mainPosts } = useSelector(state => state.post);\r\n  const dispatch = useDispatch();\r\n  const onScroll = () =>{\r\n    //window.scrollY:현재위치, clientHeight: 스크롤바의 높이(현재화면), scrollHeight: 맨위에서 맨아래까지의 높이\r\n    console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\r\n    if(window.scrollY +  document.documentElement.clientHeight > document.documentElement.scrollHeight -300){\r\n      dispatch({\r\n        type: LOAD_MAIN_POSTS_REQUEST,\r\n        lastId: mainPosts[mainPosts.length -1].id // 마지막게시글 기준으로 다음게시글 불러옴(게시글 보고있는데 새 게시글이 추가되면, 밀려서 불러오게되서 마지막 게시글을 기준으로 계산해서 불러오기) \r\n      })\r\n    }\r\n  }\r\n  useEffect( ()=>{\r\n    window.addEventListener('scroll', onScroll);\r\n    return () =>{ // 이벤트 사용하고 나서 꼭 정리해주자\r\n      window.removeEventListener('scroll', onScroll);\r\n    }\r\n  }, [mainPosts.length]) \r\n\r\n  return (\r\n      <div>\r\n       {me && <PostForm></PostForm> }\r\n       {mainPosts.map(c => {\r\n         return (\r\n           <PostCard key={c} post={c}></PostCard>\r\n         );\r\n       })}\r\n      </div>\r\n\r\n  );\r\n};\r\n// context 는 _app.js 에서 pageProps = await Component.getInitialProps(ctx); 의 ctx 임, context안에는 store 있고,\r\n// store안에 리덕스 함수들이 있음\r\nHome.getInitialProps = async (context) => {\r\n  // console.log(Object.keys(context));\r\n  // 1. SSR: 이렇게 디스패치를 여기서 해줌, 2. _app.js 에 withReduxSaga 추가(next 용 리덕스 사가)\r\n  context.store.dispatch({\r\n    type: LOAD_MAIN_POSTS_REQUEST\r\n  })\r\n}\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}