{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport axios from 'axios';\nimport { Result } from 'antd';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\n\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI() {\n  return axios.get('/posts');\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, addComment);\n} //\n\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts'); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n} //\n// function loadHashtagPostsAPI(tag){\n//     console.log(\"saga tag: \" ,tag );\n//     return axios.get(`/hashtag/${tag}`); \n// }\n\n\nfunction loadHashtagPostsAPI(data) {\n  console.log(\"COME\", data);\n  return axios.get(`/hashtag/${encodeURIComponent(data)}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n} //\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n} //\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchloadMainPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","axios","Result","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","addCommentAPI","get","addComment","postId","watchAddComment","loadMainPostsAPI","loadMainPosts","watchloadMainPosts","loadHashtagPostsAPI","console","log","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","id","loadUserPosts","watchLoadUserPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n         ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS,\r\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST} from '../reducers/post';\r\nimport axios from 'axios';\r\nimport { Result } from 'antd';\r\n\r\nfunction addPostAPI(postData){\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true, //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\r\n    });\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n\r\n\r\nfunction addCommentAPI(){\r\n    return axios.get('/posts')\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId: action.data.postId,\r\n            },\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, addComment);\r\n}\r\n\r\n//\r\nfunction loadMainPostsAPI(){\r\n    return axios.get('/posts'); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\r\n}\r\nfunction* loadMainPosts(){\r\n    try{\r\n        const result = yield call(loadMainPostsAPI);\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchloadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n//\r\n\r\n// function loadHashtagPostsAPI(tag){\r\n//     console.log(\"saga tag: \" ,tag );\r\n//     return axios.get(`/hashtag/${tag}`); \r\n// }\r\nfunction loadHashtagPostsAPI(data) {\r\n    console.log(\"COME\", data)\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}`);\r\n  }\r\n\r\nfunction* loadHashtagPosts(action){\r\n    try{\r\n        const result = yield call(loadHashtagPostsAPI, action.data);\r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLoadHashtagPosts(){\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n//\r\n\r\n\r\nfunction loadUserPostsAPI(id){\r\n    return axios.get(`/user/${id}/posts`); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\r\n}\r\nfunction* loadUserPosts(action){\r\n    try{\r\n        const result = yield call(loadUserPostsAPI, action.data);\r\n        yield put({\r\n            type:LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLoadUserPosts(){\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n//\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchloadMainPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}