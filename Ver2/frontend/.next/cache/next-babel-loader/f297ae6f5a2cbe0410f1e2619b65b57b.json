{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostCard from '../containers/PostCard';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport { Card, Avatar } from 'antd';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nconst User = () => {\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  const {\n    userInfo\n  } = useSelector(state => state.user);\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Post), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(c => __jsx(PostCard, {\n    key: c.id,\n    post: c\n  })));\n};\n\n// getInitialProps : 처음 서버쪽에서 이 페이지를 불러올때 실행되고, 프론트에서 next,router로 넘나들때 실행됨\n// 그래서 처음에 서버로부터 데이터를 받아올 수 있음\nUser.getInitialProps = async context => {\n  const id = parseInt(context.query.id, 10);\n  console.log('hashtag props on user.js', context.query.id); // 서버에서 라우팅받은 정보가 넘어오는지 확인, _app.js에서 또 추가해줌\n\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: id\n  });\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: id\n  });\n  return {\n    id: parseInt(context.query.id, 10)\n  }; // 1. 이러면 컴포넌트의 props에도 전달이 가능함 : 서버>getInitialProps> User.props \n};\n\nexport default User;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/user.js"],"names":["React","useEffect","useDispatch","useSelector","PostCard","LOAD_USER_POSTS_REQUEST","Card","Avatar","LOAD_USER_REQUEST","User","mainPosts","state","post","userInfo","user","Post","Followings","Followers","nickname","map","c","id","getInitialProps","context","parseInt","query","console","log","store","dispatch","type","data"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,MAA7B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEf,QAAM;AAAEC,IAAAA;AAAF,MAAgBP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAjC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeV,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAhC;AAEA,SACI,mBACKD,QAAQ,GACT,MAAC,IAAD;AACA,IAAA,OAAO,EAAE,CACL;AAAK,MAAA,GAAG,EAAC;AAAT,uBAAkB,iBAAlB,EAA4BA,QAAQ,CAACE,IAArC,CADK,EAEL;AAAK,MAAA,GAAG,EAAC;AAAT,6BAAwB,iBAAxB,EAAkCF,QAAQ,CAACG,UAA3C,CAFK,EAGL;AAAK,MAAA,GAAG,EAAC;AAAT,6BAAuB,iBAAvB,EAAiCH,QAAQ,CAACI,SAA1C,CAHK;AADT,KAOI,MAAC,IAAD,CAAM,IAAN;AACC,IAAA,MAAM,EAAE,MAAC,MAAD,QAASJ,QAAQ,CAACK,QAAT,CAAkB,CAAlB,CAAT,CADT;AAEC,IAAA,KAAK,EAAEL,QAAQ,CAACK;AAFjB,IAPJ,CADS,GAaP,IAdN,EAeKR,SAAS,CAACS,GAAV,CAAcC,CAAC,IACZ,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACC,EAAjB;AAAqB,IAAA,IAAI,EAAED;AAA3B,IADH,CAfL,CADJ;AAqBH,CA1BD;;AA8BA;AACA;AACAX,IAAI,CAACa,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACtC,QAAMF,EAAE,GAAGG,QAAQ,CAACD,OAAO,CAACE,KAAR,CAAcJ,EAAf,EAAoB,EAApB,CAAnB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAyCJ,OAAO,CAACE,KAAR,CAAcJ,EAAvD,EAFsC,CAEsB;;AAC5DE,EAAAA,OAAO,CAACK,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAEtB,iBADa;AAEnBuB,IAAAA,IAAI,EAAEV;AAFa,GAAvB;AAIAE,EAAAA,OAAO,CAACK,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAEzB,uBADa;AAEnB0B,IAAAA,IAAI,EAAEV;AAFa,GAAvB;AAIA,SAAO;AAAEA,IAAAA,EAAE,EAAEG,QAAQ,CAACD,OAAO,CAACE,KAAR,CAAcJ,EAAf,EAAmB,EAAnB;AAAd,GAAP,CAXsC,CAWQ;AACjD,CAZD;;AAaA,eAAeZ,IAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostCard from '../containers/PostCard';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\r\nimport { Card, Avatar } from 'antd';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst User = () => {\r\n    \r\n    const { mainPosts } = useSelector(state => state.post);\r\n    const { userInfo } = useSelector(state => state.user);\r\n\r\n    return(\r\n        <div>\r\n            {userInfo ? \r\n            <Card\r\n            actions={[\r\n                <div key=\"twit\">짹짹<br></br>{userInfo.Post}</div>,\r\n                <div key=\"following\">팔로잉<br></br>{userInfo.Followings}</div>,\r\n                <div key=\"follower\">팔로워<br></br>{userInfo.Followers}</div>,\r\n              ]}\r\n            >\r\n                <Card.Meta\r\n                 avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n                 title={userInfo.nickname}\r\n                ></Card.Meta>\r\n            </Card>\r\n            : null}\r\n            {mainPosts.map(c=>( \r\n                <PostCard key={c.id} post={c}></PostCard>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\nUser.propTypes = {\r\n    id: PropTypes.number.isRequired, // 2. 이러면 컴포넌트의 props에도 전달이 가능함 : 서버>getInitialProps> User.props \r\n}\r\n// getInitialProps : 처음 서버쪽에서 이 페이지를 불러올때 실행되고, 프론트에서 next,router로 넘나들때 실행됨\r\n// 그래서 처음에 서버로부터 데이터를 받아올 수 있음\r\nUser.getInitialProps = async (context) => {\r\n    const id = parseInt(context.query.id , 10) ;\r\n    console.log('hashtag props on user.js' , context.query.id); // 서버에서 라우팅받은 정보가 넘어오는지 확인, _app.js에서 또 추가해줌\r\n    context.store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n        data: id,\r\n    })\r\n    context.store.dispatch({\r\n        type: LOAD_USER_POSTS_REQUEST,\r\n        data: id,\r\n    })\r\n    return { id: parseInt(context.query.id, 10) } // 1. 이러면 컴포넌트의 props에도 전달이 가능함 : 서버>getInitialProps> User.props \r\n};\r\nexport default User;"]},"metadata":{},"sourceType":"module"}