{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { Input, Form, Button } from \"antd\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n  var onsubmitForm = useCallback(function (e) {\n    e.preventDefault(); // 이걸 안하면 새 페이지로 넘어감(싱글폼 들은 꼭 작성)\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성해주세요!');\n    }\n\n    var formData = new FormData(); // 게시글 최종적으로 올리는 용도, 필요는 없지만 라우터에서 upload.none 을 보여주기 위함(폼데이터 컨트롤)\n\n    imagePaths.forEach(function (i) {\n      formData.append('image', i); // req.body.image\n    });\n    formData.append('content', text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []); // 게시글 작성될때 작성폼 초기화\n\n  useEffect(function () {\n    setText('');\n  }, [postAdded === true]);\n  var onChangeImages = useCallback(function (e) {\n    console.log(e.target.files); // multipart/form-data 이미지나 파일, 동영상등을 서버로 보낼때 사용 \n    // multipart/form-data는 submit 시 서버로 데이터 전송 >>> 바로 보내지 않고 ajax로 보냄(spa 유지 위함) new FormData 이것도 ajax의 객체\n\n    var imageFormData = new FormData(); // 폼에서 타입을 encType=\"multipart/form-data\" 했을때 브라우저에서 FormData 객채를 제공.\n\n    [].forEach.call(e.target.files, function (f) {\n      // 그 FormData 객체안에 이미지파일을 각각 넣어줘야함\n      imageFormData.append('image', f); // 게시글 같이 보내지 않고 이미지만 미리 보냄(같이 보내면 효율이 좋지 않음)\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click(); // 이미지업로드 버튼을 눌렀을때 그위의 input 을 누름 효과\n  }, [imageInput.current]);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      // 괄호가 있는 함수는 한번더 괄호를 붙여줘야함(고차함수)\n      dispatch({\n        type: REMOVE_IMAGE,\n        index: index\n      });\n    };\n  });\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20 px'\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onsubmitForm\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: \"right\"\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", null, imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: \"inline-block\"\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\".concat(v),\n      style: {\n        width: \"200px\"\n      },\n      alt: v\n    }), __jsx(\"div\", null, __jsx(Button, {\n      onClick: onRemoveImage(i)\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\nexport default PostForm;","map":null,"metadata":{},"sourceType":"module"}