{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Input, List, Form, Comment, Popover } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport Link from 'next/link';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispath = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      // 댓글창이 닫혀있는 경우\n      dispath({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispath({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\n\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // Likers : 좋아요 누른 사람들 배열로 들어있음\n      dispath({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispath({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispath({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispath({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispath({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId === me.id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\"\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: !me || post.User.id === me.id ? null // 로그인안했을때, 자기 게시글일땐 안보임\n    : me.Followings && me.Followings.find(function (v) {\n      return v.id === post.User.id;\n    }) // 로그인 후 남의게시글 목록 볼때 작성자가 내 팔로잉 목록에 들어있을떄 (팔로잉중)\n    ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0 \\uCDE8\\uC18C\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))) // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\n    ,\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))) // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\n    ,\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Input","List","Form","Comment","Popover","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","PostImages","PostCardContent","Link","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispath","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","onUnfollow","createdAt","Images","UserId","RetweetId","User","nickname","Followings","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img","isRequired"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\r\nimport { Card , Icon, Button, Avatar, Input, List, Form, Comment, Popover} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent';\r\nimport Link from 'next/link';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\nconst PostCard = ( { post}) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me }= useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment }= useSelector(state => state.post);\r\n  const dispath = useDispatch();\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n  const onToggleComment = useCallback(() => {\r\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\r\n    setCommentFormOpened(prev =>!prev);\r\n    if(!commentFormOpened){ // 댓글창이 닫혀있는 경우\r\n      dispath({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, []);\r\n  const onSubmitComment = useCallback((e) =>{\r\n    e.preventDefault();\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    dispath({\r\n      type:ADD_COMMENT_REQUEST,\r\n      data:{\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\r\n  const onChangeCommentText = useCallback((e) =>{\r\n    setCommentText(e.target.value);\r\n  },[]);\r\n  useEffect(()=>{\r\n    setCommentText('');\r\n  },[commentAdded ===true]);\r\n\r\n  const onToggleLike = useCallback( () =>{\r\n    if(!me){\r\n      return alert('로그인이 필요합니다!');\r\n    }\r\n    if(liked){  // Likers : 좋아요 누른 사람들 배열로 들어있음\r\n      dispath({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }else{ // 좋아요 안 누른 상태\r\n      dispath({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, [me && me.id, post && post.id, liked])\r\n  const onRetweet = useCallback( ()=> {\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispath({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    })\r\n  }, [me && me.id , post && post.id]);\r\n  const onFollow = useCallback( userId => () =>{ \r\n    dispath({\r\n      type: FOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n  const onUnfollow = useCallback( userId => () => {\r\n    dispath({\r\n      type: UNFOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n    <Card\r\n      key={+post.createdAt}\r\n      cover={post.Images[0] && <PostImages images={post.Images}></PostImages>}\r\n      actions={[\r\n        <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet}></Icon>,\r\n        <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor=\"#eb2f96\" onClick={onToggleLike}></Icon>,\r\n        <Icon type=\"message\" key=\"message\" onClick={onToggleComment}></Icon>,\r\n        <Popover\r\n          key=\"ellipsis\"\r\n          content={(\r\n            <Button.Group>\r\n              {me && post.UserId === me.id\r\n                ? (\r\n                  <>\r\n                    <Button>수정</Button>\r\n                    <Button type=\"danger\">삭제</Button>\r\n                  </>\r\n                )\r\n                : <Button>신고</Button>}\r\n            </Button.Group>\r\n          )}\r\n        >\r\n            <Icon type=\"ellipsis\" />\r\n        </Popover>,\r\n      ]}\r\n      title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n      extra={!me || post.User.id === me.id ? null // 로그인안했을때, 자기 게시글일땐 안보임\r\n        : me.Followings && me.Followings.find(v => v.id === post.User.id) // 로그인 후 남의게시글 목록 볼때 작성자가 내 팔로잉 목록에 들어있을떄 (팔로잉중)\r\n        ? <Button onClick={onUnfollow(post.User.id)}>팔로우</Button>\r\n        : <Button onClick={onFollow(post.User.id)}>팔로우 취소</Button>\r\n      }\r\n    >\r\n    {post.RetweetId && post.Retweet ? (\r\n     <Card\r\n        cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images}></PostImages>}\r\n     >\r\n        <Card.Meta\r\n          avatar={\r\n            <Link href={{ pathname: '/user', query: { id: post.Retweet.User.id } }} as={`/user/${post.Retweet.User.id}`}> \r\n              <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a> \r\n            </Link>\r\n          } // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\r\n          title={post.Retweet.User.nickname}\r\n          description={<PostCardContent postData={post.Retweet.content}></PostCardContent>} \r\n        ></Card.Meta>\r\n      </Card> )\r\n      :(\r\n        <Card.Meta\r\n            avatar={<Link href={{ \r\n            pathname: '/user', \r\n            query: { id: post.User.id } }} as={`/user/${post.User.id}`}> \r\n              <a><Avatar>{post.User.nickname[0]}</Avatar></a> \r\n            </Link>\r\n          } // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\r\n          title={post.User.nickname}\r\n          description={<PostCardContent postData={post.content}></PostCardContent>} \r\n        ></Card.Meta>\r\n      )}\r\n    </Card>\r\n  {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(<Link href={{ \r\n                    pathname: '/user', \r\n                    query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                  )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPostCard.propTypes = {\r\n  post : PropTypes.shape({\r\n   User : PropTypes.object,\r\n   content : PropTypes.string,\r\n   img : PropTypes.string,\r\n   createdAt : PropTypes.object,\r\n  }).isRequired,\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}