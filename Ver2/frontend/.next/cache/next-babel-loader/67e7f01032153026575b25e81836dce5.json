{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST } from '../reducers/post';\nimport axios from 'axios';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\n\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      // post reducer 데이터를 수정\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      // user reducer 데이터를 수정\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //\n\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts'); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n} //\n\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n} // function loadHashtagPostsAPI(data) {\n//     console.log(\"COME\", encodeURIComponent(data));\n//     return axios.get(`/hashtag/${encodeURIComponent(data)}`);\n//   }\n\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n} //\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n} //\n\n\nfunction loadCommentsAPI(postId) {\n  console.log(postId, \"POST ID \");\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n} //\n\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data // 서버쪽 저장된 이미지 주소 받음(그 주소로 이미지 미리보기등 가능)\n\n    });\n  } catch (e) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n} //\n\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n} //\n\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n} //\n\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n} //\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchloadMainPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchLoadComments), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","axios","ADD_POST_TO_ME","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","id","e","error","watchAddPost","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadMainPostsAPI","get","loadMainPosts","watchloadMainPosts","loadHashtagPostsAPI","tag","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","loadCommentsAPI","console","log","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","alert","response","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n         ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS,\r\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, \r\n        LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, \r\n        LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST,\r\n        LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST} from '../reducers/post';\r\nimport axios from 'axios';\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true, //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\r\n    });\r\n}\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS, // post reducer 데이터를 수정\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type:ADD_POST_TO_ME, // user reducer 데이터를 수정\r\n            data: result.data.id,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n//\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, {content : data.content}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId: action.data.postId,\r\n                comment: result.data,\r\n            },\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n//\r\nfunction loadMainPostsAPI(){\r\n    return axios.get('/posts'); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\r\n}\r\nfunction* loadMainPosts(){\r\n    try{\r\n        const result = yield call(loadMainPostsAPI);\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchloadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n//\r\n\r\nfunction loadHashtagPostsAPI(tag){\r\n    return axios.get(`/hashtag/${tag}`); \r\n}\r\n// function loadHashtagPostsAPI(data) {\r\n//     console.log(\"COME\", encodeURIComponent(data));\r\n//     return axios.get(`/hashtag/${encodeURIComponent(data)}`);\r\n//   }\r\n\r\nfunction* loadHashtagPosts(action){\r\n    try{\r\n        const result = yield call(loadHashtagPostsAPI, action.data);\r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLoadHashtagPosts(){\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n//\r\n\r\n\r\nfunction loadUserPostsAPI(id){\r\n    return axios.get(`/user/${id}/posts`); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\r\n}\r\nfunction* loadUserPosts(action){\r\n    try{\r\n        const result = yield call(loadUserPostsAPI, action.data);\r\n        yield put({\r\n            type:LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLoadUserPosts(){\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n//\r\n\r\nfunction loadCommentsAPI(postId){\r\n    console.log(postId, \"POST ID \");\r\n    return axios.get(`/post/${postId}/comments`)\r\n}\r\nfunction* loadComments(action){\r\n    try{\r\n        const result = yield call(loadCommentsAPI, action.data);\r\n        yield put({\r\n            type:LOAD_COMMENTS_SUCCESS,\r\n            data:{\r\n                postId: action.data,\r\n                comments: result.data,\r\n            },\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_COMMENTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLoadComments(){\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\n//\r\nfunction uploadImagesAPI(formData){\r\n    return axios.post(`/post/images`, formData, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* uploadImages(action){\r\n    try{\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type:UPLOAD_IMAGES_SUCCESS,\r\n            data:result.data, // 서버쪽 저장된 이미지 주소 받음(그 주소로 이미지 미리보기등 가능)\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:UPLOAD_IMAGES_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchUploadImages(){\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n//\r\nfunction likePostAPI(postId){\r\n    return axios.post(`/post/${postId}/like`, {}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* likePost(action){\r\n    try{\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type:LIKE_POST_SUCCESS,\r\n            data:{\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LIKE_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n//\r\nfunction unlikePostAPI(postId){\r\n    return axios.delete(`/post/${postId}/like`, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* unlikePost(action){\r\n    try{\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type:UNLIKE_POST_SUCCESS,\r\n            data:{\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:UNLIKE_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchUnlikePost(){\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n//\r\nfunction retweetAPI(postId){\r\n    return axios.post(`/post/${postId}/retweet`, {}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* retweet(action){\r\n    try{\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: e,\r\n        });\r\n        alert(e.response && e.response.data );\r\n    }\r\n}\r\nfunction* watchRetweet(){\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n//\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchloadMainPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadComments),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}