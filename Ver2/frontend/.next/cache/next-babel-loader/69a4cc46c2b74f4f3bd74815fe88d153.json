{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: false,\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중 \n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false,\n  singlePost: null // 개별포스트\n\n}; //메인 포스트를 로딩\n\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE'; //해시태그 검색했을때 결과 로딩\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE'; //사용자가 어떤 게시글을 썼는지 로딩\n\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'; //이미지 업로드\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; //이미지 업로드 취소(동기)\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'; //포스트 추가\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; //포스트에 LIKE 누르는 액션\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE'; //포스트에 LIKE 취소하는 액션\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE'; //게시글에 댓글 남기기\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //게시글 댓글 불러오기\n\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENT_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENT_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENT_FAILURE'; //리트윗 하는 액션\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE'; //포스트 제거하는 액션\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE'; //개별 포스트 불러오기\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        {\n          break;\n        }\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          // immer 적용(코드정리, 불변성 유지해줌), immer 에서 draft 상태 체크 후 바뀐부분을 state에 적용\n          action.data.forEach(p => {\n            draft.imagePaths.push(p);\n          });\n          break; // immer 적용 전 코드\n          // return {\n          //     ...state,\n          //     imagePaths:[...state.imagePaths, ...action.data], // 이미지 미리보기 할 수 있는 경로들\n          // }\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        {\n          break;\n        }\n      // 이미지 제거는 동기적으로 처리해도 되서 3분류안함\n\n      case REMOVE_IMAGE:\n        {\n          const index = draft.imagePaths.findIndex((v, i) => i === action.index);\n          draft.imagePaths.splice(index, 1);\n          break;\n        }\n      // 게시글 작성\n\n      case ADD_POST_REQUEST:\n        {\n          draft.isAddingPost = true;\n          draft.addPostErrorReason = '';\n          draft.postAdded = false;\n          break;\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.isAddingPost = false;\n          draft.mainPosts.unshift(action.data);\n          draft.postAdded = true;\n          draft.imagePaths = [];\n          break; // return {\n          //     ...state,\n          //     isAddingPost: false,\n          //     mainPosts: [action.data, ...state.mainPosts],\n          //     postAdded: true,\n          //     imagePaths: [],\n          // }\n        }\n\n      case ADD_POST_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isAddingPost: false,\n            addPostErrorReason: action.error\n          });\n        }\n      // 댓글 달기\n\n      case ADD_COMMENT_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isAddingComment: true,\n            addCommentErrorReason: '',\n            commentAdded: false\n          });\n        }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          // 어떤게시글에 댓글을 추가할지\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Comments.push(action.data.comment);\n          draft.isAddingComment = false;\n          draft.commentAdded = true;\n          break; // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // const Comments = [...post.Comments, action.data.comment];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = { ...post, Comments };\n          // return {\n          //   ...state,\n          //   isAddingComment: false,\n          //   mainPosts,\n          //   commentAdded: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isAddingComment: false,\n            addCommentErrorReason: action.error\n          });\n        }\n\n      case LOAD_COMMENTS_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Comments = action.data.comments;\n          break; // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // const Comments = action.data.comments;\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = { ...post, Comments };\n          // return {\n          //   ...state,\n          //   mainPosts,\n          // };\n        }\n\n      case LOAD_MAIN_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n        {\n          draft.mainPosts = !action.lastId ? [] : draft.mainPosts;\n          draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\n          break; // return {\n          //     ...state,\n          //     mainPosts: action.lastId === 0 ? [] : state.mainPosts,// 처음게시글 불러올땐 기존게시글 초기화,더 불러올땐 기존 게시글 유지(스크롤링) \n          //     hasMorePost : action.lastId ? state.hasMorePost : true, // 처음불러올땐 더보기 활성화 lastId = 0 (false), 더 불러오는 중일땐 기존상태 유지\n          // }\n        }\n\n      case LOAD_MAIN_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_USER_POSTS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: state.mainPosts.concat(action.data),\n            hasMorePost: action.data.length === 10\n          });\n        }\n\n      case LOAD_MAIN_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_USER_POSTS_FAILURE:\n        {\n          break;\n        }\n\n      case LIKE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case LIKE_POST_SUCCESS:\n        {\n          // 불변성때문에, 바뀔 객체만 새로 만들어줘야함\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Likers.unshift({\n            id: action.data.userId\n          });\n          break; // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\n          // const post = state.mainPosts[postIndex];\n          // const Likers = [{ id : action.data.userId }, ...post.Likers];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = {...post, Likers}; //불변성 유지 후 다시 구성하는 부분\n          // return {\n          //     ...state,\n          //     mainPosts,\n          // }\n        }\n\n      case LIKE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case UNLIKE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v => v.id === action.data.userId);\n          draft.mainPosts[postIndex].Likers.splice(likeIndex, 1);\n          break; // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\n          // const post = state.mainPosts[postIndex];\n          // const Likers = post.Likers.filter(v=> v.id !== action.data.userId); // 좋아요 목록중 내 아이디 제거 \n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = {...post, Likers};\n          // return {\n          //     ...state,\n          //     mainPosts,\n          // }\n        }\n\n      case UNLIKE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case RETWEET_REQUEST:\n        {\n          break;\n        }\n\n      case RETWEET_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: [action.data, ...state.mainPosts] // 기존 게시글 앞에 받아온 게시글을 받아오기\n\n          });\n        }\n\n      case RETWEET_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: state.mainPosts.filter(v => v.id !== action.data)\n          });\n        }\n\n      case REMOVE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case LOAD_POST_SUCCESS:\n        {\n          draft.singlePost = action.data;\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}