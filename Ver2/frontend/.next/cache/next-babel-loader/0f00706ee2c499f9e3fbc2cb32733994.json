{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {// (3) 서버에 요청을 보냄\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI); // (2)loginAPI 로 요청을 보냄\n\n    yield put({\n      type: LOG_IN_SUCCESS\n    }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\n  //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\n  while (true) {\n    // take : 해당 액션이 dispatch 되면 제너레이터를 next하는 이펙트\n    yield take(LOG_IN_REQUEST); // 사가 문법에서 put은 dispatch 와 동일\n\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\n\n}\n\nexport default function* userSaga() {\n  // fork, call : 함수 호출, fork는 비동기 호출\n  yield all([fork(watchLogin)]);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/frontend/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","login","type","e","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,QAAkE,oBAAlE;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,QAA+D,kBAA/D;;AACA,SAASC,QAAT,GAAmB,CACnB;AACC;;AACD,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMP,IAAI,CAACM,QAAD,CAAV,CADD,CACuB;;AACtB,UAAML,GAAG,CAAC;AACNO,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT,CAFD,CAIK;AACP,GALD,CAKC,OAAMK,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMR,GAAG,CAAC;AACNO,MAAAA,IAAI,EAACH;AADC,KAAD,CAAT;AAGH;AACJ;;AACD,UAAUO,UAAV,GAAsB;AAClB;AACA;AACA,SAAM,IAAN,EAAW;AACP;AACA,UAAMV,IAAI,CAACC,cAAD,CAAV,CAFO,CAGP;;AACA,UAAMF,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH,GAViB,CAWlB;;AACH;;AACD,eAAe,UAAUS,QAAV,GAAqB;AAChC;AACA,QAAMjB,GAAG,CAAC,CACNC,IAAI,CAACe,UAAD,CADE,CAAD,CAAT;AAGH;AAAA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\nfunction loginAPI(){\r\n// (3) 서버에 요청을 보냄\r\n}\r\nfunction* login(){ \r\n    try{\r\n        yield call(loginAPI); // (2)loginAPI 로 요청을 보냄\r\n        yield put({ \r\n            type:LOG_IN_SUCCESS\r\n        }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogin(){\r\n    //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\r\n    //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\r\n    while(true){\r\n        // take : 해당 액션이 dispatch 되면 제너레이터를 next하는 이펙트\r\n        yield take(LOG_IN_REQUEST);\r\n        // 사가 문법에서 put은 dispatch 와 동일\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    }\r\n    // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\r\n}\r\nexport default function* userSaga() {\r\n    // fork, call : 함수 호출, fork는 비동기 호출\r\n    yield all([\r\n        fork(watchLogin)\r\n    ])\r\n};\r\n"]},"metadata":{},"sourceType":"module"}