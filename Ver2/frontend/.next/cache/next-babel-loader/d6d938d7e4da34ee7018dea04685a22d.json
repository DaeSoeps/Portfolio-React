{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call, throttle } from 'redux-saga/effects';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from '../reducers/post';\nimport axios from 'axios';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\n\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      // post reducer 데이터를 수정\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      // user reducer 데이터를 수정\n      data: result.data.id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n} //\n\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n  // 게시글 하나도 안불러와져 있으면 0( 서버에서 0이면 처음부터 불러오게 하면됨)\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadMainPosts() {\n  yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts); //throttle: 한번 호출되고나서 같은 request가 2초간 호출되지 않음(스크롤링 이벤트 반복요청 방지)\n} //\n\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}`); //주소에 한글이 들어가면 에러가 날 수 있음\n} // function loadHashtagPostsAPI(data) {\n//     console.log(\"COME\", encodeURIComponent(data));\n//     return axios.get(`/hashtag/${encodeURIComponent(data)}`);\n//   }\n\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n} //\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id || 0}/posts`); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n} //\n\n\nfunction loadCommentsAPI(postId) {\n  console.log(postId, \"POST ID \");\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n} //\n\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data // 서버쪽 저장된 이미지 주소 받음(그 주소로 이미지 미리보기등 가능)\n\n    });\n  } catch (e) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n} //\n\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n} //\n\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n} //\n\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n} //\n\n\nfunction removePostAPI(postId) {\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //\n\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchloadMainPosts), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchLoadComments), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost)]);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","throttle","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_COMMENTS_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","axios","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","id","e","error","watchAddPost","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadMainPostsAPI","lastId","limit","get","loadMainPosts","watchloadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","loadCommentsAPI","console","log","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","alert","response","watchRetweet","removePostAPI","removePost","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call, throttle } from 'redux-saga/effects';\r\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n         ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS,\r\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, \r\n        LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_FAILURE, \r\n        LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST,\r\n        LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_COMMENTS_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST} from '../reducers/post';\r\nimport axios from 'axios';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(postData){\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true, //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\r\n    });\r\n}\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS, // post reducer 데이터를 수정\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type:ADD_POST_TO_ME, // user reducer 데이터를 수정\r\n            data: result.data.id,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n//\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, {content : data.content}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId: action.data.postId,\r\n                comment: result.data,\r\n            },\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n//\r\nfunction loadMainPostsAPI(lastId = 0, limit = 10){ // 게시글 하나도 안불러와져 있으면 0( 서버에서 0이면 처음부터 불러오게 하면됨)\r\n    return axios.get(`/posts?lastId=${lastId}&limit=${limit}`); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\r\n}\r\nfunction* loadMainPosts(action){\r\n    try{\r\n        const result = yield call(loadMainPostsAPI, action.lastId);\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data, \r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchloadMainPosts(){\r\n    yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts); //throttle: 한번 호출되고나서 같은 request가 2초간 호출되지 않음(스크롤링 이벤트 반복요청 방지)\r\n}\r\n//\r\n\r\nfunction loadHashtagPostsAPI(tag, lastId){\r\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}`); //주소에 한글이 들어가면 에러가 날 수 있음\r\n}\r\n// function loadHashtagPostsAPI(data) {\r\n//     console.log(\"COME\", encodeURIComponent(data));\r\n//     return axios.get(`/hashtag/${encodeURIComponent(data)}`);\r\n//   }\r\n\r\nfunction* loadHashtagPosts(action){\r\n    try{\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLoadHashtagPosts(){\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n//\r\n\r\n\r\nfunction loadUserPostsAPI(id){\r\n    return axios.get(`/user/${id || 0}/posts`); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\r\n}\r\nfunction* loadUserPosts(action){\r\n    try{\r\n        const result = yield call(loadUserPostsAPI, action.data);\r\n        yield put({\r\n            type:LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_USER_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLoadUserPosts(){\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n//\r\n\r\nfunction loadCommentsAPI(postId){\r\n    console.log(postId, \"POST ID \");\r\n    return axios.get(`/post/${postId}/comments`)\r\n}\r\nfunction* loadComments(action){\r\n    try{\r\n        const result = yield call(loadCommentsAPI, action.data);\r\n        yield put({\r\n            type:LOAD_COMMENTS_SUCCESS,\r\n            data:{\r\n                postId: action.data,\r\n                comments: result.data,\r\n            },\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_COMMENTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLoadComments(){\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\n//\r\nfunction uploadImagesAPI(formData){\r\n    return axios.post(`/post/images`, formData, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* uploadImages(action){\r\n    try{\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type:UPLOAD_IMAGES_SUCCESS,\r\n            data:result.data, // 서버쪽 저장된 이미지 주소 받음(그 주소로 이미지 미리보기등 가능)\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:UPLOAD_IMAGES_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchUploadImages(){\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n//\r\nfunction likePostAPI(postId){\r\n    return axios.post(`/post/${postId}/like`, {}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* likePost(action){\r\n    try{\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type:LIKE_POST_SUCCESS,\r\n            data:{\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LIKE_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n//\r\nfunction unlikePostAPI(postId){\r\n    return axios.delete(`/post/${postId}/like`, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* unlikePost(action){\r\n    try{\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type:UNLIKE_POST_SUCCESS,\r\n            data:{\r\n                postId: action.data,\r\n                userId: result.data.userId,\r\n            }\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:UNLIKE_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchUnlikePost(){\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n//\r\nfunction retweetAPI(postId){\r\n    return axios.post(`/post/${postId}/retweet`, {}, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* retweet(action){\r\n    try{\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: e,\r\n        });\r\n        alert(e.response && e.response.data );\r\n    }\r\n}\r\nfunction* watchRetweet(){\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n//\r\nfunction removePostAPI(postId){\r\n    return axios.delete(`/post/${postId}`, {\r\n        withCredentials: true,\r\n    })\r\n}\r\nfunction* removePost(action){\r\n    try{\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: e,\r\n        });\r\n        alert(e.response && e.response.data );\r\n    }\r\n}\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n//\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchloadMainPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadComments),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchRemovePost),\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}