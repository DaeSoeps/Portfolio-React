{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../containers/PostCard';\n\nvar Hashtag = function Hashtag(_ref) {\n  var tag = _ref.tag;\n  console.log(\"해쉬태그 페이지 tag:\", tag);\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePost = _useSelector.hasMorePost;\n\n  var onScroll = useCallback(function () {\n    //window.scrollY:현재위치, clientHeight: 스크롤바의 높이(현재화면), scrollHeight: 맨위에서 맨아래까지의 높이\n    // console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight)\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        // 더 불러올 게시글이 있을때 요청(스크롤 할때마다 요청하는 것을 방지)\n        dispatch({\n          type: LOAD_HASHTAG_POSTS_REQUEST,\n          lastId: mainPosts.length > 0 && mainPosts[mainPosts.length - 1].id,\n          // 마지막게시글 기준으로 다음게시글 불러옴(게시글 보고있는데 새 게시글이 추가되면, 밀려서 불러오게되서 마지막 게시글을 기준으로 계산해서 불러오기) \n          data: tag\n        });\n      }\n    }\n  }, [mainPosts.length, hasMorePost]);\n  useEffect(function () {\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      // 이벤트 사용하고 나서 꼭 정리해주자\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length]);\n  return __jsx(\"div\", null, mainPosts ? mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: c.id,\n      post: c\n    });\n  }) : null) // 강의에서는(6.3 18:49) ? 처리 안해줘도 됨, 나는 map undefined 에러, 왜 ?\n  ;\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired\n};\n\nHashtag.getInitialProps = function _callee(context) {\n  var tag;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          tag = context.query.tag;\n          console.log('hashtag props on hastag.js', context.query.tag, context); // 서버에서 라우팅받은 정보가 넘어오는지 확인, _app.js에서 또 추가해줌\n\n          context.store.dispatch({\n            type: LOAD_HASHTAG_POSTS_REQUEST,\n            data: tag\n          });\n          return _context.abrupt(\"return\", {\n            tag: tag\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Hashtag;","map":null,"metadata":{},"sourceType":"module"}