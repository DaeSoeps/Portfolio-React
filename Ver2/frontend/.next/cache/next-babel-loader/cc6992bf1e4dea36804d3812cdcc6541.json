{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { Input, Form, Button } from \"antd\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    imagePaths,\n    isAddingPost,\n    postAdded\n  } = useSelector(state => state.post);\n  const imageInput = useRef();\n  const onsubmitForm = useCallback(e => {\n    e.preventDefault(); // 이걸 안하면 새 페이지로 넘어감(싱글폼 들은 꼭 작성)\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성해주세요!');\n    }\n\n    const formData = new FormData(); // 게시글 최종적으로 올리는 용도, 필요는 없지만 upload.none 을 보여주기 위함(폼데이터 컨트롤)\n\n    imagePaths.forEach(i => {\n      formData.append('image', i);\n      formData.append('content', text);\n    });\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []); // 게시글 작성될때 작성폼 초기화\n\n  useEffect(() => {\n    setText('');\n  }, [postAdded === true]);\n  const onChangeImages = useCallback(e => {\n    console.log(e.target.files); // multipart/form-data 이미지나 파일, 동영상등을 서버로 보낼때 사용 \n    // multipart/form-data는 submit 시 서버로 데이터 전송 >>> 바로 보내지 않고 ajax로 보냄(spa 유지 위함) new FormData 이것도 ajax의 객체\n\n    const imageFormData = new FormData(); // 폼에서 타입을 encType=\"multipart/form-data\" 했을때 브라우저에서 FormData 객채를 제공.\n\n    [].forEach.call(e.target.files, f => {\n      // 그 FormData 객체안에 이미지파일을 각각 넣어줘야함\n      imageFormData.append('image', f); // 게시글 같이 보내지 않고 이미지만 미리 보냄(같이 보내면 효율이 좋지 않음)\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click(); // 이미지업로드 버튼을 눌렀을때 그위의 input 을 누름 효과\n  }, [imageInput.current]);\n  const onRemoveImage = useCallback(index => () => {\n    // 괄호가 있는 함수는 한번더 괄호를 붙여줘야함(고차함수)\n    dispatch({\n      type: REMOVE_IMAGE,\n      index\n    });\n  });\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20 px'\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onsubmitForm\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: \"right\"\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", null, imagePaths.map((v, i) => {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: \"inline-block\"\n      }\n    }, __jsx(\"img\", {\n      src: `http://localhost:3065/${v}`,\n      style: {\n        width: \"200px\"\n      },\n      alt: v\n    }), __jsx(\"div\", null, __jsx(Button, {\n      onClick: onRemoveImage(i)\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/components/PostForm.js"],"names":["React","useCallback","useState","useEffect","useRef","Input","Form","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","imagePaths","isAddingPost","postAdded","state","post","imageInput","onsubmitForm","e","preventDefault","trim","alert","formData","FormData","forEach","i","append","type","data","onChangeText","target","value","onChangeImages","console","log","files","imageFormData","call","f","onClickImageUpload","current","click","onRemoveImage","index","margin","float","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\r\nimport { Input, Form, Button } from \"antd\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE} from '../reducers/post';\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n  const onsubmitForm = useCallback((e)=>{\r\n    e.preventDefault(); // 이걸 안하면 새 페이지로 넘어감(싱글폼 들은 꼭 작성)\r\n    if(!text || !text.trim()){\r\n      return alert('게시글을 작성해주세요!');\r\n    }\r\n    const formData = new FormData(); // 게시글 최종적으로 올리는 용도, 필요는 없지만 upload.none 을 보여주기 위함(폼데이터 컨트롤)\r\n    imagePaths.forEach((i)=>{\r\n      formData.append('image', i);\r\n      formData.append('content', text);\r\n    })\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  },[text, imagePaths]);\r\n  const onChangeText= useCallback((e)=>{\r\n    setText(e.target.value);\r\n  },[]);\r\n  // 게시글 작성될때 작성폼 초기화\r\n  useEffect(()=>{\r\n    setText('')\r\n  },[postAdded === true]);\r\n\r\n  const onChangeImages = useCallback((e)=>{\r\n    console.log(e.target.files);\r\n    // multipart/form-data 이미지나 파일, 동영상등을 서버로 보낼때 사용 \r\n    // multipart/form-data는 submit 시 서버로 데이터 전송 >>> 바로 보내지 않고 ajax로 보냄(spa 유지 위함) new FormData 이것도 ajax의 객체\r\n    const imageFormData = new FormData(); // 폼에서 타입을 encType=\"multipart/form-data\" 했을때 브라우저에서 FormData 객채를 제공.\r\n    [].forEach.call(e.target.files, (f)=>{ // 그 FormData 객체안에 이미지파일을 각각 넣어줘야함\r\n      imageFormData.append( 'image', f); // 게시글 같이 보내지 않고 이미지만 미리 보냄(같이 보내면 효율이 좋지 않음)\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    })\r\n  }, []);\r\n\r\n  const onClickImageUpload =useCallback( () =>{\r\n    imageInput.current.click(); // 이미지업로드 버튼을 눌렀을때 그위의 input 을 누름 효과\r\n  }, [imageInput.current]);\r\n  const onRemoveImage = useCallback( index => () => { // 괄호가 있는 함수는 한번더 괄호를 붙여줘야함(고차함수)\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      index,\r\n    })\r\n  });\r\n    return (\r\n        <Form style={{ margin: '10px 0 20 px' }} encType=\"multipart/form-data\" onSubmit={onsubmitForm}>\r\n        <Input.TextArea\r\n          maxLength={140}\r\n          placeholder=\"어떤 신기한 일이 있었나요?\"\r\n          value={text}\r\n          onChange={onChangeText}\r\n        ></Input.TextArea>\r\n        <div>\r\n          <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages}></input>\r\n          <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n          <Button\r\n            type=\"primary\"\r\n            style={{ float: \"right\" }}\r\n            htmlType=\"submit\"\r\n            loading={isAddingPost}\r\n          >\r\n            짹짹\r\n          </Button>\r\n        </div>\r\n        <div>\r\n          {imagePaths.map((v,i) => {\r\n            return (\r\n              <div key={v} style={{ display: \"inline-block\" }}>\r\n                <img\r\n                  src={`http://localhost:3065/${v}`}\r\n                  style={{ width: \"200px\" }}\r\n                  alt={v}\r\n                ></img>\r\n                <div>\r\n                  <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Form>\r\n    )\r\n}\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}