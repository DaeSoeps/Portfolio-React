{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { Input, Form, Button } from \"antd\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n  var onsubmitForm = useCallback(function (e) {\n    e.preventDefault(); // 이걸 안하면 새 페이지로 넘어감(싱글폼 들은 꼭 작성)\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성해주세요!');\n    }\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        content: text.trim()\n      }\n    });\n  }, [text]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []); // 게시글 작성될때 작성폼 초기화\n\n  useEffect(function () {\n    setText('');\n  }, [postAdded === true]);\n  var onChangeImages = useCallback(function (e) {\n    console.log(e.target.files); // multipart/form-data 이미지나 파일, 동영상등을 서버로 보낼때 사용 \n    // multipart/form-data는 submit 시 서버로 데이터 전송 >>> 바로 보내지 않고 ajax로 보냄(spa 유지 위함) new FormData 이것도 ajax의 객체\n\n    var imageFormData = new FormData(); // 폼에서 타입을 encType=\"multipart/form-data\" 했을때 브라우저에서 FormData 객채를 제공.\n\n    [].forEach.call(e.target.files, function (f) {\n      // 그 FormData 객체안에 이미지파일을 각각 넣어줘야함\n      imageFormData.append('image', f); // 게시글 같이 보내지 않고 이미지만 미리 보냄(같이 보내면 효율이 좋지 않음)\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click(); // 이미지업로드 버튼을 눌렀을때 그위의 input 을 누름 효과\n  }, [imageInput.current]);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20 px'\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onsubmitForm\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: \"right\"\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", null, imagePaths.map(function (v) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: \"inline-block\"\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\",\n      style: {\n        width: \"200px\"\n      },\n      alt: v\n    }), __jsx(\"div\", null, __jsx(Button, null, \"\\uC81C\\uAC70\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/components/PostForm.js"],"names":["React","useCallback","useState","useEffect","useRef","Input","Form","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","postAdded","imageInput","onsubmitForm","e","preventDefault","trim","alert","type","data","content","onChangeText","target","value","onChangeImages","console","log","files","imageFormData","FormData","forEach","call","f","append","onClickImageUpload","current","click","margin","float","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\r\nimport { Input, Form, Button } from \"antd\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST} from '../reducers/post';\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n  const onsubmitForm = useCallback((e)=>{\r\n    e.preventDefault(); // 이걸 안하면 새 페이지로 넘어감(싱글폼 들은 꼭 작성)\r\n    if(!text || !text.trim()){\r\n      return alert('게시글을 작성해주세요!');\r\n    }\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data:{\r\n        content: text.trim(),\r\n      },\r\n    });\r\n  },[text]);\r\n  const onChangeText= useCallback((e)=>{\r\n    setText(e.target.value);\r\n  },[]);\r\n  // 게시글 작성될때 작성폼 초기화\r\n  useEffect(()=>{\r\n    setText('')\r\n  },[postAdded === true]);\r\n\r\n  const onChangeImages = useCallback((e)=>{\r\n    console.log(e.target.files);\r\n    // multipart/form-data 이미지나 파일, 동영상등을 서버로 보낼때 사용 \r\n    // multipart/form-data는 submit 시 서버로 데이터 전송 >>> 바로 보내지 않고 ajax로 보냄(spa 유지 위함) new FormData 이것도 ajax의 객체\r\n    const imageFormData = new FormData(); // 폼에서 타입을 encType=\"multipart/form-data\" 했을때 브라우저에서 FormData 객채를 제공.\r\n    [].forEach.call(e.target.files, (f)=>{ // 그 FormData 객체안에 이미지파일을 각각 넣어줘야함\r\n      imageFormData.append( 'image', f); // 게시글 같이 보내지 않고 이미지만 미리 보냄(같이 보내면 효율이 좋지 않음)\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    })\r\n  }, []);\r\n\r\n  const onClickImageUpload =useCallback( () =>{\r\n    imageInput.current.click(); // 이미지업로드 버튼을 눌렀을때 그위의 input 을 누름 효과\r\n  }, [imageInput.current]);\r\n    return (\r\n        <Form style={{ margin: '10px 0 20 px' }} encType=\"multipart/form-data\" onSubmit={onsubmitForm}>\r\n        <Input.TextArea\r\n          maxLength={140}\r\n          placeholder=\"어떤 신기한 일이 있었나요?\"\r\n          value={text}\r\n          onChange={onChangeText}\r\n        ></Input.TextArea>\r\n        <div>\r\n          <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages}></input>\r\n          <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n          <Button\r\n            type=\"primary\"\r\n            style={{ float: \"right\" }}\r\n            htmlType=\"submit\"\r\n            loading={isAddingPost}\r\n          >\r\n            짹짹\r\n          </Button>\r\n        </div>\r\n        <div>\r\n          {imagePaths.map((v) => {\r\n            return (\r\n              <div key={v} style={{ display: \"inline-block\" }}>\r\n                <img\r\n                  src={\"http://localhost:3065/\"}\r\n                  style={{ width: \"200px\" }}\r\n                  alt={v}\r\n                ></img>\r\n                <div>\r\n                  <Button>제거</Button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Form>\r\n    )\r\n}\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}