{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\naxios.defaults.baseURL = 'http://localhost:3065/api'; // 한번 불러온 모듈은 캐싱이 되서, 모든 axios에 적용됨(다른곳에 선언하지 않아도됨)\n// 로그인 부분 -------------------------------------\n\nfunction logInAPI(loginData) {\n  // (3) 서버에 요청을 보냄\n  // loginData: userid, password\n  return axios.post('/user/login', loginData, {\n    withCredentials: true // (프론트)쿠키를 주고받을 수 있음, 서버쪽은 cors 로 설정\n\n  });\n}\n\nfunction* logIn(action) {\n  // 사가 패턴 3. 어떤 동작할지 결정\n  try {\n    const result = yield call(logInAPI, action.data); // (2)loginAPI 로 요청을 보냄\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // 사가 패턴 2. takeEvery, Latest 여부 결정\n  //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\n  //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\n  // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n} // 로그인 부분 -------------------------------------\n// 회원 가입 부분 -------------------------------------\n\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n} // 회원 가입 부분 -------------------------------------\n// 로그 아웃 부분 -------------------------------------\n\n\nfunction logOutAPI() {\n  // 로그아웃은 쿠키가 있으므로 데이터 받을게 없음, 대신 쿠키를 도메인이 다른 서버로 보내주려면 크리덴셜스 추가\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n} // 로그 아웃 부분 -------------------------------------\n// 사용자정보 불러오기 부분 -------------------------------------\n\n\nfunction loadUserAPI() {\n  // 세션쿠키 서버로 보냄 > 유효한 쿠키면 데이터 전달함\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n} // 사용자정보 불러오기 부분 -------------------------------------\n\n\nexport default function* userSaga() {\n  // 사가 패턴 1. 함수 등록\n  // fork, call : 함수 호출, fork는 비동기 호출\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/frontend/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","defaults","baseURL","logInAPI","loginData","post","withCredentials","logIn","action","result","data","type","e","console","error","watchLogIn","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n         SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, \r\n         LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n         LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE} from '../reducers/user';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3065/api';// 한번 불러온 모듈은 캐싱이 되서, 모든 axios에 적용됨(다른곳에 선언하지 않아도됨)\r\n\r\n// 로그인 부분 -------------------------------------\r\nfunction logInAPI(loginData){\r\n// (3) 서버에 요청을 보냄\r\n    // loginData: userid, password\r\n    return axios.post('/user/login', loginData , {\r\n        withCredentials: true, // (프론트)쿠키를 주고받을 수 있음, 서버쪽은 cors 로 설정\r\n    });\r\n}\r\nfunction* logIn(action){ \r\n    // 사가 패턴 3. 어떤 동작할지 결정\r\n    try{\r\n        const result =  yield call(logInAPI, action.data); // (2)loginAPI 로 요청을 보냄\r\n        yield put({ \r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogIn(){\r\n    // 사가 패턴 2. takeEvery, Latest 여부 결정\r\n    //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\r\n    //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\r\n    // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\r\n    yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n// 로그인 부분 -------------------------------------\r\n// 회원 가입 부분 -------------------------------------\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/user/', signUpData);\r\n}\r\nfunction* signUp(action){ \r\n    try{\r\n        yield call(signUpAPI , action.data); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:SIGN_UP_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n// 회원 가입 부분 -------------------------------------\r\n// 로그 아웃 부분 -------------------------------------\r\nfunction logOutAPI(){\r\n    // 로그아웃은 쿠키가 있으므로 데이터 받을게 없음, 대신 쿠키를 도메인이 다른 서버로 보내주려면 크리덴셜스 추가\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\nfunction* logOut(){ \r\n    try{\r\n        yield call(logOutAPI); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:LOG_OUT_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_OUT_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut)\r\n}\r\n// 로그 아웃 부분 -------------------------------------\r\n// 사용자정보 불러오기 부분 -------------------------------------\r\nfunction loadUserAPI(){\r\n    // 세션쿠키 서버로 보냄 > 유효한 쿠키면 데이터 전달함\r\n    return axios.get('/user/', {\r\n        withCredentials : true,\r\n    });\r\n}\r\nfunction* loadUser(){ \r\n    try{\r\n        const result = yield call(loadUserAPI); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:LOAD_USER_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser)\r\n}\r\n// 사용자정보 불러오기 부분 -------------------------------------\r\n \r\nexport default function* userSaga() {\r\n    // 사가 패턴 1. 함수 등록\r\n    // fork, call : 함수 호출, fork는 비동기 호출\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n    ])\r\n};\r\n"]},"metadata":{},"sourceType":"module"}