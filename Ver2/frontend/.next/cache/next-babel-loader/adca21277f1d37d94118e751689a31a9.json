{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSelector } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport post, { LOAD_POST_REQUEST } from '../reducers/post';\nimport Helmet from 'react-helmet';\n\nvar Post = function Post(_ref) {\n  var id = _ref.id;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      singlePost = _useSelector.singlePost;\n\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    title: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAE00\"),\n    description: singlePost.content,\n    meta: [{\n      name: 'description',\n      content: singlePost.content\n    }, {\n      property: 'og:title',\n      content: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n    }, {\n      property: 'og:description',\n      content: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n    }, {\n      property: 'og:image',\n      content: singlePost.Images[0] && \"http://localhost:3065/\".concat(post.Images[0].src)\n    }, {\n      property: 'og:url',\n      content: \"http://localhost:3060/post/\".concat(id)\n    }]\n  }, __jsx(\"div\", null, singlePost.content), __jsx(\"div\", null, singlePost.User.nickname), __jsx(\"div\", null, singlePost.Images[0] && __jsx(\"img\", {\n    src: \"http://localhost:3065/\".concat(singlePost.Images[0].src)\n  }))));\n};\n\nPost.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          context.store.dispatch({\n            type: LOAD_POST_REQUEST,\n            data: context.query.id\n          });\n          return _context.abrupt(\"return\", {\n            id: _parseInt(context.query.id, 10)\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nPost.propTypes = {\n  id: PropTypes.number.isRequired\n};\nexport default Post;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/post.js"],"names":["React","useSelector","PropTypes","post","LOAD_POST_REQUEST","Helmet","Post","id","state","singlePost","User","nickname","content","name","property","Images","src","getInitialProps","context","store","dispatch","type","data","query","propTypes","number","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,IAAeC,iBAAf,QAAwC,kBAAxC;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAW;AAAA,MAARC,EAAQ,QAARA,EAAQ;;AAAA,qBACGN,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACL,IAAV;AAAA,GAAN,CADd;AAAA,MACZM,UADY,gBACZA,UADY;;AAEpB,SACI,4BACI,MAAC,MAAD;AACI,IAAA,KAAK,YAAKA,UAAU,CAACC,IAAX,CAAgBC,QAArB,wBADT;AAEI,IAAA,WAAW,EAAEF,UAAU,CAACG,OAF5B;AAGI,IAAA,IAAI,EAAE,CAAC;AACHC,MAAAA,IAAI,EAAC,aADF;AACiBD,MAAAA,OAAO,EAAEH,UAAU,CAACG;AADrC,KAAD,EAEJ;AACEE,MAAAA,QAAQ,EAAC,UADX;AACuBF,MAAAA,OAAO,YAAKH,UAAU,CAACC,IAAX,CAAgBC,QAArB;AAD9B,KAFI,EAIJ;AACEG,MAAAA,QAAQ,EAAC,gBADX;AAC6BF,MAAAA,OAAO,YAAKH,UAAU,CAACC,IAAX,CAAgBC,QAArB;AADpC,KAJI,EAMJ;AACEG,MAAAA,QAAQ,EAAC,UADX;AACuBF,MAAAA,OAAO,EAAEH,UAAU,CAACM,MAAX,CAAkB,CAAlB,qCAAiDZ,IAAI,CAACY,MAAL,CAAY,CAAZ,EAAeC,GAAhE;AADhC,KANI,EAQJ;AACEF,MAAAA,QAAQ,EAAC,QADX;AACqBF,MAAAA,OAAO,uCAAgCL,EAAhC;AAD5B,KARI;AAHV,KAgBI,mBAAOE,UAAU,CAACG,OAAlB,CAhBJ,EAiBI,mBAAOH,UAAU,CAACC,IAAX,CAAgBC,QAAvB,CAjBJ,EAkBI,mBACMF,UAAU,CAACM,MAAX,CAAkB,CAAlB,KAAwB;AAAK,IAAA,GAAG,kCAA2BN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBC,GAAhD;AAAR,IAD9B,CAlBJ,CADJ,CADJ;AA0BH,CA5BD;;AA6BAV,IAAI,CAACW,eAAL,GAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACnBA,UAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuB;AACnBC,YAAAA,IAAI,EAAEjB,iBADa;AAEnBkB,YAAAA,IAAI,EAAEJ,OAAO,CAACK,KAAR,CAAchB;AAFD,WAAvB;AADmB,2CAKZ;AAAEA,YAAAA,EAAE,EAAE,UAASW,OAAO,CAACK,KAAR,CAAchB,EAAvB,EAA2B,EAA3B;AAAN,WALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAOAD,IAAI,CAACkB,SAAL,GAAiB;AACbjB,EAAAA,EAAE,EAAEL,SAAS,CAACuB,MAAV,CAAiBC;AADR,CAAjB;AAGA,eAAepB,IAAf","sourcesContent":["import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport post, { LOAD_POST_REQUEST } from '../reducers/post';\r\nimport Helmet from 'react-helmet';\r\nconst Post = ({ id }) =>{\r\n    const { singlePost } = useSelector(state => state.post);\r\n    return (\r\n        <>\r\n            <Helmet\r\n                title={`${singlePost.User.nickname}님의 글`}\r\n                description={singlePost.content}\r\n                meta={[{\r\n                    name:'description', content: singlePost.content,\r\n                },{\r\n                    property:'og:title', content: `${singlePost.User.nickname}님의 게시글`,\r\n                },{\r\n                    property:'og:description', content: `${singlePost.User.nickname}님의 게시글`,\r\n                },{\r\n                    property:'og:image', content: singlePost.Images[0] && `http://localhost:3065/${post.Images[0].src}`,\r\n                },{\r\n                    property:'og:url', content: `http://localhost:3060/post/${id}`,\r\n                }\r\n                ]}\r\n            >\r\n                <div>{ singlePost.content}</div>\r\n                <div>{ singlePost.User.nickname}</div>\r\n                <div>\r\n                    { singlePost.Images[0] && <img src={`http://localhost:3065/${singlePost.Images[0].src}`} />}\r\n                </div>\r\n            </Helmet>\r\n        </>\r\n    )\r\n}\r\nPost.getInitialProps = async (context)=>{\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.query.id,\r\n    });\r\n    return { id: parseInt(context.query.id, 10)};\r\n}\r\nPost.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n};\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}