{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst dummyUser = {\n  nickname: \"Guest\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {},\n  id: 1\n};\nexport const initialState = {\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  logInErrorReason: '',\n  // 로그인 실패 사유\n  isSignedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  singUpErrorReason: '',\n  // 회원가입 실패 사유 \n  me: null,\n  // 내정보\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null // 남의 정보\n\n}; // 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\n//회원가입\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; //로그인\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; //사용자 정보 불러오기\n\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE'; //로그아웃\n\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; //팔로워들 목록\n\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE'; //팔로잉 목록\n\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE'; //다른 사람을 팔로우\n\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE'; //다른 사람을 언팔로우\n\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE'; //팔로우한 사람을 제거\n\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE'; //리듀서의 단점때문에 만들어야 됨\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: true,\n          logInErrorReason: ''\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          me: action.data,\n          isLoading: false\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggingIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: true // 로그아웃버튼 로딩\n\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false,\n          me: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: true,\n          isSignedUp: false,\n          singUpErrorReason: ''\n        });\n      }\n\n    case SIGN_UP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data,\n          isSigningUp: false,\n          isSignedUp: true\n        });\n      }\n\n    case SIGN_UP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data,\n          isSigningUp: false,\n          singUpErrorReason: action.error\n        });\n      }\n\n    case LOAD_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_USER_SUCCESS:\n      {\n        if (action.me) {\n          return _objectSpread({}, state, {\n            me: action.data\n          });\n        }\n      }\n\n    case LOAD_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case FOLLOW_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case FOLLOW_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followings: [{\n              id: action.data\n            }, ...state.me.Followings] //아이디 목록에 팔로윙한 사람 추가(나)\n\n          })\n        });\n      }\n\n    case FOLLOW_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNFOLLOW_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNFOLLOW_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followings: state.me.Followings.filter(v => v.id !== action.data) //아이디 목록에 팔로윙한 사람 추가(나)\n\n          }),\n          followingList: state.followerList.filter(v => v.id !== action.data)\n        });\n      }\n\n    case UNFOLLOW_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWERS_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWERS_SUCCESS:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWERS_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          followerList: action.data\n        });\n      }\n\n    case LOAD_FOLLOWINGS_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWINGS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          followerList: action.data\n        });\n      }\n\n    case LOAD_FOLLOWINGS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_FOLLOWER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_FOLLOWER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followers: state.me.Followers.filter(v => v.id !== action.data) //아이디 목록에 팔로윙한 사람 추가(나)\n\n          }),\n          followerList: state.followerList.filter(v => v.id !== action.data)\n        });\n      }\n\n    case REMOVE_FOLLOWER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_POST_TO_ME:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Posts: [{\n              id: action.data\n            }, ...state.me.Posts]\n          })\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","signUpData","id","initialState","isLoggingOut","isLoggingIn","logInErrorReason","isSignedUp","isSigningUp","singUpErrorReason","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","reducer","state","action","type","data","isLoading","error","filter","v","Posts"],"mappings":"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","sourcesContent":["const dummyUser = {\r\n    nickname: \"Guest\",\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n    signUpData: {},\r\n    id:1,\r\n};\r\n\r\nexport const initialState = {\r\n    isLoggingOut: false, // 로그아웃 시도중\r\n    isLoggingIn: false, // 로그인 시도중\r\n    logInErrorReason: '', // 로그인 실패 사유\r\n    isSignedUp: false, // 회원가입 성공\r\n    isSigningUp: false, // 회원가입 시도중\r\n    singUpErrorReason: '', // 회원가입 실패 사유 \r\n    me: null, // 내정보\r\n    followingList: [], // 팔로잉 리스트\r\n    followerList: [],  // 팔로워 리스트\r\n    userInfo: null // 남의 정보\r\n};\r\n// 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\r\n//회원가입\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST'; \r\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS'; \r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; \r\n//로그인\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; \r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n//사용자 정보 불러오기\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST'; \r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n//로그아웃\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n//팔로워들 목록\r\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\r\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\r\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\r\n//팔로잉 목록\r\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\r\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\r\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\r\n//다른 사람을 팔로우\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n//다른 사람을 언팔로우\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n//팔로우한 사람을 제거\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n//리듀서의 단점때문에 만들어야 됨\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\n\r\n\r\nconst reducer = ( state = initialState, action) => {\r\n    switch (action.type){\r\n        case LOG_IN_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoggingIn: true,\r\n                logInErrorReason :'',               \r\n            };\r\n        }\r\n        case LOG_IN_SUCCESS :{\r\n            return{\r\n                ...state,\r\n                isLoggingIn: false,\r\n                me : action.data,\r\n                isLoading: false,\r\n            };\r\n        }\r\n        case LOG_IN_FAILURE :{\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                logInErrorReason : action.error,\r\n                me : null,\r\n            }\r\n        }\r\n        case LOG_OUT_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoggingOut : true, // 로그아웃버튼 로딩\r\n            };\r\n        }\r\n        case LOG_OUT_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoggingOut: false,\r\n                me : null\r\n            };\r\n        }\r\n        case SIGN_UP_REQUEST: {\r\n            return{\r\n                ...state,\r\n                isSigningUp : true,\r\n                isSignedUp : false,\r\n                singUpErrorReason : '',\r\n            };\r\n        }\r\n        case SIGN_UP_SUCCESS: {\r\n            return{\r\n                ...state,\r\n                signUpData: action.data,\r\n                isSigningUp : false,\r\n                isSignedUp : true,\r\n            };\r\n        }\r\n        case SIGN_UP_FAILURE: {\r\n            return{\r\n                ...state,\r\n                signUpData: action.data,\r\n                isSigningUp : false,\r\n                singUpErrorReason : action.error,\r\n            };\r\n        }\r\n        case LOAD_USER_REQUEST: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_USER_SUCCESS: {\r\n            if(action.me){\r\n                return{\r\n                    ...state,\r\n                    me: action.data,\r\n                };\r\n            }\r\n        }\r\n        case LOAD_USER_FAILURE: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case FOLLOW_USER_REQUEST: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case FOLLOW_USER_SUCCESS: {\r\n            return{\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Followings:[{ id: action.data }, ...state.me.Followings],//아이디 목록에 팔로윙한 사람 추가(나)\r\n                }\r\n            };\r\n        }\r\n        case FOLLOW_USER_FAILURE: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case UNFOLLOW_USER_REQUEST: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case UNFOLLOW_USER_SUCCESS: {\r\n            return{\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Followings: state.me.Followings.filter(v => v.id !== action.data),//아이디 목록에 팔로윙한 사람 추가(나)\r\n                },\r\n                followingList: state.followerList.filter(v => v.id !== action.data),\r\n            };\r\n        }\r\n        case UNFOLLOW_USER_FAILURE: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_FOLLOWERS_REQUEST: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_FOLLOWERS_SUCCESS: {\r\n            return{\r\n                ...state,\r\n                \r\n            };\r\n        }\r\n        case LOAD_FOLLOWERS_FAILURE: {\r\n            return{\r\n                ...state,\r\n                followerList : action.data,\r\n            };\r\n        }\r\n        case LOAD_FOLLOWINGS_REQUEST: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_FOLLOWINGS_SUCCESS: {\r\n            return{\r\n                ...state,\r\n                followerList : action.data,\r\n            };\r\n        }\r\n        case LOAD_FOLLOWINGS_FAILURE: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case REMOVE_FOLLOWER_REQUEST: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case REMOVE_FOLLOWER_SUCCESS: {\r\n            return{\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Followers: state.me.Followers.filter(v => v.id !== action.data),//아이디 목록에 팔로윙한 사람 추가(나)\r\n                },\r\n                followerList: state.followerList.filter(v => v.id !== action.data),\r\n            };\r\n        }\r\n        case REMOVE_FOLLOWER_FAILURE: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case ADD_POST_TO_ME:{\r\n            return {\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Posts: [{ id: action.data}, ...state.me.Posts],\r\n                }\r\n            }\r\n        }\r\n        default: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n    } \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}