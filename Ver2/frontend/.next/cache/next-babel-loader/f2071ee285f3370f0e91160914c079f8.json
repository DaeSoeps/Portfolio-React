{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Input, List, Form, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\nimport Link from 'next/link';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispath = useDispatch();\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  const onToggleComment = useCallback(() => {\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      // 댓글창이 닫혀있는 경우\n      dispath({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispath({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\n\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // Likers : 좋아요 누른 사람들 배열로 들어있음\n      console.log(\"LIKE TRUE\", liked);\n      dispath({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      console.log(\"LIKE FALSE\", liked);\n      dispath({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  return __jsx(\"div\", null, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))) // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\n    ,\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(v => {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: `/hashtag/${v.slice}`,\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    })) // 게시물의 해쉬태그에 링크 걸어줘야함 (a tag로 하면 리액트 오류남, next의 Link tag 사용)\n\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Input","List","Form","Comment","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","PostImages","Link","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispath","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","console","log","createdAt","Images","pathname","query","User","nickname","split","map","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img","isRequired"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\r\nimport { Card , Icon, Button, Avatar, Input, List, Form, Comment} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST } from '../reducers/post';\r\nimport PostImages from './PostImages';\r\nimport Link from 'next/link';\r\nconst PostCard = ( { post}) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me }= useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment }= useSelector(state => state.post);\r\n  const dispath = useDispatch();\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n  const onToggleComment = useCallback(() => {\r\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\r\n    setCommentFormOpened(prev =>!prev);\r\n    if(!commentFormOpened){ // 댓글창이 닫혀있는 경우\r\n      dispath({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, []);\r\n  const onSubmitComment = useCallback((e) =>{\r\n    e.preventDefault();\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    dispath({\r\n      type:ADD_COMMENT_REQUEST,\r\n      data:{\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\r\n  const onChangeCommentText = useCallback((e) =>{\r\n    setCommentText(e.target.value);\r\n  },[]);\r\n  useEffect(()=>{\r\n    setCommentText('');\r\n  },[commentAdded ===true]);\r\n\r\n  const onToggleLike = useCallback( () =>{\r\n    if(!me){\r\n      return alert('로그인이 필요합니다!');\r\n    }\r\n    if(liked){  // Likers : 좋아요 누른 사람들 배열로 들어있음\r\n      console.log(\"LIKE TRUE\", liked);\r\n      dispath({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }else{ // 좋아요 안 누른 상태\r\n      console.log(\"LIKE FALSE\", liked);\r\n      dispath({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, [me && me.id, post && post.id, liked])\r\n  return (\r\n    <div>\r\n    <Card\r\n    key={+post.createdAt}\r\n    cover={post.Images[0] && <PostImages images={post.Images}></PostImages>}\r\n    actions={[\r\n      <Icon type=\"retweet\" key=\"retweet\"></Icon>,\r\n      <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor=\"#eb2f96\" onClick={onToggleLike}></Icon>,\r\n      <Icon type=\"message\" key=\"message\" onClick={onToggleComment}></Icon>,\r\n      <Icon type=\"ellipsis\" key=\"ellipsis\"></Icon>\r\n    ]}\r\n    extra={<Button>팔로우</Button>}\r\n  >\r\n    <Card.Meta\r\n      avatar={<Link href={{ \r\n        pathname: '/user', \r\n        query: { id: post.User.id } }} as={`/user/${post.User.id}`}> \r\n        <a><Avatar>{post.User.nickname[0]}</Avatar></a> \r\n        </Link>\r\n      } // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\r\n      title={post.User.nickname}\r\n      description={(\r\n      <div>\r\n        {post.content.split(/(#[^\\s]+)/g).map((v)=>{\r\n          if(v.match(/#[^\\s]+/)){\r\n            return (\r\n              <Link\r\n              href={{ pathname: '/hashtag', query: { tag: v.slice(1) }}} as={`/hashtag/${v.slice}`}\r\n              key={v}\r\n            >\r\n              <a>{v}</a>\r\n            </Link>\r\n            );\r\n          }\r\n          return v;\r\n      })}\r\n      </div>\r\n      )} // 게시물의 해쉬태그에 링크 걸어줘야함 (a tag로 하면 리액트 오류남, next의 Link tag 사용)\r\n    ></Card.Meta>\r\n  </Card>\r\n  {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(<Link href={{ \r\n                    pathname: '/user', \r\n                    query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                  )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPostCard.propTypes = {\r\n  post : PropTypes.shape({\r\n   User : PropTypes.object,\r\n   content : PropTypes.string,\r\n   img : PropTypes.string,\r\n   createdAt : PropTypes.object,\r\n  }).isRequired,\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}