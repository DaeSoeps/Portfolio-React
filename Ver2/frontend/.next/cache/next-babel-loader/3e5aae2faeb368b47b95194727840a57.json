{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\nimport PostCard from '../components/PostCard';\n\nvar Hashtag = function Hashtag(_ref) {\n  var tag = _ref.tag;\n  console.log(tag);\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      mainPosts = _useSelector.mainPosts;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_HASHTAG_POSTS_REQUEST,\n      data: tag\n    });\n  }, []);\n  return __jsx(\"div\", null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: +c.createdAt,\n      post: c\n    });\n  }));\n};\n\nHashtag.propTypes = {\n  tag: PropTypes.string.isRequired\n};\n\nHashtag.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('hashtag props', context.query.tag); // 서버에서 라우팅받은 정보가 넘어오는지 확인, _app.js에서 또 추가해줌\n\n          return _context.abrupt(\"return\", {\n            tag: context.query.tag\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Hashtag;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/hashtag.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","LOAD_HASHTAG_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","PostCard","Hashtag","tag","console","log","dispatch","state","user","mainPosts","type","data","map","c","createdAt","propTypes","string","isRequired","getInitialProps","context","query"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,0BAAT,EAAqCC,uBAArC,QAAoE,kBAApE;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAW;AAAA,MAATC,GAAS,QAATA,GAAS;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,MAAMG,QAAQ,GAAGT,WAAW,EAA5B;;AAFuB,qBAGDC,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAHV;AAAA,MAGfC,SAHe,gBAGfA,SAHe;;AAIvBd,EAAAA,SAAS,CAAE,YAAK;AACZW,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEX,0BADD;AAELY,MAAAA,IAAI,EAAER;AAFD,KAAD,CAAR;AAIH,GALQ,EAKN,EALM,CAAT;AAMA,SACI,mBACKM,SAAS,CAACG,GAAV,CAAc,UAAAC,CAAC;AAAA,WACZ,MAAC,QAAD;AAAU,MAAA,GAAG,EAAE,CAACA,CAAC,CAACC,SAAlB;AAA6B,MAAA,IAAI,EAAED;AAAnC,MADY;AAAA,GAAf,CADL,CADJ;AAOH,CAjBD;;AAkBAX,OAAO,CAACa,SAAR,GAAoB;AAChBZ,EAAAA,GAAG,EAAEP,SAAS,CAACoB,MAAV,CAAiBC;AADN,CAApB;;AAIAf,OAAO,CAACgB,eAAR,GAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACtBf,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA8Bc,OAAO,CAACC,KAAR,CAAcjB,GAA5C,EADsB,CAC4B;;AAD5B,2CAEf;AAAEA,YAAAA,GAAG,EAAEgB,OAAO,CAACC,KAAR,CAAcjB;AAArB,WAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAIA,eAAeD,OAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOAD_HASHTAG_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\r\nimport PostCard from '../components/PostCard';\r\nconst Hashtag = ({tag}) => {\r\n    console.log(tag);\r\n    const dispatch = useDispatch();\r\n    const { mainPosts } = useSelector(state => state.user);\r\n    useEffect( ()=> {\r\n        dispatch({\r\n            type: LOAD_HASHTAG_POSTS_REQUEST,\r\n            data: tag,\r\n        })\r\n    }, []);\r\n    return(\r\n        <div>\r\n            {mainPosts.map(c=>(\r\n                <PostCard key={+c.createdAt} post={c}></PostCard>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\nHashtag.propTypes = {\r\n    tag: PropTypes.string.isRequired, \r\n}\r\n\r\nHashtag.getInitialProps = async (context) => {\r\n    console.log('hashtag props' , context.query.tag); // 서버에서 라우팅받은 정보가 넘어오는지 확인, _app.js에서 또 추가해줌\r\n    return { tag: context.query.tag};\r\n};\r\nexport default Hashtag;"]},"metadata":{},"sourceType":"module"}