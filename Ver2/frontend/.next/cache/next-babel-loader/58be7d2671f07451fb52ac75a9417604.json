{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\nimport axios from 'axios';\nimport { Result } from 'antd';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\n\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI() {\n  return axios.get('/posts');\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, addComment);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts'); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchloadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchloadMainPosts)]);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","call","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","axios","Result","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","addCommentAPI","get","addComment","postId","watchAddComment","loadMainPostsAPI","loadMainPosts","watchloadMainPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\r\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n         ADD_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_SUCCESS,\r\n        LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE} from '../reducers/post';\r\nimport axios from 'axios';\r\nimport { Result } from 'antd';\r\n\r\nfunction addPostAPI(postData){\r\n    return axios.post('/post', postData, {\r\n        withCredentials: true, //로그인한 사람만 글을 쓸 수 있어서 쿠키를 같이 보내줌(로그인 인증을 했는지 여부 검토)\r\n    });\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n\r\n\r\nfunction addCommentAPI(){\r\n    return axios.get('/posts')\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId: action.data.postId,\r\n            },\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, addComment);\r\n}\r\n\r\n\r\nfunction loadMainPostsAPI(){\r\n    return axios.get('/posts'); // 게시글을 보는정도의 api는 크리덴셜 안넣어줘도 무방\r\n}\r\nfunction* loadMainPosts(){\r\n    try{\r\n        const result = yield call(loadMainPostsAPI);\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch(e){\r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchloadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchloadMainPosts),\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}