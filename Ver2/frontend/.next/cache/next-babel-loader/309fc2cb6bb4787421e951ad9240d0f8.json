{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\n// root , 모든 페이지의 레이아웃 역할\nimport React from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport PropTypes from \"prop-types\";\nimport reducer from \"../reducers\";\nimport { Provider } from 'react-redux'; // 리덕스 스테이트를 제공해줌(컴포넌트)\n\nimport createSagaMiddleware from 'redux-saga';\nimport withReduxSaga from 'next-redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootSaga from \"../sagas\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\";\nimport Helmet from 'react-helmet';\nimport App, { Container } from 'next/app'; // _document.js 에서 renderpage 랜더링 할 수 있게 해줌 (검색엔진에서 head 부분 노출시켜줌)\n\nvar Portfolio = function Portfolio(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  return (// Provider 가 최상위 컴포넌트이기 때문에 자식 컴포넌트들이 스토어에 접근할 수 있음\n    // 스토어는 state, action, reducer 가 합쳐진 것\n    __jsx(Container, null, __jsx(Provider, {\n      store: store\n    }, __jsx(Helmet, {\n      title: \"DSS PortFolio\",\n      htmlAttributes: {\n        lang: 'ko'\n      },\n      meta: [{\n        charSet: 'UTF-8'\n      }, {\n        name: 'viewport',\n        content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover'\n      }, {\n        'http-equiv': 'X-UA-Compatible',\n        content: 'IE=edge'\n      }, {\n        name: 'description',\n        content: 'DSS PortFolio'\n      }, {\n        name: 'og:title',\n        content: 'NodeBird'\n      }, {\n        name: 'og:description',\n        content: 'DSS PortFolio'\n      }, {\n        property: 'og:type',\n        content: 'website'\n      }],\n      link: [{\n        rel: 'shortcut icon',\n        href: '/favicon.ico'\n      }, {\n        rel: 'stylesheet',\n        href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.css'\n      }, {\n        rel: 'stylesheet',\n        href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css'\n      }, {\n        rel: 'stylesheet',\n        href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css'\n      }]\n    }), __jsx(AppLayout, null, __jsx(Component, pageProps))))\n  );\n};\n\nPortfolio.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  // JSX 에 들어가는 모든것(문자열,컴포넌트,태그,숫자 등)\n  store: PropTypes.object.isRequired,\n  // isRequired : 필수값( 반드시 props가 존재, 없으면 경고 )\n  pageProps: PropTypes.object.isRequired\n};\n\nPortfolio.getInitialProps = function _callee(context) {\n  var ctx, Component, pageProps, state, cookie;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(context);\n          ctx = context.ctx, Component = context.Component;\n          pageProps = {};\n          state = ctx.store.getState(); // AppLayout 부분 SSR구조변경 \n          // 리덕스 사가 호출순서 대로 코딩할 것.\n\n          cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // 클라이언트>서버 구조일땐 브라우저가 쿠키를 같이 넣어줬었는데(withCridentials:true),\n\n          if (ctx.isServer && cookie) {\n            // 서버일때(SSR)와 아닐때가 있기때문에 분기처리 해줌\n            axios.defaults.headers.Cookie = cookie; // SSR은 직접 쿠키를 넣어줘야함\n          }\n\n          if (!state.user.me) {\n            // AppLayout 에서 !me 일때 디스패치 해줬던 것 - 스토어에서 me 정보를 가져오기\n            ctx.store.dispatch({\n              type: LOAD_USER_REQUEST\n            });\n          }\n\n          if (!Component.getInitialProps) {\n            _context.next = 14;\n            break;\n          }\n\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(Component.getInitialProps(ctx));\n\n        case 10:\n          _context.t0 = _context.sent;\n\n          if (_context.t0) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.t0 = {};\n\n        case 13:\n          pageProps = _context.t0;\n\n        case 14:\n          return _context.abrupt(\"return\", {\n            pageProps: pageProps\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, function (store) {\n    return function (next) {\n      return function (action) {\n        //리덕스 사가 에러 찾는법 - 커스텀 미들웨어\n        // console.log(action);\n        next(action);\n      };\n    };\n  }]; // 보안상 아래 부분은 실 배포용인지 개발용인지 구분\n\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && true && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer); // 여기에 store 커스터마이징\n\n  store.sagaTask = sagaMiddleware.run(rootSaga); //SSR 추가\n\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Portfolio)); // 컴포넌트를 감싸줌(고차 컴포넌트- 기존컴포넌트 확장)","map":null,"metadata":{},"sourceType":"module"}