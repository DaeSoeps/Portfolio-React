{"ast":null,"code":"// // Helmet 으로 html 검색엔진의 규격을 맞췄지만, 제대로 사용하려면 SSR 적용해줘야함\n// // 1. 처음 _documnet 랜더링 > _app 랜더링 + 그안의 컴포넌트 랜더링\n// import React from 'react';\n// import PropTypes from 'prop-types';\n// import Document, {Main, NextScript} from 'next/document';\n// import { Helmet } from 'react-helmet';\n// import { ServerStyleSheet } from 'styled-components'; // styled-component SSR\n// class MyDocument extends Document {\n//     static getInitialProps(context){\n//         const sheet = new ServerStyleSheet();\n//         // 이걸 해줘야 검색엔진에서 다큐맨터리는 랜더링 되는데 안에있는 _app.js 가 랜더링 됨\n//         const page = context.renderPage((App)=> (props)=> sheet.collectStyles(<App {...props}></App>)) \n//         const styleTags =sheet.getStyleElement();\n//         return{ ...page, helmet: Helmet.renderStatic(), styleTags} // SSR\n//     }\n//     render(){\n//         const { htmlAttributes, bodyAttributes, ...helmet } = this.props.helmet; // ...helmet 안에 태그들이 들어있는데, 반복문으로 리엑트 컴포넌트로 만들어서 head 안에 붙여줌\n//         const htmlAttrs = htmlAttributes.toComponent();\n//         const bodyAttrs = bodyAttributes.toComponent();\n//         return(\n//             <html {...htmlAttrs}>\n//                 <head>\n//                     {this.props.styleTags}\n//                     {Object.values(helmet).map(el => el.toComponent())} \n//                 </head>\n//                 <body {...bodyAttrs}>\n//                     <Main></Main>\n//                     {process.env.NODE_ENV === 'production' // 익스플로러(옛 브라우저) 최신코드 호환 가능, 서비스 속도 느려질 수 있음\n//                     && <script src=\"https://polyfill.io/v3/polyfill.min.js?features=es6,es7,es8,es9,NodeList.prototype.forEach&flags=gated\" />}\n//                     <NextScript></NextScript>\n//                 </body>\n//             </html>\n//         )\n//     }\n// }\n// MyDocument.propTypes= {\n//     helmet: PropTypes.object.isRequired,\n//     styleTags: PropTypes.object.isRequired,\n// }\n// export default MyDocument;","map":null,"metadata":{},"sourceType":"script"}