{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: false,\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중 \n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false\n}; //메인 포스트를 로딩\n\nexport var LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport var LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport var LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE'; //해시태그 검색했을때 결과 로딩\n\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE'; //사용자가 어떤 게시글을 썼는지 로딩\n\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'; //이미지 업로드\n\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; //이미지 업로드 취소(동기)\n\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE'; //포스트 추가\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE'; //포스트에 LIKE 누르는 액션\n\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE'; //포스트에 LIKE 취소하는 액션\n\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE'; //게시글에 댓글 남기기\n\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //게시글 댓글 불러오기\n\nexport var LOAD_COMMENTS_REQUEST = 'LOAD_COMMENT_REQUEST';\nexport var LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENT_SUCCESS';\nexport var LOAD_COMMENTS_FAILURE = 'LOAD_COMMENT_FAILURE'; //리트윗 하는 액션\n\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE'; //포스트 제거하는 액션\n\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nvar ADD_DUMMY = 'ADD_DUMMY'; // ????\n\nvar addPost = {\n  type: ADD_POST_REQUEST\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPLOAD_IMAGES_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: [].concat(_toConsumableArray(state.imagePaths), _toConsumableArray(action.data)) // 이미지 미리보기 할 수 있는 경로들\n\n        });\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    // 이미지 제거는 동기적으로 처리해도 되서 3분류안함\n\n    case REMOVE_IMAGE:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: state.imagePaths.filter(function (v, i) {\n            return i !== action.index;\n          })\n        });\n      }\n    // 게시글 작성\n\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts)),\n          postAdded: true,\n          imagePaths: []\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n    // 댓글 달기\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        // 어떤게시글에 댓글을 추가할지\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n        var post = state.mainPosts[postIndex];\n        var Comments = [].concat(_toConsumableArray(post.Comments), [action.data.comment]);\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments: Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts: mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    case LOAD_COMMENTS_SUCCESS:\n      {\n        var _postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post = state.mainPosts[_postIndex];\n        var _Comments = action.data.comments;\n\n        var _mainPosts = _toConsumableArray(state.mainPosts);\n\n        _mainPosts[_postIndex] = _objectSpread({}, _post, {\n          Comments: _Comments\n        });\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: action.lastId === 0 ? [] : state.mainPosts,\n          // 처음게시글 불러올땐 기존게시글 초기화,더 불러올땐 기존 게시글 유지(스크롤링) \n          hasMorePost: action.lastId ? state.hasMorePost : true // 처음불러올땐 더보기 활성화 lastId = 0 (false), 더 불러오는 중일땐 기존상태 유지\n\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.concat(action.data),\n          hasMorePost: action.data.length === 10\n        });\n      }\n\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_SUCCESS:\n      {\n        // 불변성때문에, 바뀔 객체만 새로 만들어줘야함\n        var _postIndex2 = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post2 = state.mainPosts[_postIndex2];\n        var Likers = [{\n          id: action.data.userId\n        }].concat(_toConsumableArray(_post2.Likers));\n\n        var _mainPosts2 = _toConsumableArray(state.mainPosts);\n\n        _mainPosts2[_postIndex2] = _objectSpread({}, _post2, {\n          Likers: Likers\n        }); //불변성 유지 후 다시 구성하는 부분\n\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts2\n        });\n      }\n\n    case LIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        var _postIndex3 = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post3 = state.mainPosts[_postIndex3];\n\n        var _Likers = _post3.Likers.filter(function (v) {\n          return v.id !== action.data.userId;\n        }); // 좋아요 목록중 내 아이디 제거 \n\n\n        var _mainPosts3 = _toConsumableArray(state.mainPosts);\n\n        _mainPosts3[_postIndex3] = _objectSpread({}, _post3, {\n          Likers: _Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts3\n        });\n      }\n\n    case UNLIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case RETWEET_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case RETWEET_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts)) // 기존 게시글 앞에 받아온 게시글을 받아오기\n\n        });\n      }\n\n    case RETWEET_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.filter(function (v) {\n            return v.id !== action.data;\n          })\n        });\n      }\n\n    case REMOVE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_DUMMY","addPost","type","state","action","data","filter","v","i","index","error","postIndex","findIndex","id","postId","post","Comments","comment","comments","lastId","hasMorePost","concat","length","Likers","userId"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nexport const initialState = {\r\n    mainPosts: [], // 화면에 보일 포스트들\r\n    imagePaths : [], // 미리보기 이미지 경로\r\n    addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n    isAddingPost : false, // 포스트 업로드 중 \r\n    postAdded: false, // 포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n};\r\n\r\n\r\n\r\n//메인 포스트를 로딩\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n//해시태그 검색했을때 결과 로딩\r\nexport const LOAD_HASHTAG_POSTS_REQUEST ='LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS ='LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE ='LOAD_HASHTAG_POSTS_FAILURE';\r\n //사용자가 어떤 게시글을 썼는지 로딩\r\nexport const LOAD_USER_POSTS_REQUEST ='LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS ='LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE ='LOAD_USER_POSTS_FAILURE';\r\n//이미지 업로드\r\nexport const UPLOAD_IMAGES_REQUEST ='UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS ='UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE ='UPLOAD_IMAGES_FAILURE';\r\n//이미지 업로드 취소(동기)\r\nexport const REMOVE_IMAGE ='REMOVE_IMAGE';\r\n\r\n//포스트 추가\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n//포스트에 LIKE 누르는 액션\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n//포스트에 LIKE 취소하는 액션\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n//게시글에 댓글 남기기\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n//게시글 댓글 불러오기\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n//리트윗 하는 액션\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n//포스트 제거하는 액션\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nconst ADD_DUMMY = 'ADD_DUMMY' // ????\r\nconst addPost = {\r\n    type : ADD_POST_REQUEST,\r\n};\r\n\r\n\r\nexport default ( state = initialState, action) => {\r\n    switch (action.type){\r\n        case UPLOAD_IMAGES_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                imagePaths:[...state.imagePaths, ...action.data], // 이미지 미리보기 할 수 있는 경로들\r\n            }\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        // 이미지 제거는 동기적으로 처리해도 되서 3분류안함\r\n        case REMOVE_IMAGE:{\r\n            return{\r\n                ...state,\r\n                imagePaths: state.imagePaths.filter((v,i) => i !== action.index),\r\n            }\r\n        }\r\n        // 게시글 작성\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: true,\r\n                addPostErrorReason: '',\r\n                postAdded: false,\r\n            }\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                mainPosts: [action.data, ...state.mainPosts],\r\n                postAdded: true,\r\n                imagePaths: [],\r\n            }\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostErrorReason: action.error,\r\n            }\r\n        }\r\n        // 댓글 달기\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: true,\r\n                addCommentErrorReason: '',\r\n                commentAdded: false,\r\n            }\r\n        }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            // 어떤게시글에 댓글을 추가할지\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = [...post.Comments, action.data.comment];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n              ...state,\r\n              isAddingComment: false,\r\n              mainPosts,\r\n              commentAdded: true,\r\n            };\r\n        }\r\n        case ADD_COMMENT_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                addCommentErrorReason: action.error,\r\n            }\r\n        }\r\n        case LOAD_COMMENTS_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = action.data.comments;\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n              ...state,\r\n              mainPosts,\r\n            };\r\n        }\r\n        case LOAD_MAIN_POSTS_REQUEST: \r\n        case LOAD_HASHTAG_POSTS_REQUEST: \r\n        case LOAD_USER_POSTS_REQUEST: {    \r\n            return {\r\n                ...state,\r\n                mainPosts: action.lastId === 0 ? [] : state.mainPosts,// 처음게시글 불러올땐 기존게시글 초기화,더 불러올땐 기존 게시글 유지(스크롤링) \r\n                hasMorePost : action.lastId ? state.hasMorePost : true, // 처음불러올땐 더보기 활성화 lastId = 0 (false), 더 불러오는 중일땐 기존상태 유지\r\n            }\r\n        }\r\n        case LOAD_MAIN_POSTS_SUCCESS: \r\n        case LOAD_HASHTAG_POSTS_SUCCESS: \r\n        case LOAD_USER_POSTS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                mainPosts: state.mainPosts.concat(action.data),\r\n                hasMorePost: action.data.length === 10,\r\n            }\r\n        }\r\n        case LOAD_MAIN_POSTS_FAILURE: \r\n        case LOAD_HASHTAG_POSTS_FAILURE: \r\n        case LOAD_USER_POSTS_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case LIKE_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case LIKE_POST_SUCCESS: {\r\n            // 불변성때문에, 바뀔 객체만 새로 만들어줘야함\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n            const post = state.mainPosts[postIndex];\r\n            const Likers = [{ id : action.data.userId }, ...post.Likers];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = {...post, Likers}; //불변성 유지 후 다시 구성하는 부분\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n            }\r\n        }\r\n        case LIKE_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case UNLIKE_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case UNLIKE_POST_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n            const post = state.mainPosts[postIndex];\r\n            const Likers = post.Likers.filter(v=> v.id !== action.data.userId); // 좋아요 목록중 내 아이디 제거 \r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = {...post, Likers};\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n            }\r\n        }\r\n        case UNLIKE_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case RETWEET_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case RETWEET_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [action.data, ...state.mainPosts], // 기존 게시글 앞에 받아온 게시글을 받아오기\r\n            }\r\n        }\r\n        case RETWEET_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case REMOVE_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case REMOVE_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                mainPosts: state.mainPosts.filter(v=>v.id !== action.data),\r\n            }\r\n        }\r\n        case REMOVE_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        default:{\r\n            return{\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}