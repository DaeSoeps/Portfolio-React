{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect, memo, useRef } from 'react';\nimport { Card, Icon, Button, Avatar, Input, List, Form, Comment, Popover } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport Link from 'next/link';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport CommentForm from './CommentForm';\nimport FollowButton from '../components/FollowButton';\nmoment.locale('ko');\nvar CardWrapper = styled.div(_templateObject()); //memo 쉽게 다른컴포넌트 리랜더링 방지하는 방법(대신, props가 복잡한 구조면 안됨)\n\nvar PostCard = memo(function (_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var id = useSelector(function (state) {\n    return state.user.me && state.user.me.id;\n  });\n  var dispath = useDispatch();\n  var liked = id && post.Likers && post.Likers.find(function (v) {\n    return v.id === id;\n  });\n  var onToggleComment = useCallback(function () {\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      // 댓글창이 닫혀있는 경우\n      dispath({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다!');\n    }\n\n    if (liked) {\n      // Likers : 좋아요 누른 사람들 배열로 들어있음\n      dispath({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispath({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispath({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispath({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispath({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemovePost = useCallback(function (userId) {\n    return function () {\n      dispath({\n        type: REMOVE_POST_REQUEST,\n        data: userId\n      });\n    };\n  });\n  return __jsx(CardWrapper, null, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, id && post.UserId === id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: __jsx(FollowButton, {\n      post: post,\n      onUnfollow: onUnfollow,\n      onFollow: onFollow\n    })\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))) // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\n    ,\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  }), moment(post.createdAt).format('YYYY.MM.DD.')) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))) // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\n    ,\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, null), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n});\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/containers/PostCard.js"],"names":["React","useState","useCallback","useEffect","memo","useRef","Card","Icon","Button","Avatar","Input","List","Form","Comment","Popover","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","PostImages","PostCardContent","Link","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","styled","moment","CommentForm","FollowButton","locale","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","id","state","user","me","dispath","liked","Likers","find","v","onToggleComment","prev","type","data","onToggleLike","alert","onRetweet","onFollow","userId","onUnfollow","onRemovePost","Images","UserId","RetweetId","User","nickname","Retweet","pathname","query","content","createdAt","format","Comments","length","item"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect, memo , useRef} from 'react';\r\nimport { Card , Icon, Button, Avatar, Input, List, Form, Comment, Popover} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\r\nimport PostImages from '../components/PostImages';\r\nimport PostCardContent from '../components/PostCardContent';\r\nimport Link from 'next/link';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\nimport styled from 'styled-components';\r\nimport moment from 'moment';\r\nimport CommentForm from './CommentForm';\r\nimport FollowButton from '../components/FollowButton';\r\nmoment.locale('ko');\r\n\r\nconst CardWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n`;\r\n//memo 쉽게 다른컴포넌트 리랜더링 방지하는 방법(대신, props가 복잡한 구조면 안됨)\r\nconst PostCard = memo(({ post}) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const id = useSelector(state => state.user.me && state.user.me.id);\r\n  const dispath = useDispatch();\r\n  const liked = id && post.Likers && post.Likers.find(v => v.id === id);\r\n  const onToggleComment = useCallback(() => {\r\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\r\n    setCommentFormOpened(prev =>!prev);\r\n    if(!commentFormOpened){ // 댓글창이 닫혀있는 경우\r\n      dispath({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, []);\r\n\r\n  const onToggleLike = useCallback( () =>{\r\n    if(!id){\r\n      return alert('로그인이 필요합니다!');\r\n    }\r\n    if(liked){  // Likers : 좋아요 누른 사람들 배열로 들어있음\r\n      dispath({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }else{ // 좋아요 안 누른 상태\r\n      dispath({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, [id, post && post.id, liked])\r\n  const onRetweet = useCallback( ()=> {\r\n    if(!id){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispath({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    })\r\n  }, [id , post && post.id]);\r\n  const onFollow = useCallback( userId => () =>{ \r\n    dispath({\r\n      type: FOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n  const onUnfollow = useCallback( userId => () => {\r\n    dispath({\r\n      type: UNFOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n  const onRemovePost = useCallback( userId => ()=>{\r\n    dispath({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: userId,\r\n    });\r\n  });\r\n  \r\n  return (\r\n    <CardWrapper>\r\n    <Card\r\n      cover={post.Images[0] && <PostImages images={post.Images}></PostImages>}\r\n      actions={[\r\n        <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet}></Icon>,\r\n        <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor=\"#eb2f96\" onClick={onToggleLike}></Icon>,\r\n        <Icon type=\"message\" key=\"message\" onClick={onToggleComment}></Icon>,\r\n        <Popover\r\n          key=\"ellipsis\"\r\n          content={(\r\n            <Button.Group>\r\n              {id && post.UserId === id\r\n                ? (\r\n                  <>\r\n                    <Button>수정</Button>\r\n                    <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\r\n                  </>\r\n                )\r\n                : <Button>신고</Button>}\r\n            </Button.Group>\r\n          )}\r\n        >\r\n            <Icon type=\"ellipsis\" />\r\n        </Popover>,\r\n      ]}\r\n      title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n      extra={<FollowButton post={post} onUnfollow={onUnfollow} onFollow={onFollow}></FollowButton>}\r\n    >\r\n    {post.RetweetId && post.Retweet ? (\r\n     <Card\r\n        cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images}></PostImages>}\r\n     >\r\n        <Card.Meta\r\n          avatar={\r\n            <Link href={{ pathname: '/user', query: { id: post.Retweet.User.id } }} as={`/user/${post.Retweet.User.id}`}> \r\n              <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a> \r\n            </Link>\r\n          } // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\r\n          title={post.Retweet.User.nickname}\r\n          description={<PostCardContent postData={post.Retweet.content}></PostCardContent>} \r\n        ></Card.Meta>\r\n        {moment(post.createdAt).format('YYYY.MM.DD.')}\r\n      </Card> )\r\n      :(\r\n        <Card.Meta\r\n            avatar={<Link href={{ \r\n            pathname: '/user', \r\n            query: { id: post.User.id } }} as={`/user/${post.User.id}`}> \r\n              <a><Avatar>{post.User.nickname[0]}</Avatar></a> \r\n            </Link>\r\n          } // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\r\n          title={post.User.nickname}\r\n          description={<PostCardContent postData={post.content}></PostCardContent>} \r\n        ></Card.Meta>\r\n      )}\r\n    </Card>\r\n  {commentFormOpened && (\r\n        <>\r\n          <CommentForm></CommentForm>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(<Link href={{ \r\n                    pathname: '/user', \r\n                    query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                  )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </CardWrapper>\r\n  );\r\n});\r\nPostCard.propTypes = {\r\n  post : PropTypes.shape({\r\n   User : PropTypes.object,\r\n   content : PropTypes.string,\r\n   img : PropTypes.string,\r\n   createdAt : PropTypes.string,\r\n  }).isRequired,\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}