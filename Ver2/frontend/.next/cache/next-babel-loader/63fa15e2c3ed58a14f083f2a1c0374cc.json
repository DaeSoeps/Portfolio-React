{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: false,\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중 \n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false\n}; //메인 포스트를 로딩\n\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE'; //해시태그 검색했을때 결과 로딩\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE'; //사용자가 어떤 게시글을 썼는지 로딩\n\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE'; //이미지 업로드\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE'; //이미지 업로드 취소(동기)\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'; //포스트 추가\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; //포스트에 LIKE 누르는 액션\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE'; //포스트에 LIKE 취소하는 액션\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE'; //게시글에 댓글 남기기\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //게시글 댓글 불러오기\n\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENT_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENT_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENT_FAILURE'; //리트윗 하는 액션\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE'; //포스트 제거하는 액션\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nconst ADD_DUMMY = 'ADD_DUMMY'; // ????\n\nconst addPost = {\n  type: ADD_POST_REQUEST\n};\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        {\n          break;\n        }\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          // immer 적용(코드정리, 불변성 유지해줌), immer 에서 draft 상태 체크 후 바뀐부분을 state에 적용\n          action.data.forEach(p => {\n            draft.imagePaths.push(p);\n          });\n          break; // immer 적용 전 코드\n          // return {\n          //     ...state,\n          //     imagePaths:[...state.imagePaths, ...action.data], // 이미지 미리보기 할 수 있는 경로들\n          // }\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n      // 이미지 제거는 동기적으로 처리해도 되서 3분류안함\n\n      case REMOVE_IMAGE:\n        {\n          const index = draft.imagePaths.findIndex((v, i) => i === action.index);\n          draft.imagePaths.splice(index, 1);\n          break;\n        }\n      // 게시글 작성\n\n      case ADD_POST_REQUEST:\n        {\n          draft.isAddingPost = true;\n          draft.addPostErrorReason = '';\n          draft.postAdded = false;\n          break;\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.isAddingPost = false;\n          draft.mainPosts.unshift(action.data);\n          draft.postAdded = true;\n          draft.imagePaths = [];\n          break; // return {\n          //     ...state,\n          //     isAddingPost: false,\n          //     mainPosts: [action.data, ...state.mainPosts],\n          //     postAdded: true,\n          //     imagePaths: [],\n          // }\n        }\n\n      case ADD_POST_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isAddingPost: false,\n            addPostErrorReason: action.error\n          });\n        }\n      // 댓글 달기\n\n      case ADD_COMMENT_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            isAddingComment: true,\n            addCommentErrorReason: '',\n            commentAdded: false\n          });\n        }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          // 어떤게시글에 댓글을 추가할지\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Comments.push(action.data.comment);\n          draft.isAddingComment = false;\n          draft.commentAdded = true;\n          break; // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // const Comments = [...post.Comments, action.data.comment];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = { ...post, Comments };\n          // return {\n          //   ...state,\n          //   isAddingComment: false,\n          //   mainPosts,\n          //   commentAdded: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        {\n          return _objectSpread({}, state, {\n            isAddingComment: false,\n            addCommentErrorReason: action.error\n          });\n        }\n\n      case LOAD_COMMENTS_SUCCESS:\n        {\n          const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n          const post = state.mainPosts[postIndex];\n          const Comments = action.data.comments;\n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = _objectSpread({}, post, {\n            Comments\n          });\n          return _objectSpread({}, state, {\n            mainPosts\n          });\n        }\n\n      case LOAD_MAIN_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: action.lastId === 0 ? [] : state.mainPosts,\n            // 처음게시글 불러올땐 기존게시글 초기화,더 불러올땐 기존 게시글 유지(스크롤링) \n            hasMorePost: action.lastId ? state.hasMorePost : true // 처음불러올땐 더보기 활성화 lastId = 0 (false), 더 불러오는 중일땐 기존상태 유지\n\n          });\n        }\n\n      case LOAD_MAIN_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_USER_POSTS_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: state.mainPosts.concat(action.data),\n            hasMorePost: action.data.length === 10\n          });\n        }\n\n      case LOAD_MAIN_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_USER_POSTS_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LIKE_POST_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case LIKE_POST_SUCCESS:\n        {\n          // 불변성때문에, 바뀔 객체만 새로 만들어줘야함\n          const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n          const post = state.mainPosts[postIndex];\n          const Likers = [{\n            id: action.data.userId\n          }, ...post.Likers];\n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = _objectSpread({}, post, {\n            Likers\n          }); //불변성 유지 후 다시 구성하는 부분\n\n          return _objectSpread({}, state, {\n            mainPosts\n          });\n        }\n\n      case LIKE_POST_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNLIKE_POST_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n          const post = state.mainPosts[postIndex];\n          const Likers = post.Likers.filter(v => v.id !== action.data.userId); // 좋아요 목록중 내 아이디 제거 \n\n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = _objectSpread({}, post, {\n            Likers\n          });\n          return _objectSpread({}, state, {\n            mainPosts\n          });\n        }\n\n      case UNLIKE_POST_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case RETWEET_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case RETWEET_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: [action.data, ...state.mainPosts] // 기존 게시글 앞에 받아온 게시글을 받아오기\n\n          });\n        }\n\n      case RETWEET_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_POST_REQUEST:\n        {\n          return _objectSpread({}, state);\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          return _objectSpread({}, state, {\n            mainPosts: state.mainPosts.filter(v => v.id !== action.data)\n          });\n        }\n\n      case REMOVE_POST_FAILURE:\n        {\n          return _objectSpread({}, state);\n        }\n\n      default:\n        {\n          return _objectSpread({}, state);\n        }\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_DUMMY","addPost","type","state","action","draft","data","forEach","p","push","index","findIndex","v","i","splice","unshift","error","postIndex","id","postId","Comments","comment","post","comments","lastId","hasMorePost","concat","length","Likers","userId","filter"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nexport const initialState = {\r\n    mainPosts: [], // 화면에 보일 포스트들\r\n    imagePaths : [], // 미리보기 이미지 경로\r\n    addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n    isAddingPost : false, // 포스트 업로드 중 \r\n    postAdded: false, // 포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n};\r\n\r\n\r\n\r\n//메인 포스트를 로딩\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n//해시태그 검색했을때 결과 로딩\r\nexport const LOAD_HASHTAG_POSTS_REQUEST ='LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS ='LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE ='LOAD_HASHTAG_POSTS_FAILURE';\r\n //사용자가 어떤 게시글을 썼는지 로딩\r\nexport const LOAD_USER_POSTS_REQUEST ='LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS ='LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE ='LOAD_USER_POSTS_FAILURE';\r\n//이미지 업로드\r\nexport const UPLOAD_IMAGES_REQUEST ='UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS ='UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE ='UPLOAD_IMAGES_FAILURE';\r\n//이미지 업로드 취소(동기)\r\nexport const REMOVE_IMAGE ='REMOVE_IMAGE';\r\n\r\n//포스트 추가\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n//포스트에 LIKE 누르는 액션\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n//포스트에 LIKE 취소하는 액션\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n//게시글에 댓글 남기기\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n//게시글 댓글 불러오기\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n//리트윗 하는 액션\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n//포스트 제거하는 액션\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nconst ADD_DUMMY = 'ADD_DUMMY' // ????\r\nconst addPost = {\r\n    type : ADD_POST_REQUEST,\r\n};\r\n\r\n\r\nexport default ( state = initialState, action) => {\r\n    return produce(state, (draft)=>{\r\n        switch (action.type){\r\n            case UPLOAD_IMAGES_REQUEST: {\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_SUCCESS: {\r\n                // immer 적용(코드정리, 불변성 유지해줌), immer 에서 draft 상태 체크 후 바뀐부분을 state에 적용\r\n                action.data.forEach((p)=>{\r\n                    draft.imagePaths.push(p);\r\n                });\r\n                break;\r\n                // immer 적용 전 코드\r\n                // return {\r\n                //     ...state,\r\n                //     imagePaths:[...state.imagePaths, ...action.data], // 이미지 미리보기 할 수 있는 경로들\r\n                // }\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            // 이미지 제거는 동기적으로 처리해도 되서 3분류안함\r\n            case REMOVE_IMAGE:{\r\n                const index = draft.imagePaths.findIndex((v,i)=> i ===action.index);\r\n                draft.imagePaths.splice(index, 1);\r\n                break;\r\n            }\r\n            // 게시글 작성\r\n            case ADD_POST_REQUEST: {\r\n                draft.isAddingPost = true;\r\n                draft.addPostErrorReason = '';\r\n                draft.postAdded = false;\r\n                break;\r\n            }\r\n            case ADD_POST_SUCCESS: {\r\n                draft.isAddingPost = false;\r\n                draft.mainPosts.unshift(action.data);\r\n                draft.postAdded = true;\r\n                draft.imagePaths = [];\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     isAddingPost: false,\r\n                //     mainPosts: [action.data, ...state.mainPosts],\r\n                //     postAdded: true,\r\n                //     imagePaths: [],\r\n                // }\r\n            }\r\n            case ADD_POST_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                    isAddingPost: false,\r\n                    addPostErrorReason: action.error,\r\n                }\r\n            }\r\n            // 댓글 달기\r\n            case ADD_COMMENT_REQUEST: {\r\n                return {\r\n                    ...state,\r\n                    isAddingComment: true,\r\n                    addCommentErrorReason: '',\r\n                    commentAdded: false,\r\n                }\r\n            }\r\n            case ADD_COMMENT_SUCCESS: {\r\n                // 어떤게시글에 댓글을 추가할지\r\n                const postIndex = draft.mainPosts.findIndex(v=> v.id === action.data.postId);\r\n                draft.mainPosts[postIndex].Comments.push(action.data.comment);\r\n                draft.isAddingComment = false;\r\n                draft.commentAdded = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // const Comments = [...post.Comments, action.data.comment];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = { ...post, Comments };\r\n                // return {\r\n                //   ...state,\r\n                //   isAddingComment: false,\r\n                //   mainPosts,\r\n                //   commentAdded: true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                    isAddingComment: false,\r\n                    addCommentErrorReason: action.error,\r\n                }\r\n            }\r\n            case LOAD_COMMENTS_SUCCESS: {\r\n                const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                const post = state.mainPosts[postIndex];\r\n                const Comments = action.data.comments;\r\n                const mainPosts = [...state.mainPosts];\r\n                mainPosts[postIndex] = { ...post, Comments };\r\n                return {\r\n                  ...state,\r\n                  mainPosts,\r\n                };\r\n            }\r\n            case LOAD_MAIN_POSTS_REQUEST: \r\n            case LOAD_HASHTAG_POSTS_REQUEST: \r\n            case LOAD_USER_POSTS_REQUEST: {    \r\n                return {\r\n                    ...state,\r\n                    mainPosts: action.lastId === 0 ? [] : state.mainPosts,// 처음게시글 불러올땐 기존게시글 초기화,더 불러올땐 기존 게시글 유지(스크롤링) \r\n                    hasMorePost : action.lastId ? state.hasMorePost : true, // 처음불러올땐 더보기 활성화 lastId = 0 (false), 더 불러오는 중일땐 기존상태 유지\r\n                }\r\n            }\r\n            case LOAD_MAIN_POSTS_SUCCESS: \r\n            case LOAD_HASHTAG_POSTS_SUCCESS: \r\n            case LOAD_USER_POSTS_SUCCESS: {\r\n                return {\r\n                    ...state,\r\n                    mainPosts: state.mainPosts.concat(action.data),\r\n                    hasMorePost: action.data.length === 10,\r\n                }\r\n            }\r\n            case LOAD_MAIN_POSTS_FAILURE: \r\n            case LOAD_HASHTAG_POSTS_FAILURE: \r\n            case LOAD_USER_POSTS_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            case LIKE_POST_REQUEST: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            case LIKE_POST_SUCCESS: {\r\n                // 불변성때문에, 바뀔 객체만 새로 만들어줘야함\r\n                const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n                const post = state.mainPosts[postIndex];\r\n                const Likers = [{ id : action.data.userId }, ...post.Likers];\r\n                const mainPosts = [...state.mainPosts];\r\n                mainPosts[postIndex] = {...post, Likers}; //불변성 유지 후 다시 구성하는 부분\r\n                return {\r\n                    ...state,\r\n                    mainPosts,\r\n                }\r\n            }\r\n            case LIKE_POST_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            case UNLIKE_POST_REQUEST: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            case UNLIKE_POST_SUCCESS: {\r\n                const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n                const post = state.mainPosts[postIndex];\r\n                const Likers = post.Likers.filter(v=> v.id !== action.data.userId); // 좋아요 목록중 내 아이디 제거 \r\n                const mainPosts = [...state.mainPosts];\r\n                mainPosts[postIndex] = {...post, Likers};\r\n                return {\r\n                    ...state,\r\n                    mainPosts,\r\n                }\r\n            }\r\n            case UNLIKE_POST_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            case RETWEET_REQUEST: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            case RETWEET_SUCCESS: {\r\n                return {\r\n                    ...state,\r\n                    mainPosts: [action.data, ...state.mainPosts], // 기존 게시글 앞에 받아온 게시글을 받아오기\r\n                }\r\n            }\r\n            case RETWEET_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            case REMOVE_POST_REQUEST: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            case REMOVE_POST_SUCCESS: {\r\n                return {\r\n                    ...state,\r\n                    mainPosts: state.mainPosts.filter(v=>v.id !== action.data),\r\n                }\r\n            }\r\n            case REMOVE_POST_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                }\r\n            }\r\n            default:{\r\n                return{\r\n                    ...state,\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}