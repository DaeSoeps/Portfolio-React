{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostCard from '../components/PostCard';\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\nimport { Card, Avatar } from 'antd';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nconst User = ({\n  id\n}) => {\n  const dispatch = useDispatch();\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  const {\n    userInfo\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_USER_REQUEST,\n      data: id\n    });\n    dispatch({\n      type: LOAD_USER_POSTS_REQUEST,\n      data: id\n    });\n  }, []);\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Post), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", null), userInfo.Followers)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(c => __jsx(PostCard, {\n    key: +c.createdAt,\n    post: c\n  })));\n};\n\nUser.propTypes = {\n  id: PropTypes.number.isRequired // 2. 이러면 컴포넌트의 props에도 전달이 가능함 : 서버>getInitialProps> User.props \n\n};\n\nUser.getInitialProps = async context => {\n  console.log('hashtag props on user.js', context.query.id); // 서버에서 라우팅받은 정보가 넘어오는지 확인, _app.js에서 또 추가해줌\n\n  return {\n    id: parseInt(context.query.id, 10)\n  }; // 1. 이러면 컴포넌트의 props에도 전달이 가능함 : 서버>getInitialProps> User.props \n};\n\nexport default User;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/user.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","PostCard","LOAD_USER_POSTS_REQUEST","Card","Avatar","LOAD_USER_REQUEST","User","id","dispatch","mainPosts","state","post","userInfo","user","type","data","Post","Followings","Followers","nickname","map","c","createdAt","propTypes","number","isRequired","getInitialProps","context","console","log","query","parseInt"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,MAA7B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAU;AAEnB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAgBT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAjC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeZ,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAhC;AACAhB,EAAAA,SAAS,CAAE,MAAK;AACZW,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAET,iBADD;AAELU,MAAAA,IAAI,EAAER;AAFD,KAAD,CAAR;AAIAC,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEZ,uBADD;AAELa,MAAAA,IAAI,EAAER;AAFD,KAAD,CAAR;AAIH,GATQ,EASN,EATM,CAAT;AAUA,SACI,mBACKK,QAAQ,GACT,MAAC,IAAD;AACA,IAAA,OAAO,EAAE,CACL;AAAK,MAAA,GAAG,EAAC;AAAT,uBAAkB,iBAAlB,EAA4BA,QAAQ,CAACI,IAArC,CADK,EAEL;AAAK,MAAA,GAAG,EAAC;AAAT,6BAAwB,iBAAxB,EAAkCJ,QAAQ,CAACK,UAA3C,CAFK,EAGL;AAAK,MAAA,GAAG,EAAC;AAAT,6BAAuB,iBAAvB,EAAiCL,QAAQ,CAACM,SAA1C,CAHK;AADT,KAOI,MAAC,IAAD,CAAM,IAAN;AACC,IAAA,MAAM,EAAE,MAAC,MAAD,QAASN,QAAQ,CAACO,QAAT,CAAkB,CAAlB,CAAT,CADT;AAEC,IAAA,KAAK,EAAEP,QAAQ,CAACO;AAFjB,IAPJ,CADS,GAaP,IAdN,EAeKV,SAAS,CAACW,GAAV,CAAcC,CAAC,IACZ,MAAC,QAAD;AAAU,IAAA,GAAG,EAAE,CAACA,CAAC,CAACC,SAAlB;AAA6B,IAAA,IAAI,EAAED;AAAnC,IADH,CAfL,CADJ;AAqBH,CApCD;;AAqCAf,IAAI,CAACiB,SAAL,GAAiB;AACbhB,EAAAA,EAAE,EAAET,SAAS,CAAC0B,MAAV,CAAiBC,UADR,CACoB;;AADpB,CAAjB;;AAIAnB,IAAI,CAACoB,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAyCF,OAAO,CAACG,KAAR,CAAcvB,EAAvD,EADsC,CACsB;;AAC5D,SAAO;AAAEA,IAAAA,EAAE,EAAEwB,QAAQ,CAACJ,OAAO,CAACG,KAAR,CAAcvB,EAAf,EAAmB,EAAnB;AAAd,GAAP,CAFsC,CAEQ;AACjD,CAHD;;AAIA,eAAeD,IAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../reducers/post';\r\nimport { Card, Avatar } from 'antd';\r\nimport { LOAD_USER_REQUEST } from '../reducers/user';\r\n\r\nconst User = ({id}) => {\r\n    \r\n    const dispatch = useDispatch();\r\n    const { mainPosts } = useSelector(state => state.post);\r\n    const { userInfo } = useSelector(state => state.user);\r\n    useEffect( ()=> {\r\n        dispatch({\r\n            type: LOAD_USER_REQUEST,\r\n            data: id,\r\n        })\r\n        dispatch({\r\n            type: LOAD_USER_POSTS_REQUEST,\r\n            data: id,\r\n        })\r\n    }, []);\r\n    return(\r\n        <div>\r\n            {userInfo ? \r\n            <Card\r\n            actions={[\r\n                <div key=\"twit\">짹짹<br></br>{userInfo.Post}</div>,\r\n                <div key=\"following\">팔로잉<br></br>{userInfo.Followings}</div>,\r\n                <div key=\"follower\">팔로워<br></br>{userInfo.Followers}</div>,\r\n              ]}\r\n            >\r\n                <Card.Meta\r\n                 avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n                 title={userInfo.nickname}\r\n                ></Card.Meta>\r\n            </Card>\r\n            : null}\r\n            {mainPosts.map(c=>( \r\n                <PostCard key={+c.createdAt} post={c}></PostCard>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\nUser.propTypes = {\r\n    id: PropTypes.number.isRequired, // 2. 이러면 컴포넌트의 props에도 전달이 가능함 : 서버>getInitialProps> User.props \r\n}\r\n\r\nUser.getInitialProps = async (context) => {\r\n    console.log('hashtag props on user.js' , context.query.id); // 서버에서 라우팅받은 정보가 넘어오는지 확인, _app.js에서 또 추가해줌\r\n    return { id: parseInt(context.query.id, 10) } // 1. 이러면 컴포넌트의 props에도 전달이 가능함 : 서버>getInitialProps> User.props \r\n};\r\nexport default User;"]},"metadata":{},"sourceType":"module"}