{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\n// root , 모든 페이지의 레이아웃 역할\nimport React from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport PropTypes from \"prop-types\";\nimport reducer from \"../reducers\";\nimport { Provider } from 'react-redux'; // 리덕스 스테이트를 제공해줌(컴포넌트)\n\nimport createSagaMiddleware from 'redux-saga';\nimport withReduxSaga from 'next-redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootSaga from \"../sagas\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\";\nimport Helmet from 'react-helmet';\nimport { Container } from 'next/app'; // _document.js 에서 renderpage 랜더링 할 수 있게 해줌\n\nvar Portfolio = function Portfolio(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  return (// Provider 가 최상위 컴포넌트이기 때문에 자식 컴포넌트들이 스토어에 접근할 수 있음\n    // 스토어는 state, action, reducer 가 합쳐진 것\n    __jsx(Container, null, __jsx(Provider, {\n      store: store\n    }, __jsx(Helmet, {\n      title: \"DSS PortFolio\",\n      htmlAttributes: {\n        lang: 'ko'\n      },\n      meta: [{\n        charSet: 'UTF-8'\n      }, {\n        name: 'viewport',\n        content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover'\n      }, {\n        'http-equiv': 'X-UA-Compatible',\n        content: 'IE=edge'\n      }, {\n        name: 'description',\n        content: 'DSS PortFolio'\n      }, {\n        name: 'og:title',\n        content: 'NodeBird'\n      }, {\n        name: 'og:description',\n        content: 'DSS PortFolio'\n      }, {\n        property: 'og:type',\n        content: 'website'\n      }],\n      link: [{\n        rel: 'shortcut icon',\n        href: '/favicon.ico'\n      }, {\n        rel: 'stylesheet',\n        href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.css'\n      }, {\n        rel: 'stylesheet',\n        href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css'\n      }, {\n        rel: 'stylesheet',\n        href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css'\n      }]\n    }), __jsx(AppLayout, null, __jsx(Component, pageProps))))\n  );\n};\n\nPortfolio.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  // JSX 에 들어가는 모든것(문자열,컴포넌트,태그,숫자 등)\n  store: PropTypes.object.isRequired,\n  // isRequired : 필수값( 반드시 props가 존재, 없으면 경고 )\n  pageProps: PropTypes.object.isRequired\n};\n\nPortfolio.getInitialProps = function _callee(context) {\n  var ctx, Component, pageProps, state, cookie;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(context);\n          ctx = context.ctx, Component = context.Component;\n          pageProps = {};\n          state = ctx.store.getState(); // AppLayout 부분 SSR구조변경 \n          // 리덕스 사가 호출순서 대로 코딩할 것.\n\n          cookie = ctx.isServer ? ctx.req.headers.cookie : ''; // 클라이언트>서버 구조일땐 브라우저가 쿠키를 같이 넣어줬었는데(withCridentials:true),\n\n          if (ctx.isServer && cookie) {\n            // 서버일때(SSR)와 아닐때가 있기때문에 분기처리 해줌\n            axios.defaults.headers.Cookie = cookie; // SSR은 직접 쿠키를 넣어줘야함\n          }\n\n          if (!state.user.me) {\n            // AppLayout 에서 !me 일때 디스패치 해줬던 것 - 스토어에서 me 정보를 가져오기\n            ctx.store.dispatch({\n              type: LOAD_USER_REQUEST\n            });\n          }\n\n          if (!Component.getInitialProps) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(Component.getInitialProps(ctx));\n\n        case 10:\n          pageProps = _context.sent;\n\n        case 11:\n          return _context.abrupt(\"return\", {\n            pageProps: pageProps\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, function (store) {\n    return function (next) {\n      return function (action) {\n        //리덕스 사가 에러 찾는법 - 커스텀 미들웨어\n        console.log(action);\n        next(action);\n      };\n    };\n  }]; // 보안상 아래 부분은 실 배포용인지 개발용인지 구분\n\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && true && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer); // 여기에 store 커스터마이징\n\n  store.sagaTask = sagaMiddleware.run(rootSaga); //SSR 추가\n\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Portfolio)); // 컴포넌트를 감싸줌(고차 컴포넌트- 기존컴포넌트 확장)","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/Ver2/frontend/pages/_app.js"],"names":["React","AppLayout","PropTypes","reducer","Provider","createSagaMiddleware","withReduxSaga","withRedux","createStore","applyMiddleware","compose","rootSaga","LOAD_USER_REQUEST","axios","Helmet","Container","Portfolio","Component","store","pageProps","lang","charSet","name","content","property","rel","href","propTypes","elementType","isRequired","object","getInitialProps","context","console","log","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","next","action","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["// root , 모든 페이지의 레이아웃 역할\r\nimport React from \"react\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PropTypes from \"prop-types\";\r\nimport reducer from \"../reducers\"; \r\nimport { Provider } from 'react-redux'; // 리덕스 스테이트를 제공해줌(컴포넌트)\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport withReduxSaga from 'next-redux-saga';\r\nimport withRedux from 'next-redux-wrapper'\r\nimport { createStore, applyMiddleware, compose} from 'redux';\r\nimport rootSaga from \"../sagas\";\r\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\r\nimport axios from \"axios\";\r\nimport Helmet from 'react-helmet';\r\nimport { Container } from 'next/app'; // _document.js 에서 renderpage 랜더링 할 수 있게 해줌\r\nconst Portfolio = ({ Component, store, pageProps }) => {\r\n  return (\r\n    // Provider 가 최상위 컴포넌트이기 때문에 자식 컴포넌트들이 스토어에 접근할 수 있음\r\n    // 스토어는 state, action, reducer 가 합쳐진 것\r\n    <Container>\r\n     <Provider store={store}>\r\n      <Helmet\r\n        title=\"DSS PortFolio\"\r\n        htmlAttributes={{ lang: 'ko'}}\r\n        meta={[{\r\n          charSet:'UTF-8',\r\n        },{\r\n          name:'viewport', \r\n          content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover',\r\n        }, {\r\n          'http-equiv': 'X-UA-Compatible', content: 'IE=edge',\r\n        }, {\r\n          name: 'description', content: 'DSS PortFolio',\r\n        }, {\r\n          name: 'og:title', content: 'NodeBird',\r\n        }, {\r\n          name: 'og:description', content: 'DSS PortFolio',\r\n        }, {\r\n          property: 'og:type', content: 'website',\r\n        }]}\r\n        link={[{\r\n          rel: 'shortcut icon', href: '/favicon.ico',\r\n        }, {\r\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.css',\r\n        }, {\r\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css',\r\n        }, {\r\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css',\r\n        }]}\r\n      >\r\n      </Helmet>\r\n        <AppLayout>\r\n          <Component {...pageProps}></Component>\r\n        </AppLayout>\r\n    </Provider>\r\n   </Container>\r\n  );\r\n};\r\n\r\nPortfolio.propTypes = {\r\n  Component: PropTypes.elementType.isRequired, // JSX 에 들어가는 모든것(문자열,컴포넌트,태그,숫자 등)\r\n  store: PropTypes.object.isRequired, // isRequired : 필수값( 반드시 props가 존재, 없으면 경고 )\r\n  pageProps : PropTypes.object.isRequired,\r\n};\r\n\r\nPortfolio.getInitialProps = async (context) =>{\r\n  console.log(context);\r\n  const { ctx, Component } = context;\r\n  let pageProps = {};\r\n  const state = ctx.store.getState();// AppLayout 부분 SSR구조변경 \r\n  // 리덕스 사가 호출순서 대로 코딩할 것.\r\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';// 클라이언트>서버 구조일땐 브라우저가 쿠키를 같이 넣어줬었는데(withCridentials:true),\r\n  if(ctx.isServer && cookie){ // 서버일때(SSR)와 아닐때가 있기때문에 분기처리 해줌\r\n    axios.defaults.headers.Cookie = cookie; // SSR은 직접 쿠키를 넣어줘야함\r\n  }\r\n  if(!state.user.me){ // AppLayout 에서 !me 일때 디스패치 해줬던 것 - 스토어에서 me 정보를 가져오기\r\n    ctx.store.dispatch({\r\n      type: LOAD_USER_REQUEST,\r\n    })\r\n  }\r\n  if(Component.getInitialProps){\r\n    pageProps = await Component.getInitialProps(ctx);  // 라이프사이클: 1. server에서 라우팅, 2. page에서 getInit, 3. 여기로 전달(ctx)\r\n  }\r\n  return { pageProps };\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware , (store)=>(next)=>(action)=>{ //리덕스 사가 에러 찾는법 - 커스텀 미들웨어\r\n    console.log(action);\r\n    next(action);\r\n  }];\r\n  // 보안상 아래 부분은 실 배포용인지 개발용인지 구분\r\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares),) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f, ) \r\n  const store = createStore(reducer, initialState, enhancer);\r\n  // 여기에 store 커스터마이징\r\n  store.sagaTask = sagaMiddleware.run(rootSaga); //SSR 추가\r\n  return store;\r\n}\r\n\r\nexport default withRedux(configureStore)(withReduxSaga(Portfolio));// 컴포넌트를 감싸줌(고차 컴포넌트- 기존컴포넌트 확장)\r\n"]},"metadata":{},"sourceType":"module"}