{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Helmet 으로 html 검색엔진의 규격을 맞췄지만, 제대로 사용하려면 SSR 적용해줘야함\n// 1. 처음 _documnet 랜더링 > _app 랜더링 + 그안의 컴포넌트 랜더링\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Document, { Main, NextScript } from 'next/document';\nimport { Helmet } from 'react-helmet';\nimport { ServerStyleSheet } from 'styled-components'; // styled-component SSR\n\nclass MyDocument extends Document {\n  static async getInitialProps(context) {\n    const sheet = new ServerStyleSheet(); // 이걸 해줘야 검색엔진에서 다큐맨터리는 랜더링 되는데 안에있는 _app.js 가 랜더링 됨\n\n    try {\n      const page = context.renderPage(App => props => sheet.collectStyles(__jsx(App, props)));\n      const initialProps = await Document.getInitialProps(context);\n      const styleTags = sheet.getStyleElement();\n      return _objectSpread({}, page, {}, initialProps, {\n        styles: __jsx(React.Fragment, null, initialProps.styles),\n        helmet: Helmet.renderStatic(),\n        styleTags\n      }); // SSR\n    } finally {\n      sheet.seal();\n    }\n  }\n\n  render() {\n    const _this$props$helmet = this.props.helmet,\n          {\n      htmlAttributes,\n      bodyAttributes\n    } = _this$props$helmet,\n          helmet = _objectWithoutProperties(_this$props$helmet, [\"htmlAttributes\", \"bodyAttributes\"]); // ...helmet 안에 태그들이 들어있는데, 반복문으로 리엑트 컴포넌트로 만들어서 head 안에 붙여줌\n\n\n    const htmlAttrs = htmlAttributes.toComponent();\n    const bodyAttrs = bodyAttributes.toComponent();\n    return __jsx(\"html\", htmlAttrs, __jsx(\"head\", null, this.props.styleTags, Object.values(helmet).map(el => el.toComponent())), __jsx(\"body\", bodyAttrs, __jsx(Main, null), false // 익스플로러(옛 브라우저) 최신코드 호환 가능, 서비스 속도 느려질 수 있음\n    && __jsx(\"script\", {\n      src: \"https://polyfill.io/v3/polyfill.min.js?features=es6,es7,es8,es9,NodeList.prototype.forEach&flags=gated\"\n    }), __jsx(NextScript, null)));\n  }\n\n}\n\nMyDocument.propTypes = {\n  helmet: PropTypes.object.isRequired,\n  styleTags: PropTypes.array.isRequired\n};\nexport default MyDocument;","map":null,"metadata":{},"sourceType":"module"}