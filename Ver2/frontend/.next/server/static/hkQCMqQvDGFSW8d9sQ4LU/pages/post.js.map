{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./pages/post.js","webpack:///external \"immer\"","webpack:///external \"react\"","webpack:///external \"react-redux\"","webpack:///./reducers/post.js","webpack:///external \"react-helmet\""],"names":["Post","id","singlePost","useSelector","state","post","User","nickname","content","name","property","Images","src","getInitialProps","context","store","dispatch","type","LOAD_POST_REQUEST","data","query","parseInt","initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","action","produce","draft","forEach","p","push","index","findIndex","v","i","splice","unshift","error","postIndex","postId","Comments","comment","comments","lastId","hasMorePost","concat","length","Likers","userId","likeIndex","filter"],"mappings":"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","file":"static\\hkQCMqQvDGFSW8d9sQ4LU\\pages\\post.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport post, { LOAD_POST_REQUEST } from '../reducers/post';\r\nimport Helmet from 'react-helmet';\r\nconst Post = ({ id }) =>{\r\n    const { singlePost } = useSelector(state => state.post);\r\n    return (\r\n        <>\r\n            <Helmet\r\n                title={`${singlePost.User.nickname}님의 글`}\r\n                description={singlePost.content}\r\n                meta={[{\r\n                    name:'description', content: singlePost.content,\r\n                },{\r\n                    property:'og:title', content: `${singlePost.User.nickname}님의 게시글`,\r\n                },{\r\n                    property:'og:description', content: `${singlePost.User.nickname}님의 게시글`,\r\n                },{\r\n                    property:'og:image', content: singlePost.Images[0] && `http://localhost:3065/${post.Images[0].src}`,\r\n                },{\r\n                    property:'og:url', content: `http://localhost:3060/post/${id}`,\r\n                }\r\n                ]}\r\n            >\r\n                <div>{ singlePost.content}</div>\r\n                <div>{ singlePost.User.nickname}</div>\r\n                <div>\r\n                    { singlePost.Images[0] && <img src={`http://localhost:3065/${singlePost.Images[0].src}`} />}\r\n                </div>\r\n            </Helmet>\r\n        </>\r\n    )\r\n}\r\nPost.getInitialProps = async (context)=>{\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.query.id,\r\n    });\r\n    return { id: parseInt(context.query.id, 10)};\r\n}\r\nPost.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n};\r\nexport default Post;","module.exports = require(\"immer\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");","import produce from 'immer';\r\nexport const initialState = {\r\n    mainPosts: [], // 화면에 보일 포스트들\r\n    imagePaths : [], // 미리보기 이미지 경로\r\n    addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n    isAddingPost : false, // 포스트 업로드 중 \r\n    postAdded: false, // 포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n    singlePost: null, // 개별포스트\r\n};\r\n\r\n\r\n\r\n//메인 포스트를 로딩\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n//해시태그 검색했을때 결과 로딩\r\nexport const LOAD_HASHTAG_POSTS_REQUEST ='LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS ='LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE ='LOAD_HASHTAG_POSTS_FAILURE';\r\n //사용자가 어떤 게시글을 썼는지 로딩\r\nexport const LOAD_USER_POSTS_REQUEST ='LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS ='LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE ='LOAD_USER_POSTS_FAILURE';\r\n//이미지 업로드\r\nexport const UPLOAD_IMAGES_REQUEST ='UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS ='UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE ='UPLOAD_IMAGES_FAILURE';\r\n//이미지 업로드 취소(동기)\r\nexport const REMOVE_IMAGE ='REMOVE_IMAGE';\r\n\r\n//포스트 추가\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n//포스트에 LIKE 누르는 액션\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n//포스트에 LIKE 취소하는 액션\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n//게시글에 댓글 남기기\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n//게시글 댓글 불러오기\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n//리트윗 하는 액션\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n//포스트 제거하는 액션\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n//개별 포스트 불러오기\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport default (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type){\r\n            case UPLOAD_IMAGES_REQUEST: {\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_SUCCESS: {\r\n                // immer 적용(코드정리, 불변성 유지해줌), immer 에서 draft 상태 체크 후 바뀐부분을 state에 적용\r\n                action.data.forEach((p)=>{\r\n                    draft.imagePaths.push(p);\r\n                });\r\n                break;\r\n                // immer 적용 전 코드\r\n                // return {\r\n                //     ...state,\r\n                //     imagePaths:[...state.imagePaths, ...action.data], // 이미지 미리보기 할 수 있는 경로들\r\n                // }\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE: {\r\n                break;\r\n            }\r\n            // 이미지 제거는 동기적으로 처리해도 되서 3분류안함\r\n            case REMOVE_IMAGE:{\r\n                const index = draft.imagePaths.findIndex((v,i)=> i ===action.index);\r\n                draft.imagePaths.splice(index, 1);\r\n                break;\r\n            }\r\n            // 게시글 작성\r\n            case ADD_POST_REQUEST: {\r\n                draft.isAddingPost = true;\r\n                draft.addPostErrorReason = '';\r\n                draft.postAdded = false;\r\n                break;\r\n            }\r\n            case ADD_POST_SUCCESS: {\r\n                draft.isAddingPost = false;\r\n                draft.mainPosts.unshift(action.data);\r\n                draft.postAdded = true;\r\n                draft.imagePaths = [];\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     isAddingPost: false,\r\n                //     mainPosts: [action.data, ...state.mainPosts],\r\n                //     postAdded: true,\r\n                //     imagePaths: [],\r\n                // }\r\n            }\r\n            case ADD_POST_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                    isAddingPost: false,\r\n                    addPostErrorReason: action.error,\r\n                }\r\n            }\r\n            // 댓글 달기\r\n            case ADD_COMMENT_REQUEST: {\r\n                return {\r\n                    ...state,\r\n                    isAddingComment: true,\r\n                    addCommentErrorReason: '',\r\n                    commentAdded: false,\r\n                }\r\n            }\r\n            case ADD_COMMENT_SUCCESS: {\r\n                // 어떤게시글에 댓글을 추가할지\r\n                const postIndex = draft.mainPosts.findIndex(v=> v.id === action.data.postId);\r\n                draft.mainPosts[postIndex].Comments.push(action.data.comment);\r\n                draft.isAddingComment = false;\r\n                draft.commentAdded = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // const Comments = [...post.Comments, action.data.comment];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = { ...post, Comments };\r\n                // return {\r\n                //   ...state,\r\n                //   isAddingComment: false,\r\n                //   mainPosts,\r\n                //   commentAdded: true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                    isAddingComment: false,\r\n                    addCommentErrorReason: action.error,\r\n                }\r\n            }\r\n            case LOAD_COMMENTS_SUCCESS: {\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                draft.mainPosts[postIndex].Comments = action.data.comments;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // const Comments = action.data.comments;\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = { ...post, Comments };\r\n                // return {\r\n                //   ...state,\r\n                //   mainPosts,\r\n                // };\r\n            }\r\n            case LOAD_MAIN_POSTS_REQUEST: \r\n            case LOAD_HASHTAG_POSTS_REQUEST: \r\n            case LOAD_USER_POSTS_REQUEST: {    \r\n                draft.mainPosts = !action.lastId ? [] : draft.mainPosts;\r\n                draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: action.lastId === 0 ? [] : state.mainPosts,// 처음게시글 불러올땐 기존게시글 초기화,더 불러올땐 기존 게시글 유지(스크롤링) \r\n                //     hasMorePost : action.lastId ? state.hasMorePost : true, // 처음불러올땐 더보기 활성화 lastId = 0 (false), 더 불러오는 중일땐 기존상태 유지\r\n                // }\r\n            }\r\n            case LOAD_MAIN_POSTS_SUCCESS: \r\n            case LOAD_HASHTAG_POSTS_SUCCESS: \r\n            case LOAD_USER_POSTS_SUCCESS: {\r\n                return {\r\n                    ...state,\r\n                    mainPosts: state.mainPosts.concat(action.data),\r\n                    hasMorePost: action.data.length === 10,\r\n                }\r\n            }\r\n            case LOAD_MAIN_POSTS_FAILURE: \r\n            case LOAD_HASHTAG_POSTS_FAILURE: \r\n            case LOAD_USER_POSTS_FAILURE: {\r\n                break;\r\n            }\r\n            case LIKE_POST_REQUEST: {\r\n                break;\r\n            }\r\n            case LIKE_POST_SUCCESS: {\r\n                // 불변성때문에, 바뀔 객체만 새로 만들어줘야함\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n                draft.mainPosts[postIndex].Likers.unshift( {id: action.data.userId});\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n                // const post = state.mainPosts[postIndex];\r\n                // const Likers = [{ id : action.data.userId }, ...post.Likers];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = {...post, Likers}; //불변성 유지 후 다시 구성하는 부분\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                // }\r\n            }\r\n            case LIKE_POST_FAILURE: {\r\n                break;\r\n            }\r\n            case UNLIKE_POST_REQUEST: {\r\n                break;\r\n            }\r\n            case UNLIKE_POST_SUCCESS: {\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v=>v.id === action.data.userId);\r\n                draft.mainPosts[postIndex].Likers.splice(likeIndex, 1)\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n                // const post = state.mainPosts[postIndex];\r\n                // const Likers = post.Likers.filter(v=> v.id !== action.data.userId); // 좋아요 목록중 내 아이디 제거 \r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = {...post, Likers};\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                // }\r\n            }\r\n            case UNLIKE_POST_FAILURE: {\r\n                break;\r\n            }\r\n            case RETWEET_REQUEST: {\r\n                break;\r\n            }\r\n            case RETWEET_SUCCESS: {\r\n                return {\r\n                    ...state,\r\n                    mainPosts: [action.data, ...state.mainPosts], // 기존 게시글 앞에 받아온 게시글을 받아오기\r\n                }\r\n            }\r\n            case RETWEET_FAILURE: {\r\n                break;\r\n            }\r\n            case REMOVE_POST_REQUEST: {\r\n                break;\r\n            }\r\n            case REMOVE_POST_SUCCESS: {\r\n                return {\r\n                    ...state,\r\n                    mainPosts: state.mainPosts.filter(v=>v.id !== action.data),\r\n                }\r\n            }\r\n            case REMOVE_POST_FAILURE: {\r\n                break;\r\n            }\r\n            case LOAD_POST_SUCCESS:{\r\n                draft.singlePost = action.data;\r\n                break;\r\n            }\r\n            default:{\r\n                break;\r\n            }\r\n        }\r\n    });\r\n};\r\n","module.exports = require(\"react-helmet\");"],"sourceRoot":""}