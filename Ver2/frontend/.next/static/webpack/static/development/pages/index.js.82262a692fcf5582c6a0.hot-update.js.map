{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.82262a692fcf5582c6a0.hot-update.js","sources":["webpack:///./reducers/post.js"],"sourcesContent":["import produce from 'immer';\r\nexport const initialState = {\r\n    mainPosts: [], // 화면에 보일 포스트들\r\n    imagePaths : [], // 미리보기 이미지 경로\r\n    addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n    isAddingPost : false, // 포스트 업로드 중 \r\n    postAdded: false, // 포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n    singlePost: null, // 개별포스트\r\n};\r\n\r\n\r\n\r\n//메인 포스트를 로딩\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n//해시태그 검색했을때 결과 로딩\r\nexport const LOAD_HASHTAG_POSTS_REQUEST ='LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS ='LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE ='LOAD_HASHTAG_POSTS_FAILURE';\r\n //사용자가 어떤 게시글을 썼는지 로딩\r\nexport const LOAD_USER_POSTS_REQUEST ='LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS ='LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE ='LOAD_USER_POSTS_FAILURE';\r\n//이미지 업로드\r\nexport const UPLOAD_IMAGES_REQUEST ='UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS ='UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE ='UPLOAD_IMAGES_FAILURE';\r\n//이미지 업로드 취소(동기)\r\nexport const REMOVE_IMAGE ='REMOVE_IMAGE';\r\n\r\n//포스트 추가\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n//포스트에 LIKE 누르는 액션\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n//포스트에 LIKE 취소하는 액션\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n//게시글에 댓글 남기기\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n//게시글 댓글 불러오기\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n//리트윗 하는 액션\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n//포스트 제거하는 액션\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n//개별 포스트 불러오기\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport default (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type){\r\n            case UPLOAD_IMAGES_REQUEST: {\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_SUCCESS: {\r\n                // immer 적용(코드정리, 불변성 유지해줌), immer 에서 draft 상태 체크 후 바뀐부분을 state에 적용\r\n                action.data.forEach((p)=>{\r\n                    draft.imagePaths.push(p);\r\n                });\r\n                break;\r\n                // immer 적용 전 코드\r\n                // return {\r\n                //     ...state,\r\n                //     imagePaths:[...state.imagePaths, ...action.data], // 이미지 미리보기 할 수 있는 경로들\r\n                // }\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE: {\r\n                break;\r\n            }\r\n            // 이미지 제거는 동기적으로 처리해도 되서 3분류안함\r\n            case REMOVE_IMAGE:{\r\n                const index = draft.imagePaths.findIndex((v,i)=> i ===action.index);\r\n                draft.imagePaths.splice(index, 1);\r\n                break;\r\n            }\r\n            // 게시글 작성\r\n            case ADD_POST_REQUEST: {\r\n                draft.isAddingPost = true;\r\n                draft.addPostErrorReason = '';\r\n                draft.postAdded = false;\r\n                break;\r\n            }\r\n            case ADD_POST_SUCCESS: {\r\n                draft.isAddingPost = false;\r\n                draft.mainPosts.unshift(action.data);\r\n                draft.postAdded = true;\r\n                draft.imagePaths = [];\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     isAddingPost: false,\r\n                //     mainPosts: [action.data, ...state.mainPosts],\r\n                //     postAdded: true,\r\n                //     imagePaths: [],\r\n                // }\r\n            }\r\n            case ADD_POST_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                    isAddingPost: false,\r\n                    addPostErrorReason: action.error,\r\n                }\r\n            }\r\n            // 댓글 달기\r\n            case ADD_COMMENT_REQUEST: {\r\n                return {\r\n                    ...state,\r\n                    isAddingComment: true,\r\n                    addCommentErrorReason: '',\r\n                    commentAdded: false,\r\n                }\r\n            }\r\n            case ADD_COMMENT_SUCCESS: {\r\n                // 어떤게시글에 댓글을 추가할지\r\n                const postIndex = draft.mainPosts.findIndex(v=> v.id === action.data.postId);\r\n                draft.mainPosts[postIndex].Comments.push(action.data.comment);\r\n                draft.isAddingComment = false;\r\n                draft.commentAdded = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // const Comments = [...post.Comments, action.data.comment];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = { ...post, Comments };\r\n                // return {\r\n                //   ...state,\r\n                //   isAddingComment: false,\r\n                //   mainPosts,\r\n                //   commentAdded: true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE: {\r\n                return {\r\n                    ...state,\r\n                    isAddingComment: false,\r\n                    addCommentErrorReason: action.error,\r\n                }\r\n            }\r\n            case LOAD_COMMENTS_SUCCESS: {\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                draft.mainPosts[postIndex].Comments = action.data.comments;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                // const post = state.mainPosts[postIndex];\r\n                // const Comments = action.data.comments;\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = { ...post, Comments };\r\n                // return {\r\n                //   ...state,\r\n                //   mainPosts,\r\n                // };\r\n            }\r\n            case LOAD_MAIN_POSTS_REQUEST: \r\n            case LOAD_HASHTAG_POSTS_REQUEST: \r\n            case LOAD_USER_POSTS_REQUEST: {    \r\n                draft.mainPosts = !action.lastId ? [] : draft.mainPosts;\r\n                draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\r\n                break;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: action.lastId === 0 ? [] : state.mainPosts,// 처음게시글 불러올땐 기존게시글 초기화,더 불러올땐 기존 게시글 유지(스크롤링) \r\n                //     hasMorePost : action.lastId ? state.hasMorePost : true, // 처음불러올땐 더보기 활성화 lastId = 0 (false), 더 불러오는 중일땐 기존상태 유지\r\n                // }\r\n            }\r\n            case LOAD_MAIN_POSTS_SUCCESS: \r\n            case LOAD_HASHTAG_POSTS_SUCCESS: \r\n            case LOAD_USER_POSTS_SUCCESS: {\r\n                return {\r\n                    ...state,\r\n                    mainPosts: state.mainPosts.concat(action.data),\r\n                    hasMorePost: action.data.length === 10,\r\n                }\r\n            }\r\n            case LOAD_MAIN_POSTS_FAILURE: \r\n            case LOAD_HASHTAG_POSTS_FAILURE: \r\n            case LOAD_USER_POSTS_FAILURE: {\r\n                break;\r\n            }\r\n            case LIKE_POST_REQUEST: {\r\n                break;\r\n            }\r\n            case LIKE_POST_SUCCESS: {\r\n                // 불변성때문에, 바뀔 객체만 새로 만들어줘야함\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n                draft.mainPosts[postIndex].Likers.unshift( {id: action.data.userId});\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n                // const post = state.mainPosts[postIndex];\r\n                // const Likers = [{ id : action.data.userId }, ...post.Likers];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = {...post, Likers}; //불변성 유지 후 다시 구성하는 부분\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                // }\r\n            }\r\n            case LIKE_POST_FAILURE: {\r\n                break;\r\n            }\r\n            case UNLIKE_POST_REQUEST: {\r\n                break;\r\n            }\r\n            case UNLIKE_POST_SUCCESS: {\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v=>v.id === action.data.userId);\r\n                draft.mainPosts[postIndex].Likers.splice(likeIndex, 1)\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId) ;\r\n                // const post = state.mainPosts[postIndex];\r\n                // const Likers = post.Likers.filter(v=> v.id !== action.data.userId); // 좋아요 목록중 내 아이디 제거 \r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = {...post, Likers};\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                // }\r\n            }\r\n            case UNLIKE_POST_FAILURE: {\r\n                break;\r\n            }\r\n            case RETWEET_REQUEST: {\r\n                break;\r\n            }\r\n            case RETWEET_SUCCESS: {\r\n                return {\r\n                    ...state,\r\n                    mainPosts: [action.data, ...state.mainPosts], // 기존 게시글 앞에 받아온 게시글을 받아오기\r\n                }\r\n            }\r\n            case RETWEET_FAILURE: {\r\n                break;\r\n            }\r\n            case REMOVE_POST_REQUEST: {\r\n                break;\r\n            }\r\n            case REMOVE_POST_SUCCESS: {\r\n                return {\r\n                    ...state,\r\n                    mainPosts: state.mainPosts.filter(v=>v.id !== action.data),\r\n                }\r\n            }\r\n            case REMOVE_POST_FAILURE: {\r\n                break;\r\n            }\r\n            case LOAD_POST_SUCCESS:{\r\n                draft.singlePost = action.data;\r\n                break;\r\n            }\r\n            default:{\r\n                break;\r\n            }\r\n        }\r\n    });\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAcxMA;AA0MA;AACA;;;;A","sourceRoot":""}