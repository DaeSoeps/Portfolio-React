{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.13105c8ee36c05aa3b33.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["// root , 모든 페이지의 레이아웃 역할\r\nimport React from \"react\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PropTypes from \"prop-types\";\r\nimport reducer from \"../reducers\"; \r\nimport { Provider } from 'react-redux'; // 리덕스 스테이트를 제공해줌(컴포넌트)\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport withReduxSaga from 'next-redux-saga';\r\nimport withRedux from 'next-redux-wrapper'\r\nimport { createStore, applyMiddleware, compose} from 'redux';\r\nimport rootSaga from \"../sagas\";\r\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\r\nimport axios from \"axios\";\r\nimport Helmet from 'react-helmet';\r\nimport { Container } from 'next/app'; // _document.js 에서 renderpage 랜더링 할 수 있게 해줌 (검색엔진에서 head 부분 노출시켜줌)\r\nconst Portfolio = ({ Component, store, pageProps }) => {\r\n  return (\r\n    // Provider 가 최상위 컴포넌트이기 때문에 자식 컴포넌트들이 스토어에 접근할 수 있음\r\n    // 스토어는 state, action, reducer 가 합쳐진 것\r\n    <Container>\r\n     <Provider store={store}>\r\n      <Helmet\r\n        title=\"DSS PortFolio\"\r\n        htmlAttributes={{ lang: 'ko'}}\r\n        meta={[{\r\n          charSet:'UTF-8',\r\n        },{\r\n          name:'viewport', \r\n          content: 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover',\r\n        }, {\r\n          'http-equiv': 'X-UA-Compatible', content: 'IE=edge',\r\n        }, {\r\n          name: 'description', content: 'DSS PortFolio',\r\n        }, {\r\n          name: 'og:title', content: 'NodeBird',\r\n        }, {\r\n          name: 'og:description', content: 'DSS PortFolio',\r\n        }, {\r\n          property: 'og:type', content: 'website',\r\n        }]}\r\n        link={[{\r\n          rel: 'shortcut icon', href: '/favicon.ico',\r\n        }, {\r\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.css',\r\n        }, {\r\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css',\r\n        }, {\r\n          rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css',\r\n        }]}\r\n      >\r\n      </Helmet>\r\n        <AppLayout>\r\n          <Component {...pageProps}></Component>\r\n        </AppLayout>\r\n    </Provider>\r\n   </Container>\r\n  );\r\n};\r\n\r\nPortfolio.propTypes = {\r\n  Component: PropTypes.elementType.isRequired, // JSX 에 들어가는 모든것(문자열,컴포넌트,태그,숫자 등)\r\n  store: PropTypes.object.isRequired, // isRequired : 필수값( 반드시 props가 존재, 없으면 경고 )\r\n  pageProps : PropTypes.object.isRequired,\r\n};\r\n\r\nPortfolio.getInitialProps = async (context) =>{\r\n  console.log(context);\r\n  const { ctx, Component } = context;\r\n  let pageProps = {};\r\n  const state = ctx.store.getState();// AppLayout 부분 SSR구조변경 \r\n  // 리덕스 사가 호출순서 대로 코딩할 것.\r\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : '';// 클라이언트>서버 구조일땐 브라우저가 쿠키를 같이 넣어줬었는데(withCridentials:true),\r\n  if(ctx.isServer && cookie){ // 서버일때(SSR)와 아닐때가 있기때문에 분기처리 해줌\r\n    axios.defaults.headers.Cookie = cookie; // SSR은 직접 쿠키를 넣어줘야함\r\n  }\r\n  if(!state.user.me){ // AppLayout 에서 !me 일때 디스패치 해줬던 것 - 스토어에서 me 정보를 가져오기\r\n    ctx.store.dispatch({\r\n      type: LOAD_USER_REQUEST,\r\n    })\r\n  }\r\n  if(Component.getInitialProps){\r\n    pageProps = await Component.getInitialProps(ctx);  // 라이프사이클: 1. server에서 라우팅, 2. page에서 getInit, 3. 여기로 전달(ctx)\r\n  }\r\n  return { pageProps };\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware , (store)=>(next)=>(action)=>{ //리덕스 사가 에러 찾는법 - 커스텀 미들웨어\r\n    // console.log(action);\r\n    next(action);\r\n  }];\r\n  // 보안상 아래 부분은 실 배포용인지 개발용인지 구분\r\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares),) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f, ) \r\n  const store = createStore(reducer, initialState, enhancer);\r\n  // 여기에 store 커스터마이징\r\n  store.sagaTask = sagaMiddleware.run(rootSaga); //SSR 추가\r\n  return store;\r\n}\r\n\r\nexport default withRedux(configureStore)(withReduxSaga(Portfolio));// 컴포넌트를 감싸줌(고차 컴포넌트- 기존컴포넌트 확장)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAFA;AAIA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AACA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAGA;AAAA;AADA;AAzBA;AALA;AAyCA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAfA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAgBA;AACA;AAjBA;AAAA;AAkBA;AAAA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}