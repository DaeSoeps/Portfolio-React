{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.ac4ec2d4c8c1bf1a1859.hot-update.js","sources":["webpack:///./components/PostCard.js"],"sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\r\nimport { Card , Icon, Button, Avatar, Input, List, Form, Comment, Popover} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent';\r\nimport Link from 'next/link';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\nimport styled from 'styled-components';\r\nconst CardWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n`;\r\nconst PostCard = ( { post}) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me }= useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment }= useSelector(state => state.post);\r\n  const dispath = useDispatch();\r\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n  const onToggleComment = useCallback(() => {\r\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\r\n    setCommentFormOpened(prev =>!prev);\r\n    if(!commentFormOpened){ // 댓글창이 닫혀있는 경우\r\n      dispath({\r\n        type: LOAD_COMMENTS_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, []);\r\n  const onSubmitComment = useCallback((e) =>{\r\n    e.preventDefault();\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    dispath({\r\n      type:ADD_COMMENT_REQUEST,\r\n      data:{\r\n        postId: post.id,\r\n        content: commentText,\r\n      },\r\n    });\r\n  }, [me && me.id, commentText]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\r\n  const onChangeCommentText = useCallback((e) =>{\r\n    setCommentText(e.target.value);\r\n  },[]);\r\n  useEffect(()=>{\r\n    setCommentText('');\r\n  },[commentAdded ===true]);\r\n\r\n  const onToggleLike = useCallback( () =>{\r\n    if(!me){\r\n      return alert('로그인이 필요합니다!');\r\n    }\r\n    if(liked){  // Likers : 좋아요 누른 사람들 배열로 들어있음\r\n      dispath({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }else{ // 좋아요 안 누른 상태\r\n      dispath({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      })\r\n    }\r\n  }, [me && me.id, post && post.id, liked])\r\n  const onRetweet = useCallback( ()=> {\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispath({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    })\r\n  }, [me && me.id , post && post.id]);\r\n  const onFollow = useCallback( userId => () =>{ \r\n    dispath({\r\n      type: FOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n  const onUnfollow = useCallback( userId => () => {\r\n    dispath({\r\n      type: UNFOLLOW_USER_REQUEST,\r\n      data: userId,\r\n    });\r\n  }, []);\r\n  const onRemovePost = useCallback( userId => ()=>{\r\n    dispath({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: userId,\r\n    });\r\n  });\r\n  return (\r\n    <CardWrapper>\r\n    <Card\r\n      key={+post.createdAt}\r\n      cover={post.Images[0] && <PostImages images={post.Images}></PostImages>}\r\n      actions={[\r\n        <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet}></Icon>,\r\n        <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor=\"#eb2f96\" onClick={onToggleLike}></Icon>,\r\n        <Icon type=\"message\" key=\"message\" onClick={onToggleComment}></Icon>,\r\n        <Popover\r\n          key=\"ellipsis\"\r\n          content={(\r\n            <Button.Group>\r\n              {me && post.UserId === me.id\r\n                ? (\r\n                  <>\r\n                    <Button>수정</Button>\r\n                    <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\r\n                  </>\r\n                )\r\n                : <Button>신고</Button>}\r\n            </Button.Group>\r\n          )}\r\n        >\r\n            <Icon type=\"ellipsis\" />\r\n        </Popover>,\r\n      ]}\r\n      title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n      extra={!me || post.User.id === me.id ? null // 로그인안했을때, 자기 게시글일땐 안보임\r\n        : me.Followings && me.Followings.find(v => v.id === post.User.id) // 로그인 후 남의게시글 목록 볼때 작성자가 내 팔로잉 목록에 들어있을떄 (팔로잉중)\r\n        ? <Button onClick={onUnfollow(post.User.id)}>팔로우 취소</Button>\r\n        : <Button onClick={onFollow(post.User.id)}>팔로우</Button>\r\n      }\r\n    >\r\n    {post.RetweetId && post.Retweet ? (\r\n     <Card\r\n        cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images}></PostImages>}\r\n     >\r\n        <Card.Meta\r\n          avatar={\r\n            <Link href={{ pathname: '/user', query: { id: post.Retweet.User.id } }} as={`/user/${post.Retweet.User.id}`}> \r\n              <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a> \r\n            </Link>\r\n          } // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\r\n          title={post.Retweet.User.nickname}\r\n          description={<PostCardContent postData={post.Retweet.content}></PostCardContent>} \r\n        ></Card.Meta>\r\n      </Card> )\r\n      :(\r\n        <Card.Meta\r\n            avatar={<Link href={{ \r\n            pathname: '/user', \r\n            query: { id: post.User.id } }} as={`/user/${post.User.id}`}> \r\n              <a><Avatar>{post.User.nickname[0]}</Avatar></a> \r\n            </Link>\r\n          } // <a> 태그를 윗줄로 올리면 무한 GET 에러남 , 이유 모름....\r\n          title={post.User.nickname}\r\n          description={<PostCardContent postData={post.content}></PostCardContent>} \r\n        ></Card.Meta>\r\n      )}\r\n    </Card>\r\n  {commentFormOpened && (\r\n        <>\r\n          <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n              <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n          </Form>\r\n          <List\r\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments || []}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(<Link href={{ \r\n                    pathname: '/user', \r\n                    query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                    <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                  )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </CardWrapper>\r\n  );\r\n};\r\nPostCard.propTypes = {\r\n  post : PropTypes.shape({\r\n   User : PropTypes.object,\r\n   content : PropTypes.string,\r\n   img : PropTypes.string,\r\n   createdAt : PropTypes.object,\r\n  }).isRequired,\r\n}\r\n\r\nexport default PostCard;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AADA;AAIA;AAAA;AAJA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAMA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAMA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAMA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAMA;AAAA;AAAA;AARA;AAeA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AA7BA;AAkCA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AAPA;AAYA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAEA;AAFA;AADA;AAOA;AACA;AAAA;AAAA;AARA;AAcA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAEA;AAFA;AAMA;AARA;AAFA;AAJA;AAuBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;;;;A","sourceRoot":""}