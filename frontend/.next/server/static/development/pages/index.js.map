{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/PostCard.js","webpack:///./components/PostForm.js","webpack:///./pages/index.js","webpack:///./reducers/post.js","webpack:///./reducers/user.js","webpack:///external \"antd\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-redux\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React, {useState, useCallback, useEffect} from 'react';\r\nimport { Card , Icon, Button, Avatar, Input, List, Form, Comment} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ( { post}) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me }= useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment }= useSelector(state => state.post);\r\n  const dispath = useDispatch();\r\n  const onToggleComment = useCallback(() => {\r\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\r\n    setCommentFormOpened(prev =>!prev);\r\n  }, []);\r\n  const onSubmitComment = useCallback((e) =>{\r\n    e.preventDefault();\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    dispath({\r\n      type:ADD_COMMENT_REQUEST,\r\n      data:{\r\n        postId: post.id,\r\n      },\r\n    });\r\n  }, [me && me.id]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\r\n  const onChangeCommentText = useCallback((e) =>{\r\n    setCommentText(e.target.value);\r\n  },[]);\r\n  useEffect(()=>{\r\n    setCommentText('');\r\n  },[commentAdded ===true]);\r\n  return (\r\n    <div>\r\n    <Card\r\n    key={+post.createdAt}\r\n    cover={post.img && <img alt=\"example\" src={post.img}></img>}\r\n    actions={[\r\n      <Icon type=\"retweet\" key=\"retweet\"></Icon>,\r\n      <Icon type=\"heart\" key=\"heart\"></Icon>,\r\n      <Icon type=\"message\" key=\"message\" onClick={onToggleComment}></Icon>,\r\n      <Icon type=\"ellipsis\" key=\"ellipsis\"></Icon>\r\n    ]}\r\n    extra={<Button>팔로우</Button>}\r\n  >\r\n    <Card.Meta\r\n      avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n      title={post.User.nickname}\r\n      description={post.content}\r\n    ></Card.Meta>\r\n  </Card>\r\n  {commentFormOpened && (\r\n    <>\r\n      <Form onSubmit={onSubmitComment}>\r\n        <Form.Item>\r\n          <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText}></Input.TextArea>\r\n        </Form.Item> \r\n        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n      </Form>\r\n      <List \r\n        header ={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n        itemLayout=\"horizontal\"\r\n        dataSource={post.Comments || []}\r\n        renderItem={(item => (\r\n        <li>\r\n          <Comment \r\n           author={item.User.nickname}\r\n           avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n           content={item.content}\r\n\r\n          >\r\n\r\n          </Comment>\r\n        </li>\r\n      ))}     \r\n      > \r\n        \r\n      </List>\r\n    </>\r\n  )}\r\n  </div>\r\n  )\r\n}\r\nPostCard.propTypes = {\r\n  post : PropTypes.shape({\r\n   User : PropTypes.object,\r\n   content : PropTypes.string,\r\n   img : PropTypes.string,\r\n   createdAt : PropTypes.object,\r\n  })\r\n}\r\n\r\nexport default PostCard;","import React, { useCallback, useState, useEffect } from 'react';\r\nimport { Input, Form, Button } from \"antd\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST} from '../reducers/post';\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const onsubmitForm = useCallback((e)=>{\r\n    e.preventDefault(); // 이걸 안하면 새 페이지로 넘어감(싱글폼 들은 꼭 작성)\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data:{\r\n        text,\r\n      },\r\n    });\r\n  },[]);\r\n  const onChangeText= useCallback((e)=>{\r\n    setText(e.target.value);\r\n  },[]);\r\n  // 게시글 작성될때 작성폼 초기화\r\n  useEffect(()=>{\r\n    setText('')\r\n  },[postAdded === true]);\r\n    return (\r\n        <Form style={{ margin: '10px 0 20 px' }} encType=\"multipart/form-data\" onSubmit={onsubmitForm}>\r\n        <Input.TextArea\r\n          maxLength={140}\r\n          placeholder=\"어떤 신기한 일이 있었나요?\"\r\n          value={text}\r\n          onChange={onChangeText}\r\n        ></Input.TextArea>\r\n        <div>\r\n          <Button>이미지 업로드</Button>\r\n          <Button\r\n            type=\"primary\"\r\n            style={{ float: \"right\" }}\r\n            htmlType=\"submit\"\r\n            loading={isAddingPost}\r\n          >\r\n            짹짹\r\n          </Button>\r\n        </div>\r\n        <div>\r\n          {imagePaths.map((v) => {\r\n            return (\r\n              <div key={v} style={{ display: \"inline-block\" }}>\r\n                <img\r\n                  src={\"http://localhost:3065/\"}\r\n                  style={{ width: \"200px\" }}\r\n                  alt={v}\r\n                ></img>\r\n                <div>\r\n                  <Button>제거</Button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Form>\r\n    )\r\n}\r\n\r\nexport default PostForm;","import React , {useEffect} from \"react\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginRequestAction, logoutRequestAction, SIGN_UP_REQUEST } from '../reducers/user';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const {user , isLoggedIn} = useSelector(state => state.user);\r\n  const { mainPosts } = useSelector(state => state.post);\r\n  console.log(user)\r\n  // useEffect(()=> {\r\n  //   dispatch({\r\n  //     type: SIGN_UP_REQUEST,\r\n  //   });\r\n  // }, []);\r\n  return (\r\n      <div>\r\n        {user ? <div>로그인 했습니다 : { user.nickname }</div> : <div>로그아웃 했습니다.</div> }\r\n       {isLoggedIn && <PostForm></PostForm> }\r\n       {mainPosts.map(c => {\r\n         return (\r\n           <PostCard key={c} post={c}></PostCard>\r\n         );\r\n       })}\r\n      </div>\r\n\r\n  );\r\n};\r\nexport default Home;\r\n","export const initialState = {\r\n    mainPosts: [{\r\n        id:1,\r\n        User: {\r\n            id:1,\r\n            nickname: '제로초',\r\n          },\r\n          content:'첫번째 게시글',\r\n          img:'https://www.google.com/imgres?imgurl=http%3A%2F%2Fnewsimg.hankookilbo.com%2F2019%2F04%2F29%2F201904291390027161_3.jpg&imgrefurl=https%3A%2F%2Fwww.hankookilbo.com%2FNews%2FRead%2F201904291390027161&tbnid=NpMi5nVF1QK1MM&vet=12ahUKEwjR1LT9oPfoAhUEUJQKHa2LAhMQMygBegUIARD-Ag..i&docid=k3mACyoxPXAFMM&w=680&h=448&q=%EA%B3%A0%EC%96%91%EC%9D%B4&ved=2ahUKEwjR1LT9oPfoAhUEUJQKHa2LAhMQMygBegUIARD-Ag',\r\n          Comments:[],\r\n    }], // 화면에 보일 포스트들\r\n    imagePaths : [], // 미리보기 이미지 경로\r\n    addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n    isAddingPost : false, // 포스트 업로드 중 \r\n    postAdded: false, // 포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n};\r\n\r\nconst dummyPost = {\r\n    id: 2,\r\n    User: {\r\n        id:1,\r\n        nickname: '게스트'\r\n    },\r\n    content: '나는 더미입니다.',\r\n    Comments: [],\r\n};\r\n\r\nconst dummyComment ={\r\n    User:{\r\n        id:1,\r\n        nickname:'dummy',\r\n    },\r\n    createdAt: new Date(),\r\n    content: '더미 댓글입니다.',\r\n}\r\n\r\n//메인 포스트를 로딩\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n//해시태그 검색했을때 결과 로딩\r\nexport const LOAD_HASHTAG_POSTS_REQUEST ='LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS ='LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE ='LOAD_HASHTAG_POSTS_FAILURE';\r\n //사용자가 어떤 게시글을 썼는지 로딩\r\nexport const LOAD_USER_POSTS_REQUEST ='LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS ='LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE ='LOAD_USER_POSTS_FAILURE';\r\n//이미지 업로드\r\nexport const UPLOAD_IMAGES_REQUEST ='UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS ='UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE ='UPLOAD_IMAGES_FAILURE';\r\n//이미지 업로드 취소(동기)\r\nexport const REMOVE_IMAGE ='REMOVE_IMAGE';\r\n\r\n//포스트 추가\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n//포스트에 LIKE 누르는 액션\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n//포스트에 LIKE 취소하는 액션\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n//게시글에 댓글 남기기\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n//게시글 댓글 불러오기\r\nexport const LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nexport const LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nexport const LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n//리트윗 하는 액션\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n//포스트 제거하는 액션\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nconst ADD_DUMMY = 'ADD_DUMMY' // ????\r\nconst addPost = {\r\n    type : ADD_POST_REQUEST,\r\n};\r\nconst addDummy = {\r\n    type: ADD_DUMMY,\r\n    data: {\r\n        content: 'Hello',\r\n        UserId:1,\r\n        User:{\r\n            nickname:'제로초',\r\n        },\r\n    },\r\n};\r\n\r\nconst reducer = ( state = initialState, action) => {\r\n    switch (action.type){\r\n        // 게시글 작성\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: true,\r\n                addPostErrorReason: '',\r\n                postAdded: false,\r\n            }\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                postAdded: true,\r\n            }\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostErrorReason: action.error,\r\n            }\r\n        }\r\n        // 댓글 달기\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: true,\r\n                addCommentErrorReason: '',\r\n                commentAdded: false,\r\n            }\r\n        }\r\n        case ADD_COMMENT_SUCCESS: {\r\n            // 어떤게시글에 댓글을 추가할지\r\n            const postIndex = state.mainPosts.findIndex( v=> v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = [...post.Comments, dummyComment];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = {...post, Comments};\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                mainPosts,\r\n                commentAdded: true,\r\n            }\r\n        }\r\n        case ADD_COMMENT_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                addCommentErrorReason: action.error,\r\n            }\r\n        }\r\n        case ADD_DUMMY: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [action.data, ...state.mainPosts]\r\n            };\r\n        }\r\n        default:{\r\n            return{\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer;","const dummyUser = {\r\n    nickname: \"Guest\",\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n    signUpData: {},\r\n    id:1,\r\n};\r\n\r\nexport const initialState = {\r\n    isLoggingOut: false, // 로그아웃 시도중\r\n    isLoggingIn: false, // 로그인 시도중\r\n    logInErrorReason: '', // 로그인 실패 사유\r\n    isSignedUp: false, // 회원가입 성공\r\n    isSigningUp: false, // 회원가입 시도중\r\n    singUpErrorReason: '', // 회원가입 실패 사유 \r\n    me: null, // 내정보\r\n    followingList: [], // 팔로잉 리스트\r\n    followerList: [],  // 팔로워 리스트\r\n    userInfo: null // 남의 정보\r\n};\r\n// 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\r\n//회원가입\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST'; \r\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS'; \r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; \r\n//로그인\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; \r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n//사용자 정보 불러오기\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST'; \r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n//로그아웃\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n//팔로우 목록\r\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\r\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\r\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\r\n//다른 사람을 팔로우\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n//다른 사람을 언팔로우\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n//팔로우한 사람을 제거\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n//리듀서의 단점때문에 만들어야 됨\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\n\r\n\r\nconst reducer = ( state = initialState, action) => {\r\n    switch (action.type){\r\n        case LOG_IN_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoggingIn: true,\r\n                logInErrorReason :'',               \r\n            };\r\n        }\r\n        case LOG_IN_SUCCESS :{\r\n            return{\r\n                ...state,\r\n                isLoggingIn: false,\r\n                me : action.data,\r\n                isLoading: false,\r\n            };\r\n        }\r\n        case LOG_IN_FAILURE :{\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                logInErrorReason : action.error,\r\n                me : null,\r\n            }\r\n        }\r\n        case LOG_OUT_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoggingOut : true, // 로그아웃버튼 로딩\r\n            };\r\n        }\r\n        case LOG_OUT_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoggingOut: false,\r\n                me : null\r\n            };\r\n        }\r\n        case SIGN_UP_REQUEST: {\r\n            return{\r\n                ...state,\r\n                isSigningUp : true,\r\n                isSignedUp : false,\r\n                singUpErrorReason : '',\r\n            };\r\n        }\r\n        case SIGN_UP_SUCCESS: {\r\n            return{\r\n                ...state,\r\n                signUpData: action.data,\r\n                isSigningUp : false,\r\n                isSignedUp : true,\r\n            };\r\n        }\r\n        case SIGN_UP_FAILURE: {\r\n            return{\r\n                ...state,\r\n                signUpData: action.data,\r\n                isSigningUp : false,\r\n                singUpErrorReason : action.error,\r\n            };\r\n        }\r\n        case LOAD_USER_REQUEST: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_USER_SUCCESS: {\r\n            return{\r\n                ...state,\r\n                me: action.data,\r\n            };\r\n        }\r\n        case LOAD_USER_FAILURE: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n        default: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n    } \r\n};\r\n\r\nexport default reducer;","module.exports = require(\"antd\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;;;;;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AARA;AASA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAjBA;AAoBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAFA;AACA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AAjEA;AAmEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7KA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAXA;AAaA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAIA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAGA;AAjFA;AAmFA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AChJA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}