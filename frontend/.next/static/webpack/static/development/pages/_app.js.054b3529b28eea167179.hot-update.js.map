{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.054b3529b28eea167179.hot-update.js","sources":["webpack:///./reducers/user.js","webpack:///./sagas/user.js"],"sourcesContent":["const dummyUser = {\r\n    nickname: \"Guest\",\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n    signUpData: {},\r\n};\r\n\r\nexport const initialState = {\r\n    isLoggedIn : false,\r\n    user : null,\r\n};\r\nexport const SIGN_UP = 'SING_UP';\r\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS'; // 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 엑션 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\nexport const LOG_OUT = 'LOG_OUT';\r\n\r\n//동적 데이터가 들어가기 위해 함수형으로 만듬\r\nexport const signUpAction = (data) => {\r\n    return{\r\n        type: SIGN_UP,\r\n        data: data,\r\n    };\r\n};\r\nexport const signUpSuccess = {\r\n    type: SIGN_UP_SUCCESS,\r\n}\r\nexport const loginAction = {\r\n    type: LOG_IN,\r\n};\r\nexport const logoutAction = {\r\n    type: LOG_OUT,\r\n};\r\nconst reducer = ( state = initialState, action) => {\r\n    switch (action.type){\r\n        case LOG_IN : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : true,\r\n                user : dummyUser,\r\n            };\r\n        }\r\n        case LOG_OUT : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : false,\r\n                user : null\r\n            };\r\n        }\r\n        case SIGN_UP: {\r\n            return{\r\n                ...state,\r\n                signUpData: action.data,\r\n            };\r\n        }\r\n        default: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n    } \r\n};\r\n\r\nexport default reducer;","import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\nfunction loginAPI(){\r\n// (3) 서버에 요청을 보냄\r\n}\r\nfunction* login(){ \r\n    try{\r\n        yield call(loginAPI); // (2)loginAPI 로 요청을 보냄\r\n        yield put({ \r\n            type:LOG_IN_SUCCESS\r\n        }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogin(){\r\n    //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\r\n    //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\r\n    while(true){\r\n        // take : 해당 액션이 dispatch 되면 제너레이터를 next하는 이펙트\r\n        yield take(LOG_IN_REQUEST);\r\n        // 사가 문법에서 put은 dispatch 와 동일\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    }\r\n    // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\r\n}\r\nexport default function* userSaga() {\r\n    // fork, call : 함수 호출, fork는 비동기 호출\r\n    yield all([\r\n        fork(watchLogin)\r\n    ])\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AAzBA;AA2BA;AACA;AACA;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAAA;;;;A","sourceRoot":""}