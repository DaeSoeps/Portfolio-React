{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.da76981105c74ac501ea.hot-update.js","sources":["webpack:///./components/PostForm.js","webpack:///./reducers/post.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport { Input, Form, Button } from \"antd\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST} from '../reducers/post';\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost } = useSelector(state => state.post);\r\n  const onsubmitForm = useCallback(()=>{\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data:{\r\n        text,\r\n      },\r\n    });\r\n  },[]);\r\n  const onChangeText= useCallback((e)=>{\r\n    estText(e.target.value);\r\n  },[]);\r\n    return (\r\n        <Form style={{ margin: '10px 0 20 px' }} encType=\"multipart/form-data\" onSubmit={onsubmitForm}>\r\n        <Input.TextArea\r\n          maxLength={140}\r\n          placeholder=\"어떤 신기한 일이 있었나요?\"\r\n          value={text}\r\n          onChange={onChangeText}\r\n        ></Input.TextArea>\r\n        <div>\r\n          <Button>이미지 업로드</Button>\r\n          <Button\r\n            type=\"primary\"\r\n            style={{ float: \"right\" }}\r\n            htmlType=\"submit\"\r\n            isLoading={isAddingPost}\r\n          >\r\n            짹짹\r\n          </Button>\r\n        </div>\r\n        <div>\r\n          {imagePaths.map((v) => {\r\n            return (\r\n              <div key={v} style={{ display: \"inline-block\" }}>\r\n                <img\r\n                  src={\"http://localhost:3065/\"}\r\n                  style={{ width: \"200px\" }}\r\n                  alt={v}\r\n                ></img>\r\n                <div>\r\n                  <Button>제거</Button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Form>\r\n    )\r\n}\r\n\r\nexport default PostForm;","export const initialState = {\r\n    mainPosts: [{\r\n        User: {\r\n            id:1,\r\n            nickname: '제로초',\r\n          },\r\n          content:'첫번째 게시글',\r\n          img:'https://www.google.com/imgres?imgurl=http%3A%2F%2Fnewsimg.hankookilbo.com%2F2019%2F04%2F29%2F201904291390027161_3.jpg&imgrefurl=https%3A%2F%2Fwww.hankookilbo.com%2FNews%2FRead%2F201904291390027161&tbnid=NpMi5nVF1QK1MM&vet=12ahUKEwjR1LT9oPfoAhUEUJQKHa2LAhMQMygBegUIARD-Ag..i&docid=k3mACyoxPXAFMM&w=680&h=448&q=%EA%B3%A0%EC%96%91%EC%9D%B4&ved=2ahUKEwjR1LT9oPfoAhUEUJQKHa2LAhMQMygBegUIARD-Ag'\r\n    }], // 화면에 보일 포스트들\r\n    imagePaths : [], // 미리보기 이미지 경로\r\n    addPostErrorReason: false, // 포스트 업로드 실패 사유\r\n    isAddingPost : false,\r\n};\r\n\r\nconst dummyPost = {\r\n    User: {\r\n        id:1,\r\n        nickname: '게스트'\r\n    },\r\n    content: '나는 더미입니다.',\r\n};\r\n\r\n//메인 포스트를 로딩\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n//해시태그 검색했을때 결과 로딩\r\nexport const LOAD_HASHTAG_POSTS_REQUEST ='LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS ='LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE ='LOAD_HASHTAG_POSTS_FAILURE';\r\n //사용자가 어떤 게시글을 썼는지 로딩\r\nexport const LOAD_USER_POSTS_REQUEST ='LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS ='LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE ='LOAD_USER_POSTS_FAILURE';\r\n//이미지 업로드\r\nexport const UPLOAD_IMAGES_REQUEST ='UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS ='UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE ='UPLOAD_IMAGES_FAILURE';\r\n//이미지 업로드 취소(동기)\r\nexport const REMOVE_IMAGE ='REMOVE_IMAGE';\r\n\r\n//포스트 추가\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n//포스트에 LIKE 누르는 액션\r\nconst LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nconst LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nconst LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n//포스트에 LIKE 취소하는 액션\r\nconst UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nconst UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nconst UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n//게시글에 댓글 남기기\r\nconst ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nconst ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nconst ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n//게시글 댓글 불러오기\r\nconst LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nconst LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nconst LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n//리트윗 하는 액션\r\nconst RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nconst RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nconst RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n//포스트 제거하는 액션\r\nconst REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nconst REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nconst REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nconst ADD_DUMMY = 'ADD_DUMMY' // ????\r\nconst addPost = {\r\n    type : ADD_POST_REQUEST,\r\n};\r\nconst addDummy = {\r\n    type: ADD_DUMMY,\r\n    data: {\r\n        content: 'Hello',\r\n        UserId:1,\r\n        User:{\r\n            nickname:'제로초',\r\n        },\r\n    },\r\n};\r\n\r\nconst reducer = ( state = initialState, action) => {\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: true,\r\n                addPostErrorReason: '',\r\n            }\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                mainPosts: [dummyPost, ...state.mainPosts]\r\n            }\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostErrorReason: action.error,\r\n            }\r\n        }\r\n        case ADD_DUMMY: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [action.data, ...state.mainPosts]\r\n            };\r\n        }\r\n        default:{\r\n            return{\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer;"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAXA;AAchCA;AAkCA;AACA;AACA;;;;A","sourceRoot":""}