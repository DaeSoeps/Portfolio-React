{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.a0a477098200fdc02c70.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\nfunction loginAPI(){\r\n// (3) 서버에 요청을 보냄\r\n}\r\nfunction* login(){ \r\n    try{\r\n        yield call(loginAPI); // (2)loginAPI 로 요청을 보냄\r\n        yield put({ \r\n            type:LOG_IN_SUCCESS\r\n        }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogin(){\r\n    while(true){\r\n        yield take(LOG_IN);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    }\r\n    yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\r\n}\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin)\r\n    ])\r\n};\r\n// take : 해당 액션이 dispatch 되면 제너레이터를 next하는 이펙트"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AAAA;;;;A","sourceRoot":""}