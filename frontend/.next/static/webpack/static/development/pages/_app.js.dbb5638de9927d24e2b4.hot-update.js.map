{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.dbb5638de9927d24e2b4.hot-update.js","sources":["webpack:///./pages/signup.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport { Form, Input, Checkbox, Button } from \"antd\";\r\nimport { SIGN_UP_REQUEST , isSigningUp } from \"../reducers/user\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// Coustom hook 훅에 기능을 추가해서 새로 만듬 ( 중복방지 등 )\r\n// useState(hook) 는 커스텀 훅 제외한 곳에서 사용하지 않기\r\nexport const userInput = (initValue = null) => {\r\n  const [value, setter] = useState(initValue);\r\n  const handler = useCallback(e => {\r\n    setter(e.target.value);\r\n  }, []);\r\n  return [value, handler];\r\n};\r\n\r\n////////////////////////////////\r\n\r\nconst Signup = () => {\r\n  const [id, setId] = useState(\"\");\r\n  const [nick, setNick] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordCheck, setPasswordCheck] = useState(\"\");\r\n  const [term, setTerm] = useState(false);\r\n  const [passwrodError, setpasswordError] = useState(false);\r\n  const [termError, setTermError] = useState(false);\r\n  const dispatch = useDispatch()\r\n  const { isSigningUp } = useSelector(state =>state.user)\r\n\r\n  const onSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      console.log({\r\n        id,\r\n        nick,\r\n        password,\r\n        passwordCheck,\r\n        term\r\n      });\r\n      if (password !== passwordCheck) {\r\n        return setpasswordError(true);\r\n      }\r\n      if (!term) {\r\n        return setTermError(true);\r\n      }\r\n      return dispatch({\r\n        type: SIGN_UP_REQUEST,\r\n        data:{\r\n        id,\r\n        password,\r\n        nick,\r\n        },\r\n      });\r\n    }, [password, passwordCheck, term]\r\n  );\r\n  const onChangeId = e => {\r\n    setId(e.target.value);\r\n  };\r\n  const onChangeNick = e => {\r\n    setNick(e.target.value);\r\n  };\r\n  const onChangePassword = e => {\r\n    setPassword(e.target.value);\r\n  };\r\n  const onChangePasswordChk = useCallback(\r\n    e => {\r\n      setpasswordError(e.target.value !== password);\r\n      setPasswordCheck(e.target.value);\r\n    },\r\n    [password]\r\n  );\r\n  const onChangeTerm = useCallback(e => {\r\n    setTermError(false);\r\n    setTerm(e.target.checked);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit} style={{ padding: 10 }}>\r\n        <div>\r\n          <label htmlFor=\"user-id\">아이디</label>\r\n          <br />\r\n          <Input\r\n            name=\"user-id\"\r\n            required\r\n            value={id}\r\n            onChange={onChangeId}\r\n          ></Input>\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"user-nick\">닉네임</label>\r\n          <Input\r\n            name=\"user-nick\"\r\n            required\r\n            value={nick}\r\n            onChange={onChangeNick}\r\n          ></Input>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"user-pass\">비밀번호</label>\r\n          <br />\r\n\r\n          <Input\r\n            name=\"user-pass\"\r\n            type=\"password\"\r\n            required\r\n            value={password}\r\n            onChange={onChangePassword}\r\n          ></Input>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"user-pass-chk\">비밀번호 체크</label>\r\n          <br />\r\n\r\n          <Input\r\n            name=\"user-pass-chk\"\r\n            type=\"password\"\r\n            required\r\n            value={passwordCheck}\r\n            onChange={onChangePasswordChk}\r\n          ></Input>\r\n          {passwrodError && (\r\n            <div style={{ color: \"red\" }}> 비밀번호가 일치하지 않습니다.</div>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <Checkbox name=\"user-term\" value={term} onChange={onChangeTerm}>\r\n            동의합니다.\r\n          </Checkbox>\r\n          {termError && (\r\n            <div style={{ color: \"red\" }}> 약관에 동의 해주세요.</div>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <div style={{ marginTop: 10 }}></div>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={isSigningUp}>\r\n            가입하기\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\nexport default Signup;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;;;;A","sourceRoot":""}