{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Song\\\\Desktop\\\\projectpf\\\\frontend\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n// root , 모든 페이지의 레이아웃 역할\nimport React from \"react\";\nimport Head from \"next/head\";\nimport AppLayout from \"../components/AppLayout\";\nimport PropTypes from \"prop-types\";\nimport reducer from \"../reducers\";\nimport { Provider } from 'react-redux'; // 리덕스 스테이트를 제공해줌(컴포넌트)\n\nimport createSagaMiddleware from 'redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootSaga from \"../sagas\";\n\nconst Portfolio = ({\n  Component,\n  store\n}) => {\n  return (// Provider 가 최상위 컴포넌트이기 때문에 자식 컴포넌트들이 스토어에 접근할 수 있음\n    // 스토어는 state, action, reducer 가 합쳐진 것\n    __jsx(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"PortFolio\"), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.css\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), __jsx(\"script\", {\n      src: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    })), __jsx(AppLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, __jsx(Component, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    })))\n  );\n};\n\nPortfolio.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  // JSX 에 들어가는 모든것(문자열,컴포넌트,태그,숫자 등)\n  store: PropTypes.object.isRequired // isRequired : 필수값( 반드시 props가 존재, 없으면 경고 )\n\n};\n\nconst configureStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware]; // 보안상 아래 부분은 실 배포용인지 개발용인지 구분\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), !options.isServer && true && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer); // 여기에 store 커스터마이징\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(Portfolio); // 컴포넌트를 감싸줌(고차 컴포넌트- 기존컴포넌트 확장)","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/frontend/pages/_app.js"],"names":["React","Head","AppLayout","PropTypes","reducer","Provider","createSagaMiddleware","withRedux","createStore","applyMiddleware","compose","rootSaga","Portfolio","Component","store","propTypes","elementType","isRequired","object","configureStore","initialState","options","sagaMiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAAwC;;AACxC,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAqD,OAArD;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA0B;AAC1C,SACE;AACA;AACD,UAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AACE,MAAA,GAAG,EAAC,YADN;AAEE,MAAA,IAAI,EAAC,8DAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAME;AAAQ,MAAA,GAAG,EAAC,6DAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADH,EASG,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATH;AAHD;AAiBD,CAlBD;;AAoBAF,SAAS,CAACG,SAAV,GAAsB;AACpBF,EAAAA,SAAS,EAAEV,SAAS,CAACa,WAAV,CAAsBC,UADb;AACyB;AAC7CH,EAAAA,KAAK,EAAEX,SAAS,CAACe,MAAV,CAAiBD,UAFJ,CAEgB;;AAFhB,CAAtB;;AAKA,MAAME,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAChD,QAAMC,cAAc,GAAGhB,oBAAoB,EAA3C;AACA,QAAMiB,WAAW,GAAG,CAACD,cAAD,CAApB,CAFgD,CAGhD;;AACA,QAAME,QAAQ,GAAG,QAAwCd,OAAO,CAACD,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAA/C,GAAoFb,OAAO,CAACD,eAAe,CAAC,GAAGc,WAAJ,CAAhB,EAAkC,CAACF,OAAO,CAACI,QAAT,YAAsDC,MAAM,CAACC,4BAAP,KAAwC,WAA9F,GAA4GD,MAAM,CAACC,4BAAP,EAA5G,GAAqJC,CAAD,IAAOA,CAA7L,CAA5G;AACA,QAAMd,KAAK,GAAGN,WAAW,CAACJ,OAAD,EAAUgB,YAAV,EAAwBI,QAAxB,CAAzB,CALgD,CAMhD;;AACAF,EAAAA,cAAc,CAACO,GAAf,CAAmBlB,QAAnB;AACA,SAAOG,KAAP;AACD,CATD;;AAWA,eAAeP,SAAS,CAACY,cAAD,CAAT,CAA0BP,SAA1B,CAAf,C,CAAoD","sourcesContent":["// root , 모든 페이지의 레이아웃 역할\r\nimport React from \"react\";\r\nimport Head from \"next/head\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PropTypes from \"prop-types\";\r\nimport reducer from \"../reducers\"; \r\nimport { Provider } from 'react-redux'; // 리덕스 스테이트를 제공해줌(컴포넌트)\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport withRedux from 'next-redux-wrapper'\r\nimport { createStore, applyMiddleware, compose} from 'redux';\r\nimport rootSaga from \"../sagas\";\r\n\r\nconst Portfolio = ({ Component, store }) => {\r\n  return (\r\n    // Provider 가 최상위 컴포넌트이기 때문에 자식 컴포넌트들이 스토어에 접근할 수 있음\r\n    // 스토어는 state, action, reducer 가 합쳐진 것\r\n   <Provider store={store}>\r\n      <Head>\r\n        <title>PortFolio</title>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.css\"\r\n        ></link>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.11/antd.js\"></script>\r\n      </Head>\r\n      <AppLayout>\r\n        <Component></Component>\r\n      </AppLayout>\r\n   </Provider>\r\n  );\r\n};\r\n\r\nPortfolio.propTypes = {\r\n  Component: PropTypes.elementType.isRequired, // JSX 에 들어가는 모든것(문자열,컴포넌트,태그,숫자 등)\r\n  store: PropTypes.object.isRequired, // isRequired : 필수값( 반드시 props가 존재, 없으면 경고 )\r\n};\r\n\r\nconst configureStore = (initialState, options) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  // 보안상 아래 부분은 실 배포용인지 개발용인지 구분\r\n  const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares),) : compose(applyMiddleware(...middlewares), !options.isServer && typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f, ) \r\n  const store = createStore(reducer, initialState, enhancer);\r\n  // 여기에 store 커스터마이징\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n}\r\n\r\nexport default withRedux(configureStore)(Portfolio);// 컴포넌트를 감싸줌(고차 컴포넌트- 기존컴포넌트 확장)\r\n"]},"metadata":{},"sourceType":"module"}