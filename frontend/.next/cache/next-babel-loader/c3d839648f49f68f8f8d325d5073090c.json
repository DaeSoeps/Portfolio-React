{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst dummyUser = {\n  nickname: \"Guest\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {}\n};\nexport const initialState = {\n  isLoggedIn: false,\n  user: null\n};\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS'; // 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\n\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 엑션 이름\n\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT = 'LOG_OUT'; //동적 데이터가 들어가기 위해 함수형으로 만듬\n\nexport const signUpAction = data => {\n  return {\n    type: SIGN_UP,\n    data: data\n  };\n};\nexport const signUpSuccess = {\n  type: SIGN_UP_SUCCESS\n};\nexport const loginAction = {\n  type: LOG_IN\n};\nexport const logoutAction = {\n  type: LOG_OUT\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/frontend/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","signUpData","initialState","isLoggedIn","user","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT","signUpAction","data","type","SIGN_UP","signUpSuccess","loginAction","LOG_IN","logoutAction","reducer","state","action"],"mappings":";;;;;;;;;;;;AAAA,MAAMA,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,OADI;AAEdC,EAAAA,IAAI,EAAE,EAFQ;AAGdC,EAAAA,UAAU,EAAE,EAHE;AAIdC,EAAAA,SAAS,EAAE,EAJG;AAKdC,EAAAA,UAAU,EAAE;AALE,CAAlB;AAQA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAG,KADW;AAExBC,EAAAA,IAAI,EAAG;AAFiB,CAArB;AAIP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB,C,CAA2C;;AAClD,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAAyC;;AAChD,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAClC,SAAM;AACFC,IAAAA,IAAI,EAAEC,OADJ;AAEFF,IAAAA,IAAI,EAAEA;AAFJ,GAAN;AAIH,CALM;AAMP,OAAO,MAAMG,aAAa,GAAG;AACzBF,EAAAA,IAAI,EAAER;AADmB,CAAtB;AAGP,OAAO,MAAMW,WAAW,GAAG;AACvBH,EAAAA,IAAI,EAAEI;AADiB,CAApB;AAGP,OAAO,MAAMC,YAAY,GAAG;AACxBL,EAAAA,IAAI,EAAEH;AADkB,CAArB;;AAGP,MAAMS,OAAO,GAAG,CAAEC,KAAK,GAAGnB,YAAV,EAAwBoB,MAAxB,KAAmC;AAC/C,UAAQA,MAAM,CAACR,IAAf;AACI,SAAKI,MAAL;AAAc;AACV,iCACOG,KADP;AAEIlB,UAAAA,UAAU,EAAG,IAFjB;AAGIC,UAAAA,IAAI,EAAGR;AAHX;AAKH;;AACD,SAAKe,OAAL;AAAe;AACX,iCACOU,KADP;AAEIlB,UAAAA,UAAU,EAAG,KAFjB;AAGIC,UAAAA,IAAI,EAAG;AAHX;AAKH;;AACD,SAAKW,OAAL;AAAc;AACV,iCACOM,KADP;AAEIpB,UAAAA,UAAU,EAAEqB,MAAM,CAACT;AAFvB;AAIH;;AACD;AAAS;AACL,iCACOQ,KADP;AAGH;AAzBL;AA2BH,CA5BD;;AA8BA,eAAeD,OAAf","sourcesContent":["const dummyUser = {\r\n    nickname: \"Guest\",\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n    signUpData: {},\r\n};\r\n\r\nexport const initialState = {\r\n    isLoggedIn : false,\r\n    user : null,\r\n};\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST'; \r\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS'; // 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE'; \r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // 엑션 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\nexport const LOG_OUT = 'LOG_OUT';\r\n\r\n//동적 데이터가 들어가기 위해 함수형으로 만듬\r\nexport const signUpAction = (data) => {\r\n    return{\r\n        type: SIGN_UP,\r\n        data: data,\r\n    };\r\n};\r\nexport const signUpSuccess = {\r\n    type: SIGN_UP_SUCCESS,\r\n}\r\nexport const loginAction = {\r\n    type: LOG_IN,\r\n};\r\nexport const logoutAction = {\r\n    type: LOG_OUT,\r\n};\r\nconst reducer = ( state = initialState, action) => {\r\n    switch (action.type){\r\n        case LOG_IN : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : true,\r\n                user : dummyUser,\r\n            };\r\n        }\r\n        case LOG_OUT : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : false,\r\n                user : null\r\n            };\r\n        }\r\n        case SIGN_UP: {\r\n            return{\r\n                ...state,\r\n                signUpData: action.data,\r\n            };\r\n        }\r\n        default: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n    } \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}