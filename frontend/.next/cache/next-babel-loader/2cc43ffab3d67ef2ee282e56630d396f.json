{"ast":null,"code":"import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\n\nfunction loginAPI() {// (3) 서버에 요청을 보냄\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI); // (2)loginAPI 로 요청을 보냄\n\n    yield put({\n      type: LOG_IN_SUCCESS\n    }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  while (true) {\n    yield take(LOG_IN);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  }\n\n  yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}\n; // take : 해당 액션이 dispatch 되면 제너레이터를 next하는 이펙트","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/frontend/sagas/user.js"],"names":["all","fork","takeLatest","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","loginAPI","login","type","e","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;;AACA,SAASC,QAAT,GAAmB,CACnB;AACC;;AACD,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMP,IAAI,CAACM,QAAD,CAAV,CADD,CACuB;;AACtB,UAAML,GAAG,CAAC;AACNO,MAAAA,IAAI,EAACJ;AADC,KAAD,CAAT,CAFD,CAIK;AACP,GALD,CAKC,OAAMK,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMR,GAAG,CAAC;AACNO,MAAAA,IAAI,EAACH;AADC,KAAD,CAAT;AAGH;AACJ;;AACD,UAAUO,UAAV,GAAsB;AAClB,SAAM,IAAN,EAAW;AACP,UAAMV,IAAI,CAACC,MAAD,CAAV;AACA,UAAMF,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH;;AACD,QAAML,UAAU,CAACI,MAAD,EAASI,KAAT,CAAhB,CAPkB,CAOe;AACpC;;AACD,eAAe,UAAUM,QAAV,GAAqB;AAChC,QAAMhB,GAAG,CAAC,CACNC,IAAI,CAACc,UAAD,CADE,CAAD,CAAT;AAGH;AAAA,C,CACD","sourcesContent":["import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\r\nfunction loginAPI(){\r\n// (3) 서버에 요청을 보냄\r\n}\r\nfunction* login(){ \r\n    try{\r\n        yield call(loginAPI); // (2)loginAPI 로 요청을 보냄\r\n        yield put({ \r\n            type:LOG_IN_SUCCESS\r\n        }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogin(){\r\n    while(true){\r\n        yield take(LOG_IN);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    }\r\n    yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\r\n}\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin)\r\n    ])\r\n};\r\n// take : 해당 액션이 dispatch 되면 제너레이터를 next하는 이펙트"]},"metadata":{},"sourceType":"module"}