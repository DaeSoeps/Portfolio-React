{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, signUpAction } from '../reducers/user';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\nfunction loginAPI(loginData) {\n  // (3) 서버에 요청을 보냄\n  // loginData: userid, password\n  return axios.post('/user/login', loginData);\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction* login(action) {\n  // 사가 패턴 3. 어떤 동작할지 결정\n  try {\n    yield call(loginAPI, action.data); // (2)loginAPI 로 요청을 보냄\n\n    yield put({\n      type: LOG_IN_SUCCESS\n    }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // 사가 패턴 2. takeEvery, Latest 여부 결정\n  //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\n  //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\n  // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  // 사가 패턴 1. 함수 등록\n  // fork, call : 함수 호출, fork는 비동기 호출\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/frontend/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signUpAction","axios","defaults","baseURL","loginAPI","loginData","post","signUpAPI","signUpData","login","action","data","type","e","console","error","signUp","watchLogin","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,EAA4GC,YAA5G,QAAgI,kBAAhI;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AAC5B;AACI;AACA,SAAOJ,KAAK,CAACK,IAAN,CAAW,aAAX,EAA0BD,SAA1B,CAAP;AACH;;AACD,SAASE,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B,SAAOP,KAAK,CAACK,IAAN,CAAW,QAAX,EAAqBE,UAArB,CAAP;AACH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB;AACA,MAAG;AACC,UAAMpB,IAAI,CAACc,QAAD,EAAWM,MAAM,CAACC,IAAlB,CAAV,CADD,CACoC;;AACnC,UAAMpB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACjB;AADC,KAAD,CAAT,CAFD,CAIK;AACP,GALD,CAKC,OAAMkB,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAChB;AADC,KAAD,CAAT;AAGH;AACJ;;AACD,UAAUoB,MAAV,CAAiBN,MAAjB,EAAwB;AACpB,MAAG;AACC,UAAMpB,IAAI,CAACiB,SAAD,EAAaG,MAAM,CAACC,IAApB,CAAV,CADD,CACsC;;AACrC,UAAMpB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACd;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMe,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACb,eADC;AAENgB,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUI,UAAV,GAAsB;AAClB;AACA;AACA;AACA;AACA,QAAM5B,SAAS,CAACK,cAAD,EAAiBe,KAAjB,CAAf;AACH;;AACD,UAAUS,WAAV,GAAuB;AACnB,QAAM7B,SAAS,CAACQ,eAAD,EAAkBmB,MAAlB,CAAf;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC;AACA;AACA,QAAMjC,GAAG,CAAC,CACNC,IAAI,CAAC8B,UAAD,CADE,EAEN9B,IAAI,CAAC+B,WAAD,CAFE,CAAD,CAAT;AAIH;AAAA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, signUpAction } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n\r\naxios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\nfunction loginAPI(loginData){\r\n// (3) 서버에 요청을 보냄\r\n    // loginData: userid, password\r\n    return axios.post('/user/login', loginData)\r\n}\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/user/', signUpData);\r\n}\r\n    \r\nfunction* login(action){ \r\n    // 사가 패턴 3. 어떤 동작할지 결정\r\n    try{\r\n        yield call(loginAPI, action.data); // (2)loginAPI 로 요청을 보냄\r\n        yield put({ \r\n            type:LOG_IN_SUCCESS\r\n        }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* signUp(action){ \r\n    try{\r\n        yield call(signUpAPI , action.data); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:SIGN_UP_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    // 사가 패턴 2. takeEvery, Latest 여부 결정\r\n    //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\r\n    //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\r\n    // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n \r\nexport default function* userSaga() {\r\n    // 사가 패턴 1. 함수 등록\r\n    // fork, call : 함수 호출, fork는 비동기 호출\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp),\r\n    ])\r\n};\r\n"]},"metadata":{},"sourceType":"module"}