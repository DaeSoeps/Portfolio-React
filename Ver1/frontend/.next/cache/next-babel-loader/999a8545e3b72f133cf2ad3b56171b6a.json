{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst dummyUser = {\n  nickname: \"Guest\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {}\n};\nexport const initialState = {\n  isLoggedIn: false,\n  user: null\n};\nexport const SIGN_UP = 'SING_UP';\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS'; // 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\n\nexport const LOG_IN = 'LOG_IN'; // 엑션 이름\n\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT = 'LOG_OUT'; //동적 데이터가 들어가기 위해 함수형으로 만듬\n\nexport const signUpAction = data => {\n  return {\n    type: SIGN_UP,\n    data: data\n  };\n};\nexport const signUpSuccess = {\n  type: SIGN_UP_SUCCESS\n};\nexport const loginAction = {\n  type: LOG_IN\n};\nexport const logoutAction = {\n  type: LOG_OUT\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/frontend/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","signUpData","initialState","isLoggedIn","user","SIGN_UP","SIGN_UP_SUCCESS","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT","signUpAction","data","type","signUpSuccess","loginAction","logoutAction","reducer","state","action"],"mappings":";;;;;;AAAA,MAAMA,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,OADI;AAEdC,EAAAA,IAAI,EAAE,EAFQ;AAGdC,EAAAA,UAAU,EAAE,EAHE;AAIdC,EAAAA,SAAS,EAAE,EAJG;AAKdC,EAAAA,UAAU,EAAE;AALE,CAAlB;AAQA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAG,KADW;AAExBC,EAAAA,IAAI,EAAG;AAFiB,CAArB;AAIP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB,C,CAA2C;;AAClD,OAAO,MAAMC,MAAM,GAAG,QAAf,C,CAAyB;;AAChC,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAClC,SAAM;AACFC,IAAAA,IAAI,EAAER,OADJ;AAEFO,IAAAA,IAAI,EAAEA;AAFJ,GAAN;AAIH,CALM;AAMP,OAAO,MAAME,aAAa,GAAG;AACzBD,EAAAA,IAAI,EAAEP;AADmB,CAAtB;AAGP,OAAO,MAAMS,WAAW,GAAG;AACvBF,EAAAA,IAAI,EAAEN;AADiB,CAApB;AAGP,OAAO,MAAMS,YAAY,GAAG;AACxBH,EAAAA,IAAI,EAAEH;AADkB,CAArB;;AAGP,MAAMO,OAAO,GAAG,CAAEC,KAAK,GAAGhB,YAAV,EAAwBiB,MAAxB,KAAmC;AAC/C,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKN,MAAL;AAAc;AACV,iCACOW,KADP;AAEIf,UAAAA,UAAU,EAAG,IAFjB;AAGIC,UAAAA,IAAI,EAAGR;AAHX;AAKH;;AACD,SAAKc,OAAL;AAAe;AACX,iCACOQ,KADP;AAEIf,UAAAA,UAAU,EAAG,KAFjB;AAGIC,UAAAA,IAAI,EAAG;AAHX;AAKH;;AACD,SAAKC,OAAL;AAAc;AACV,iCACOa,KADP;AAEIjB,UAAAA,UAAU,EAAEkB,MAAM,CAACP;AAFvB;AAIH;;AACD;AAAS;AACL,iCACOM,KADP;AAGH;AAzBL;AA2BH,CA5BD;;AA8BA,eAAeD,OAAf","sourcesContent":["const dummyUser = {\r\n    nickname: \"Guest\",\r\n    Post: [],\r\n    Followings: [],\r\n    Followers: [],\r\n    signUpData: {},\r\n};\r\n\r\nexport const initialState = {\r\n    isLoggedIn : false,\r\n    user : null,\r\n};\r\nexport const SIGN_UP = 'SING_UP';\r\nexport const SIGN_UP_SUCCESS = 'SING_UP_SUCCESS'; // 리덕스의 액션은 동기적으로 실행되기 떄문에 saga를 이용해 비동기를 구현함\r\nexport const LOG_IN = 'LOG_IN'; // 엑션 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\nexport const LOG_OUT = 'LOG_OUT';\r\n\r\n//동적 데이터가 들어가기 위해 함수형으로 만듬\r\nexport const signUpAction = (data) => {\r\n    return{\r\n        type: SIGN_UP,\r\n        data: data,\r\n    };\r\n};\r\nexport const signUpSuccess = {\r\n    type: SIGN_UP_SUCCESS,\r\n}\r\nexport const loginAction = {\r\n    type: LOG_IN,\r\n};\r\nexport const logoutAction = {\r\n    type: LOG_OUT,\r\n};\r\nconst reducer = ( state = initialState, action) => {\r\n    switch (action.type){\r\n        case LOG_IN : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : true,\r\n                user : dummyUser,\r\n            };\r\n        }\r\n        case LOG_OUT : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : false,\r\n                user : null\r\n            };\r\n        }\r\n        case SIGN_UP: {\r\n            return{\r\n                ...state,\r\n                signUpData: action.data,\r\n            };\r\n        }\r\n        default: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n    } \r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}