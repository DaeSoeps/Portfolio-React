{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Song\\\\Desktop\\\\projectpf\\\\frontend\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Icon, Button, Avatar, Input, List, Form, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport Link from 'next/link';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispath = useDispatch();\n  const onToggleComment = useCallback(() => {\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispath({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\n\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, post.content.split(/(#[^\\s]+)/g).map(v => {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: \"/hashtag\",\n          key: v,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, v));\n      }\n\n      return v;\n    })) // 게시물의 해쉬태그에 링크 걸어줘야함 (a tag로 하면 리액트 오류남, next의 Link tag 사용)\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, item.User.nickname[0]),\n      content: item.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/frontend/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Input","List","Form","Comment","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","Link","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispath","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","content","split","map","v","match","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\r\nimport { Card , Icon, Button, Avatar, Input, List, Form, Comment} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\nimport Link from 'next/link';\r\nconst PostCard = ( { post}) => {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const { me }= useSelector(state => state.user);\r\n  const { commentAdded, isAddingComment }= useSelector(state => state.post);\r\n  const dispath = useDispatch();\r\n  const onToggleComment = useCallback(() => {\r\n    // 댓글창이 펼쳐져 있으면 닫고 펼치는 동작\r\n    setCommentFormOpened(prev =>!prev);\r\n  }, []);\r\n  const onSubmitComment = useCallback((e) =>{\r\n    e.preventDefault();\r\n    if(!me){\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    dispath({\r\n      type:ADD_COMMENT_REQUEST,\r\n      data:{\r\n        postId: post.id,\r\n      },\r\n    });\r\n  }, [me && me.id]); // 객체확인 , 객체를 넣지말고 객체의 값을 넣자\r\n  const onChangeCommentText = useCallback((e) =>{\r\n    setCommentText(e.target.value);\r\n  },[]);\r\n  useEffect(()=>{\r\n    setCommentText('');\r\n  },[commentAdded ===true]);\r\n  return (\r\n    <div>\r\n    <Card\r\n    key={+post.createdAt}\r\n    cover={post.img && <img alt=\"example\" src={post.img}></img>}\r\n    actions={[\r\n      <Icon type=\"retweet\" key=\"retweet\"></Icon>,\r\n      <Icon type=\"heart\" key=\"heart\"></Icon>,\r\n      <Icon type=\"message\" key=\"message\" onClick={onToggleComment}></Icon>,\r\n      <Icon type=\"ellipsis\" key=\"ellipsis\"></Icon>\r\n    ]}\r\n    extra={<Button>팔로우</Button>}\r\n  >\r\n    <Card.Meta\r\n      avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n      title={post.User.nickname}\r\n      description={(\r\n      <div>{post.content.split(/(#[^\\s]+)/g).map((v)=>{\r\n        if(v.match(/#[^\\s]+/)){\r\n          return (\r\n          <Link href= \"/hashtag\" key={v}><a>{v}</a></Link>\r\n          )\r\n        }\r\n        return v;\r\n      })}</div>\r\n      )} // 게시물의 해쉬태그에 링크 걸어줘야함 (a tag로 하면 리액트 오류남, next의 Link tag 사용)\r\n    ></Card.Meta>\r\n  </Card>\r\n  {commentFormOpened && (\r\n    <>\r\n      <Form onSubmit={onSubmitComment}>\r\n        <Form.Item>\r\n          <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText}></Input.TextArea>\r\n        </Form.Item> \r\n        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n      </Form>\r\n      <List \r\n        header ={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n        itemLayout=\"horizontal\"\r\n        dataSource={post.Comments || []}\r\n        renderItem={(item => (\r\n        <li>\r\n          <Comment \r\n           author={item.User.nickname}\r\n           avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n           content={item.content}\r\n\r\n          >\r\n\r\n          </Comment>\r\n        </li>\r\n      ))}     \r\n      > \r\n        \r\n      </List>\r\n    </>\r\n  )}\r\n  </div>\r\n  )\r\n}\r\nPostCard.propTypes = {\r\n  post : PropTypes.shape({\r\n   User : PropTypes.object,\r\n   content : PropTypes.string,\r\n   img : PropTypes.string,\r\n   createdAt : PropTypes.object,\r\n  })\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}