{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, signUpAction } from '../reducers/user';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\nfunction logInAPI(loginData) {\n  // (3) 서버에 요청을 보냄\n  // loginData: userid, password\n  return axios.post('/user/login', loginData, {\n    withCredentials: true // (프론트)쿠키를 주고받을 수 있음, 서버쪽은 cors 로 설정\n\n  });\n}\n\nfunction* logIn(action) {\n  // 사가 패턴 3. 어떤 동작할지 결정\n  try {\n    const result = yield call(logInAPI, action.data); // (2)loginAPI 로 요청을 보냄\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // 사가 패턴 2. takeEvery, Latest 여부 결정\n  //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\n  //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\n  // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n} // 회원 가입 부분 -------------------------------------\n\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n} // 로그 아웃 부분 -------------------------------------\n\n\nfunction logOutAPI() {\n  // 로그아웃은 쿠키가 있으므로 데이터 받을게 없음, 대신 쿠키를 도메인이 다른 서버로 보내주려면 크리덴셜스 추가\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut(action) {\n  try {\n    yield call(logOutAPI, action.data); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n} // 로그 아웃 부분 -------------------------------------\n// 사용자정보 불러오기 부분 -------------------------------------\n\n\nfunction loadUserAPI(loadUserData) {\n  // 세션쿠키 서버로 보냄 > 유효한 쿠키면 데이터 전달함\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  try {\n    yield call(loadUserAPI, action.data); // 두번째는 첫번째의(함수) 인자값\n\n    yield put({\n      type: LOAD_USER_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n} // 사용자정보 불러오기 부분 -------------------------------------\n\n\nexport default function* userSaga() {\n  // 사가 패턴 1. 함수 등록\n  // fork, call : 함수 호출, fork는 비동기 호출\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}\n;","map":{"version":3,"sources":["C:/Users/Song/Desktop/projectpf/frontend/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signUpAction","axios","defaults","baseURL","logInAPI","loginData","post","withCredentials","logIn","action","result","data","type","e","console","error","watchLogIn","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogOut","LOG_OUT_REQUEST","loadUserAPI","loadUserData","get","loadUser","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","watchLoadUser","LOAD_USER_REQUEST","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,EAA4GC,YAA5G,QAAgI,kBAAhI;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AAC5B;AACI;AACA,SAAOJ,KAAK,CAACK,IAAN,CAAW,aAAX,EAA0BD,SAA1B,EAAsC;AACzCE,IAAAA,eAAe,EAAE,IADwB,CAClB;;AADkB,GAAtC,CAAP;AAGH;;AACD,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB;AACA,MAAG;AACC,UAAMC,MAAM,GAAI,MAAMpB,IAAI,CAACc,QAAD,EAAWK,MAAM,CAACE,IAAlB,CAA1B,CADD,CACoD;;AACnD,UAAMpB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAEjB,cADA;AAENgB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT,CAFD,CAKK;AACP,GAND,CAMC,OAAME,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAAChB;AADC,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUoB,UAAV,GAAsB;AAClB;AACA;AACA;AACA;AACA,QAAM3B,SAAS,CAACK,cAAD,EAAiBc,KAAjB,CAAf;AACH,C,CACD;;;AACA,SAASS,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B,SAAOjB,KAAK,CAACK,IAAN,CAAW,QAAX,EAAqBY,UAArB,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBV,MAAjB,EAAwB;AACpB,MAAG;AACC,UAAMnB,IAAI,CAAC2B,SAAD,EAAaR,MAAM,CAACE,IAApB,CAAV,CADD,CACsC;;AACrC,UAAMpB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACd;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMe,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACb,eADC;AAENgB,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUO,WAAV,GAAuB;AACnB,QAAM/B,SAAS,CAACQ,eAAD,EAAkBsB,MAAlB,CAAf;AACH,C,CACD;;;AACA,SAASE,SAAT,GAAoB;AAChB;AACA,SAAOpB,KAAK,CAACK,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AAClCC,IAAAA,eAAe,EAAE;AADiB,GAA/B,CAAP;AAGH;;AACD,UAAUe,MAAV,CAAiBb,MAAjB,EAAwB;AACpB,MAAG;AACC,UAAMnB,IAAI,CAAC+B,SAAD,EAAaZ,MAAM,CAACE,IAApB,CAAV,CADD,CACsC;;AACrC,UAAMpB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACW;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMV,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACY,eADC;AAENT,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUY,WAAV,GAAuB;AACnB,QAAMpC,SAAS,CAACqC,eAAD,EAAkBJ,MAAlB,CAAf;AACH,C,CACD;AAIA;;;AACA,SAASK,WAAT,CAAqBC,YAArB,EAAkC;AAC9B;AACA,SAAO3B,KAAK,CAAC4B,GAAN,CAAU,QAAV,EAAoB;AACvBtB,IAAAA,eAAe,EAAG;AADK,GAApB,CAAP;AAGH;;AAED,UAAUuB,QAAV,CAAmBrB,MAAnB,EAA0B;AACtB,MAAG;AACC,UAAMnB,IAAI,CAACqC,WAAD,EAAelB,MAAM,CAACE,IAAtB,CAAV,CADD,CACwC;;AACvC,UAAMpB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACmB;AADC,KAAD,CAAT;AAGH,GALD,CAKC,OAAMlB,CAAN,EAAQ;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMtB,GAAG,CAAC;AACNqB,MAAAA,IAAI,EAACoB,iBADC;AAENjB,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUoB,aAAV,GAAyB;AACrB,QAAM5C,SAAS,CAAC6C,iBAAD,EAAoBJ,QAApB,CAAf;AACH,C,CACD;;;AAEA,eAAe,UAAUK,QAAV,GAAqB;AAChC;AACA;AACA,QAAMjD,GAAG,CAAC,CACNC,IAAI,CAAC6B,UAAD,CADE,EAEN7B,IAAI,CAACsC,WAAD,CAFE,EAGNtC,IAAI,CAAC8C,aAAD,CAHE,EAIN9C,IAAI,CAACiC,WAAD,CAJE,CAAD,CAAT;AAMH;AAAA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, signUpAction } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\n\r\naxios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\nfunction logInAPI(loginData){\r\n// (3) 서버에 요청을 보냄\r\n    // loginData: userid, password\r\n    return axios.post('/user/login', loginData , {\r\n        withCredentials: true, // (프론트)쿠키를 주고받을 수 있음, 서버쪽은 cors 로 설정\r\n    });\r\n}\r\nfunction* logIn(action){ \r\n    // 사가 패턴 3. 어떤 동작할지 결정\r\n    try{\r\n        const result =  yield call(logInAPI, action.data); // (2)loginAPI 로 요청을 보냄\r\n        yield put({ \r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        }); // (4)put은 dispatch와 동일, call이 성공하면 LOG_IN_SUCCESS 실행\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    // 사가 패턴 2. takeEvery, Latest 여부 결정\r\n    //takeEvery : while 대체제, watch 에서 take 부분과 실행부분을 나눌때 사용\r\n    //takeLatest : 같은 액션 여러번 호출되도 마지막 액션만 실행(이전 요청이 끝나지 않았으면 이전 요청 취소)\r\n    // yield takeLatest(LOG_IN, login); // (1)LOG_IN 액션을 기다림\r\n    yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n// 회원 가입 부분 -------------------------------------\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction* signUp(action){ \r\n    try{\r\n        yield call(signUpAPI , action.data); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:SIGN_UP_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n// 로그 아웃 부분 -------------------------------------\r\nfunction logOutAPI(){\r\n    // 로그아웃은 쿠키가 있으므로 데이터 받을게 없음, 대신 쿠키를 도메인이 다른 서버로 보내주려면 크리덴셜스 추가\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\nfunction* logOut(action){ \r\n    try{\r\n        yield call(logOutAPI , action.data); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:LOG_OUT_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOG_OUT_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLogOut(){\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut)\r\n}\r\n// 로그 아웃 부분 -------------------------------------\r\n\r\n\r\n\r\n// 사용자정보 불러오기 부분 -------------------------------------\r\nfunction loadUserAPI(loadUserData){\r\n    // 세션쿠키 서버로 보냄 > 유효한 쿠키면 데이터 전달함\r\n    return axios.get('/user/', {\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* loadUser(action){ \r\n    try{\r\n        yield call(loadUserAPI , action.data); // 두번째는 첫번째의(함수) 인자값\r\n        yield put({ \r\n            type:LOAD_USER_SUCCESS\r\n        });\r\n    }catch(e){\r\n        console.error(e);\r\n        yield put({\r\n            type:LOAD_USER_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser)\r\n}\r\n// 사용자정보 불러오기 부분 -------------------------------------\r\n \r\nexport default function* userSaga() {\r\n    // 사가 패턴 1. 함수 등록\r\n    // fork, call : 함수 호출, fork는 비동기 호출\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n    ])\r\n};\r\n"]},"metadata":{},"sourceType":"module"}